// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: store/v1alpha2/store_service.proto

package storev1alpha2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StoreService_Push_FullMethodName   = "/store.v1alpha2.StoreService/Push"
	StoreService_Pull_FullMethodName   = "/store.v1alpha2.StoreService/Pull"
	StoreService_Lookup_FullMethodName = "/store.v1alpha2.StoreService/Lookup"
	StoreService_Delete_FullMethodName = "/store.v1alpha2.StoreService/Delete"
)

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Defines an interface for content-addressable storage
// service for arbitrary objects such as blobs, files, etc.
// It may also store metadata for pushed objects.
//
// Store service can be implemented by various storage backends,
// such as local file system, OCI registry, etc.
//
// Middleware should be used to control who can perform these RPCs.
// Policies for the middleware can be handled via separate service.
type StoreServiceClient interface {
	// Push performs streamed write operation for the provided object.
	// Objects must be sent in chunks if larger than 4MB.
	// All objects are stored in raw format.
	//
	// Some object types such as OASF records may be validated.
	// CID is ignored and is generated by the service.
	Push(ctx context.Context, opts ...grpc.CallOption) (StoreService_PushClient, error)
	// Pull performs streamed read operation for the requested object.
	// Object is sent back in chunks if larger than 4MB.
	Pull(ctx context.Context, in *ObjectRef, opts ...grpc.CallOption) (StoreService_PullClient, error)
	// Lookup resolves basic metadata for the object.
	// It does not return the object data.
	Lookup(ctx context.Context, in *ObjectRef, opts ...grpc.CallOption) (*Object, error)
	// Remove performs delete operation for the requested object.
	Delete(ctx context.Context, in *ObjectRef, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type storeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreServiceClient(cc grpc.ClientConnInterface) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (StoreService_PushClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StoreService_ServiceDesc.Streams[0], StoreService_Push_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storeServicePushClient{ClientStream: stream}
	return x, nil
}

type StoreService_PushClient interface {
	Send(*Object) error
	CloseAndRecv() (*ObjectRef, error)
	grpc.ClientStream
}

type storeServicePushClient struct {
	grpc.ClientStream
}

func (x *storeServicePushClient) Send(m *Object) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storeServicePushClient) CloseAndRecv() (*ObjectRef, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ObjectRef)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeServiceClient) Pull(ctx context.Context, in *ObjectRef, opts ...grpc.CallOption) (StoreService_PullClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StoreService_ServiceDesc.Streams[1], StoreService_Pull_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &storeServicePullClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StoreService_PullClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type storeServicePullClient struct {
	grpc.ClientStream
}

func (x *storeServicePullClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storeServiceClient) Lookup(ctx context.Context, in *ObjectRef, opts ...grpc.CallOption) (*Object, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Object)
	err := c.cc.Invoke(ctx, StoreService_Lookup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) Delete(ctx context.Context, in *ObjectRef, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StoreService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
// All implementations should embed UnimplementedStoreServiceServer
// for forward compatibility.
//
// Defines an interface for content-addressable storage
// service for arbitrary objects such as blobs, files, etc.
// It may also store metadata for pushed objects.
//
// Store service can be implemented by various storage backends,
// such as local file system, OCI registry, etc.
//
// Middleware should be used to control who can perform these RPCs.
// Policies for the middleware can be handled via separate service.
type StoreServiceServer interface {
	// Push performs streamed write operation for the provided object.
	// Objects must be sent in chunks if larger than 4MB.
	// All objects are stored in raw format.
	//
	// Some object types such as OASF records may be validated.
	// CID is ignored and is generated by the service.
	Push(StoreService_PushServer) error
	// Pull performs streamed read operation for the requested object.
	// Object is sent back in chunks if larger than 4MB.
	Pull(*ObjectRef, StoreService_PullServer) error
	// Lookup resolves basic metadata for the object.
	// It does not return the object data.
	Lookup(context.Context, *ObjectRef) (*Object, error)
	// Remove performs delete operation for the requested object.
	Delete(context.Context, *ObjectRef) (*emptypb.Empty, error)
}

// UnimplementedStoreServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoreServiceServer struct{}

func (UnimplementedStoreServiceServer) Push(StoreService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedStoreServiceServer) Pull(*ObjectRef, StoreService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedStoreServiceServer) Lookup(context.Context, *ObjectRef) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedStoreServiceServer) Delete(context.Context, *ObjectRef) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStoreServiceServer) testEmbeddedByValue() {}

// UnsafeStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServiceServer will
// result in compilation errors.
type UnsafeStoreServiceServer interface {
	mustEmbedUnimplementedStoreServiceServer()
}

func RegisterStoreServiceServer(s grpc.ServiceRegistrar, srv StoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StoreService_ServiceDesc, srv)
}

func _StoreService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StoreServiceServer).Push(&storeServicePushServer{ServerStream: stream})
}

type StoreService_PushServer interface {
	SendAndClose(*ObjectRef) error
	Recv() (*Object, error)
	grpc.ServerStream
}

type storeServicePushServer struct {
	grpc.ServerStream
}

func (x *storeServicePushServer) SendAndClose(m *ObjectRef) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storeServicePushServer) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StoreService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectRef)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoreServiceServer).Pull(m, &storeServicePullServer{ServerStream: stream})
}

type StoreService_PullServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type storeServicePullServer struct {
	grpc.ServerStream
}

func (x *storeServicePullServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _StoreService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_Lookup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Lookup(ctx, req.(*ObjectRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).Delete(ctx, req.(*ObjectRef))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreService_ServiceDesc is the grpc.ServiceDesc for StoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.v1alpha2.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _StoreService_Lookup_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StoreService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _StoreService_Push_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _StoreService_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "store/v1alpha2/store_service.proto",
}
