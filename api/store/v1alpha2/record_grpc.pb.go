// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: store/v1alpha2/record.proto

package storev1alpha2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecordObjectService_ConvertToRecordObject_FullMethodName   = "/store.v1alpha2.RecordObjectService/ConvertToRecordObject"
	RecordObjectService_ConvertFromRecordObject_FullMethodName = "/store.v1alpha2.RecordObjectService/ConvertFromRecordObject"
)

// RecordObjectServiceClient is the client API for RecordObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Converts Object to an RecordObject and vice versa.
// This is client-side service only.
type RecordObjectServiceClient interface {
	// Converts an Object to a RecordObject.
	ConvertToRecordObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*RecordObject, error)
	// Converts a RecordObject to an Object.
	ConvertFromRecordObject(ctx context.Context, in *RecordObject, opts ...grpc.CallOption) (*Object, error)
}

type recordObjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordObjectServiceClient(cc grpc.ClientConnInterface) RecordObjectServiceClient {
	return &recordObjectServiceClient{cc}
}

func (c *recordObjectServiceClient) ConvertToRecordObject(ctx context.Context, in *Object, opts ...grpc.CallOption) (*RecordObject, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordObject)
	err := c.cc.Invoke(ctx, RecordObjectService_ConvertToRecordObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordObjectServiceClient) ConvertFromRecordObject(ctx context.Context, in *RecordObject, opts ...grpc.CallOption) (*Object, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Object)
	err := c.cc.Invoke(ctx, RecordObjectService_ConvertFromRecordObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordObjectServiceServer is the server API for RecordObjectService service.
// All implementations should embed UnimplementedRecordObjectServiceServer
// for forward compatibility.
//
// Converts Object to an RecordObject and vice versa.
// This is client-side service only.
type RecordObjectServiceServer interface {
	// Converts an Object to a RecordObject.
	ConvertToRecordObject(context.Context, *Object) (*RecordObject, error)
	// Converts a RecordObject to an Object.
	ConvertFromRecordObject(context.Context, *RecordObject) (*Object, error)
}

// UnimplementedRecordObjectServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordObjectServiceServer struct{}

func (UnimplementedRecordObjectServiceServer) ConvertToRecordObject(context.Context, *Object) (*RecordObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertToRecordObject not implemented")
}
func (UnimplementedRecordObjectServiceServer) ConvertFromRecordObject(context.Context, *RecordObject) (*Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertFromRecordObject not implemented")
}
func (UnimplementedRecordObjectServiceServer) testEmbeddedByValue() {}

// UnsafeRecordObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordObjectServiceServer will
// result in compilation errors.
type UnsafeRecordObjectServiceServer interface {
	mustEmbedUnimplementedRecordObjectServiceServer()
}

func RegisterRecordObjectServiceServer(s grpc.ServiceRegistrar, srv RecordObjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordObjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordObjectService_ServiceDesc, srv)
}

func _RecordObjectService_ConvertToRecordObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordObjectServiceServer).ConvertToRecordObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordObjectService_ConvertToRecordObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordObjectServiceServer).ConvertToRecordObject(ctx, req.(*Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordObjectService_ConvertFromRecordObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordObjectServiceServer).ConvertFromRecordObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordObjectService_ConvertFromRecordObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordObjectServiceServer).ConvertFromRecordObject(ctx, req.(*RecordObject))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordObjectService_ServiceDesc is the grpc.ServiceDesc for RecordObjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordObjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.v1alpha2.RecordObjectService",
	HandlerType: (*RecordObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertToRecordObject",
			Handler:    _RecordObjectService_ConvertToRecordObject_Handler,
		},
		{
			MethodName: "ConvertFromRecordObject",
			Handler:    _RecordObjectService_ConvertFromRecordObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store/v1alpha2/record.proto",
}
