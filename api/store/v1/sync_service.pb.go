// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: store/v1/sync_service.proto

package storev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SyncStatus enumeration defines the possible states of a synchronization operation.
type SyncStatus int32

const (
	// Default/unset status - should not be used in practice
	SyncStatus_SYNC_STATUS_UNSPECIFIED SyncStatus = 0
	// Sync operation has been created but not yet started
	SyncStatus_SYNC_STATUS_PENDING SyncStatus = 1
	// Sync operation is actively discovering and transferring objects
	SyncStatus_SYNC_STATUS_IN_PROGRESS SyncStatus = 2
	// Sync operation encountered an error and stopped
	SyncStatus_SYNC_STATUS_FAILED SyncStatus = 3
	// Sync operation has been marked for deletion but cleanup not yet started
	SyncStatus_SYNC_STATUS_DELETE_PENDING SyncStatus = 4
	// Sync operation has been successfully deleted and cleaned up
	SyncStatus_SYNC_STATUS_DELETED SyncStatus = 5
)

// Enum value maps for SyncStatus.
var (
	SyncStatus_name = map[int32]string{
		0: "SYNC_STATUS_UNSPECIFIED",
		1: "SYNC_STATUS_PENDING",
		2: "SYNC_STATUS_IN_PROGRESS",
		3: "SYNC_STATUS_FAILED",
		4: "SYNC_STATUS_DELETE_PENDING",
		5: "SYNC_STATUS_DELETED",
	}
	SyncStatus_value = map[string]int32{
		"SYNC_STATUS_UNSPECIFIED":    0,
		"SYNC_STATUS_PENDING":        1,
		"SYNC_STATUS_IN_PROGRESS":    2,
		"SYNC_STATUS_FAILED":         3,
		"SYNC_STATUS_DELETE_PENDING": 4,
		"SYNC_STATUS_DELETED":        5,
	}
)

func (x SyncStatus) Enum() *SyncStatus {
	p := new(SyncStatus)
	*p = x
	return p
}

func (x SyncStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_store_v1_sync_service_proto_enumTypes[0].Descriptor()
}

func (SyncStatus) Type() protoreflect.EnumType {
	return &file_store_v1_sync_service_proto_enumTypes[0]
}

func (x SyncStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncStatus.Descriptor instead.
func (SyncStatus) EnumDescriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{0}
}

// CreateSyncRequest defines the parameters for creating a new synchronization operation.
//
// Currently supports basic synchronization of all objects from a remote Directory.
// Future versions may include additional options for filtering and scheduling capabilities.
type CreateSyncRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL of the remote Registry to synchronize from.
	//
	// This should be a complete URL including protocol and port if non-standard.
	// Examples:
	// - "https://directory.example.com"
	// - "http://localhost:8080"
	// - "https://directory.example.com:9443"
	RemoteDirectoryUrl string `protobuf:"bytes,1,opt,name=remote_directory_url,json=remoteDirectoryUrl,proto3" json:"remote_directory_url,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateSyncRequest) Reset() {
	*x = CreateSyncRequest{}
	mi := &file_store_v1_sync_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncRequest) ProtoMessage() {}

func (x *CreateSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncRequest.ProtoReflect.Descriptor instead.
func (*CreateSyncRequest) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSyncRequest) GetRemoteDirectoryUrl() string {
	if x != nil {
		return x.RemoteDirectoryUrl
	}
	return ""
}

// CreateSyncResponse contains the result of creating a new synchronization operation.
type CreateSyncResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the created synchronization operation.
	// This ID can be used with other SyncService RPCs to monitor and manage the sync.
	SyncId        string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSyncResponse) Reset() {
	*x = CreateSyncResponse{}
	mi := &file_store_v1_sync_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSyncResponse) ProtoMessage() {}

func (x *CreateSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSyncResponse.ProtoReflect.Descriptor instead.
func (*CreateSyncResponse) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSyncResponse) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

// ListSyncsRequest specifies parameters for listing synchronization operations.
type ListSyncsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional limit on the number of results to return.
	Limit *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Optional offset for pagination of results.
	Offset        *uint32 `protobuf:"varint,3,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSyncsRequest) Reset() {
	*x = ListSyncsRequest{}
	mi := &file_store_v1_sync_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSyncsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncsRequest) ProtoMessage() {}

func (x *ListSyncsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncsRequest.ProtoReflect.Descriptor instead.
func (*ListSyncsRequest) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListSyncsRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListSyncsRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// ListSyncItem represents a single synchronization in the list of all syncs.
type ListSyncsItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the synchronization operation.
	SyncId string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	// Current status of the synchronization operation.
	Status SyncStatus `protobuf:"varint,2,opt,name=status,proto3,enum=store.v1.SyncStatus" json:"status,omitempty"`
	// URL of the remote Directory being synchronized from.
	RemoteDirectoryUrl string `protobuf:"bytes,3,opt,name=remote_directory_url,json=remoteDirectoryUrl,proto3" json:"remote_directory_url,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListSyncsItem) Reset() {
	*x = ListSyncsItem{}
	mi := &file_store_v1_sync_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSyncsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncsItem) ProtoMessage() {}

func (x *ListSyncsItem) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncsItem.ProtoReflect.Descriptor instead.
func (*ListSyncsItem) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListSyncsItem) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *ListSyncsItem) GetStatus() SyncStatus {
	if x != nil {
		return x.Status
	}
	return SyncStatus_SYNC_STATUS_UNSPECIFIED
}

func (x *ListSyncsItem) GetRemoteDirectoryUrl() string {
	if x != nil {
		return x.RemoteDirectoryUrl
	}
	return ""
}

// GetSyncRequest specifies which synchronization status to retrieve.
type GetSyncRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the synchronization operation to query.
	SyncId        string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSyncRequest) Reset() {
	*x = GetSyncRequest{}
	mi := &file_store_v1_sync_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncRequest) ProtoMessage() {}

func (x *GetSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncRequest.ProtoReflect.Descriptor instead.
func (*GetSyncRequest) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetSyncRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

// GetSyncResponse provides detailed information about a specific synchronization operation.
type GetSyncResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the synchronization operation.
	SyncId string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	// Current status of the synchronization operation.
	Status SyncStatus `protobuf:"varint,2,opt,name=status,proto3,enum=store.v1.SyncStatus" json:"status,omitempty"`
	// URL of the remote Directory node being synchronized from.
	RemoteDirectoryUrl string `protobuf:"bytes,3,opt,name=remote_directory_url,json=remoteDirectoryUrl,proto3" json:"remote_directory_url,omitempty"`
	// Timestamp when the synchronization operation was created in the RFC3339 format.
	// Specs: https://www.rfc-editor.org/rfc/rfc3339.html
	CreatedTime string `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// Timestamp of the most recent status update for this synchronization in the RFC3339 format.
	LastUpdateTime string `protobuf:"bytes,5,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetSyncResponse) Reset() {
	*x = GetSyncResponse{}
	mi := &file_store_v1_sync_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSyncResponse) ProtoMessage() {}

func (x *GetSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSyncResponse.ProtoReflect.Descriptor instead.
func (*GetSyncResponse) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetSyncResponse) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

func (x *GetSyncResponse) GetStatus() SyncStatus {
	if x != nil {
		return x.Status
	}
	return SyncStatus_SYNC_STATUS_UNSPECIFIED
}

func (x *GetSyncResponse) GetRemoteDirectoryUrl() string {
	if x != nil {
		return x.RemoteDirectoryUrl
	}
	return ""
}

func (x *GetSyncResponse) GetCreatedTime() string {
	if x != nil {
		return x.CreatedTime
	}
	return ""
}

func (x *GetSyncResponse) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

// DeleteSyncRequest specifies which synchronization to delete.
type DeleteSyncRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the synchronization operation to delete.
	SyncId        string `protobuf:"bytes,1,opt,name=sync_id,json=syncId,proto3" json:"sync_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSyncRequest) Reset() {
	*x = DeleteSyncRequest{}
	mi := &file_store_v1_sync_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncRequest) ProtoMessage() {}

func (x *DeleteSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncRequest.ProtoReflect.Descriptor instead.
func (*DeleteSyncRequest) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteSyncRequest) GetSyncId() string {
	if x != nil {
		return x.SyncId
	}
	return ""
}

// DeleteSyncResponse
type DeleteSyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteSyncResponse) Reset() {
	*x = DeleteSyncResponse{}
	mi := &file_store_v1_sync_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSyncResponse) ProtoMessage() {}

func (x *DeleteSyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSyncResponse.ProtoReflect.Descriptor instead.
func (*DeleteSyncResponse) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{7}
}

type RequestRegistryCredentialsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identity of the requesting node
	// For example: spiffe://example.org/service/foo
	RequestingNodeId string `protobuf:"bytes,1,opt,name=requesting_node_id,json=requestingNodeId,proto3" json:"requesting_node_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RequestRegistryCredentialsRequest) Reset() {
	*x = RequestRegistryCredentialsRequest{}
	mi := &file_store_v1_sync_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestRegistryCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistryCredentialsRequest) ProtoMessage() {}

func (x *RequestRegistryCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistryCredentialsRequest.ProtoReflect.Descriptor instead.
func (*RequestRegistryCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{8}
}

func (x *RequestRegistryCredentialsRequest) GetRequestingNodeId() string {
	if x != nil {
		return x.RequestingNodeId
	}
	return ""
}

type RequestRegistryCredentialsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Success status of the credential negotiation
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Error message if negotiation failed
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// URL of the remote Registry being synchronized from.
	RemoteRegistryUrl string `protobuf:"bytes,3,opt,name=remote_registry_url,json=remoteRegistryUrl,proto3" json:"remote_registry_url,omitempty"`
	// Registry credentials (oneof based on credential type)
	//
	// Types that are valid to be assigned to Credentials:
	//
	//	*RequestRegistryCredentialsResponse_BasicAuth
	Credentials   isRequestRegistryCredentialsResponse_Credentials `protobuf_oneof:"credentials"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestRegistryCredentialsResponse) Reset() {
	*x = RequestRegistryCredentialsResponse{}
	mi := &file_store_v1_sync_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestRegistryCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestRegistryCredentialsResponse) ProtoMessage() {}

func (x *RequestRegistryCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestRegistryCredentialsResponse.ProtoReflect.Descriptor instead.
func (*RequestRegistryCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{9}
}

func (x *RequestRegistryCredentialsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RequestRegistryCredentialsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RequestRegistryCredentialsResponse) GetRemoteRegistryUrl() string {
	if x != nil {
		return x.RemoteRegistryUrl
	}
	return ""
}

func (x *RequestRegistryCredentialsResponse) GetCredentials() isRequestRegistryCredentialsResponse_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *RequestRegistryCredentialsResponse) GetBasicAuth() *BasicAuthCredentials {
	if x != nil {
		if x, ok := x.Credentials.(*RequestRegistryCredentialsResponse_BasicAuth); ok {
			return x.BasicAuth
		}
	}
	return nil
}

type isRequestRegistryCredentialsResponse_Credentials interface {
	isRequestRegistryCredentialsResponse_Credentials()
}

type RequestRegistryCredentialsResponse_BasicAuth struct {
	BasicAuth *BasicAuthCredentials `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"` // CertificateCredentials certificate = 5;
}

func (*RequestRegistryCredentialsResponse_BasicAuth) isRequestRegistryCredentialsResponse_Credentials() {
}

// Supporting credential type definitions
type BasicAuthCredentials struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicAuthCredentials) Reset() {
	*x = BasicAuthCredentials{}
	mi := &file_store_v1_sync_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicAuthCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuthCredentials) ProtoMessage() {}

func (x *BasicAuthCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_store_v1_sync_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuthCredentials.ProtoReflect.Descriptor instead.
func (*BasicAuthCredentials) Descriptor() ([]byte, []int) {
	return file_store_v1_sync_service_proto_rawDescGZIP(), []int{10}
}

func (x *BasicAuthCredentials) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *BasicAuthCredentials) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_store_v1_sync_service_proto protoreflect.FileDescriptor

var file_store_v1_sync_service_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55,
	0x72, 0x6c, 0x22, 0x2d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49,
	0x64, 0x22, 0x5f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x22, 0x29, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x21, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x22, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x55, 0x72, 0x6c, 0x12,
	0x3f, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22,
	0x4e, 0x0a, 0x14, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a,
	0xb0, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x32, 0x9c, 0x03, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x30, 0x01, 0x12,
	0x3e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1b, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x1a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x8d, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x10, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x64, 0x69, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_store_v1_sync_service_proto_rawDescOnce sync.Once
	file_store_v1_sync_service_proto_rawDescData []byte
)

func file_store_v1_sync_service_proto_rawDescGZIP() []byte {
	file_store_v1_sync_service_proto_rawDescOnce.Do(func() {
		file_store_v1_sync_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_v1_sync_service_proto_rawDesc), len(file_store_v1_sync_service_proto_rawDesc)))
	})
	return file_store_v1_sync_service_proto_rawDescData
}

var file_store_v1_sync_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_store_v1_sync_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_store_v1_sync_service_proto_goTypes = []any{
	(SyncStatus)(0),                            // 0: store.v1.SyncStatus
	(*CreateSyncRequest)(nil),                  // 1: store.v1.CreateSyncRequest
	(*CreateSyncResponse)(nil),                 // 2: store.v1.CreateSyncResponse
	(*ListSyncsRequest)(nil),                   // 3: store.v1.ListSyncsRequest
	(*ListSyncsItem)(nil),                      // 4: store.v1.ListSyncsItem
	(*GetSyncRequest)(nil),                     // 5: store.v1.GetSyncRequest
	(*GetSyncResponse)(nil),                    // 6: store.v1.GetSyncResponse
	(*DeleteSyncRequest)(nil),                  // 7: store.v1.DeleteSyncRequest
	(*DeleteSyncResponse)(nil),                 // 8: store.v1.DeleteSyncResponse
	(*RequestRegistryCredentialsRequest)(nil),  // 9: store.v1.RequestRegistryCredentialsRequest
	(*RequestRegistryCredentialsResponse)(nil), // 10: store.v1.RequestRegistryCredentialsResponse
	(*BasicAuthCredentials)(nil),               // 11: store.v1.BasicAuthCredentials
}
var file_store_v1_sync_service_proto_depIdxs = []int32{
	0,  // 0: store.v1.ListSyncsItem.status:type_name -> store.v1.SyncStatus
	0,  // 1: store.v1.GetSyncResponse.status:type_name -> store.v1.SyncStatus
	11, // 2: store.v1.RequestRegistryCredentialsResponse.basic_auth:type_name -> store.v1.BasicAuthCredentials
	1,  // 3: store.v1.SyncService.CreateSync:input_type -> store.v1.CreateSyncRequest
	3,  // 4: store.v1.SyncService.ListSyncs:input_type -> store.v1.ListSyncsRequest
	5,  // 5: store.v1.SyncService.GetSync:input_type -> store.v1.GetSyncRequest
	7,  // 6: store.v1.SyncService.DeleteSync:input_type -> store.v1.DeleteSyncRequest
	9,  // 7: store.v1.SyncService.RequestRegistryCredentials:input_type -> store.v1.RequestRegistryCredentialsRequest
	2,  // 8: store.v1.SyncService.CreateSync:output_type -> store.v1.CreateSyncResponse
	4,  // 9: store.v1.SyncService.ListSyncs:output_type -> store.v1.ListSyncsItem
	6,  // 10: store.v1.SyncService.GetSync:output_type -> store.v1.GetSyncResponse
	8,  // 11: store.v1.SyncService.DeleteSync:output_type -> store.v1.DeleteSyncResponse
	10, // 12: store.v1.SyncService.RequestRegistryCredentials:output_type -> store.v1.RequestRegistryCredentialsResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_store_v1_sync_service_proto_init() }
func file_store_v1_sync_service_proto_init() {
	if File_store_v1_sync_service_proto != nil {
		return
	}
	file_store_v1_object_proto_init()
	file_store_v1_sync_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_store_v1_sync_service_proto_msgTypes[9].OneofWrappers = []any{
		(*RequestRegistryCredentialsResponse_BasicAuth)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_v1_sync_service_proto_rawDesc), len(file_store_v1_sync_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_store_v1_sync_service_proto_goTypes,
		DependencyIndexes: file_store_v1_sync_service_proto_depIdxs,
		EnumInfos:         file_store_v1_sync_service_proto_enumTypes,
		MessageInfos:      file_store_v1_sync_service_proto_msgTypes,
	}.Build()
	File_store_v1_sync_service_proto = out.File
	file_store_v1_sync_service_proto_goTypes = nil
	file_store_v1_sync_service_proto_depIdxs = nil
}
