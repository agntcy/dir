// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package routing.v1alpha2;

import "google/protobuf/empty.proto";
import "routing/v1alpha2/peer.proto";
import "routing/v1alpha2/record_query.proto";
import "core/v1/record.proto";

// Defines an interface for announcement and discovery
// of records across interconnected network.
//
// Middleware should be used to control who can perform these RPCs.
// Policies for the middleware can be handled via separate service.
service RoutingService {
  // Announce to the network that this peer is providing a given record.
  // This enables other peers to discover this record and retrieve it
  // from this peer. Listeners can use this event to perform custom operations,
  // for example by cloning the record.
  //
  // Items need to be periodically republished (eg. 24h) to the network
  // to avoid stale data. Republication should be done in the background.
  rpc Publish(PublishRequest) returns (google.protobuf.Empty);

  // Stop serving this record to the network. If other peers try 
  // to retrieve this record, the peer will refuse the request.
  rpc Unpublish(UnpublishRequest) returns (google.protobuf.Empty);

  // Search records based on the request across the network.
  // This will search the network for the record with the given parameters.
  //
  // It is possible that the records are stale or that they do not exist.
  // Some records may be provided by multiple peers.
  //
  // Results from the search can be used as an input
  // to Pull operation to retrieve the records.
  rpc Search(SearchRequest) returns (stream SearchResponse);

  // List all records that this peer is currently providing
  // that match the given parameters.
  // This operation does not interact with the network.
  rpc List(ListRequest) returns (stream ListResponse);
}

message PublishRequest {
  // Reference to the agent record to be published.
  string record_cid = 1;
}

message UnpublishRequest {
  // Reference to the agent record to be unpublished.
  string record_cid = 1;
}

message SearchRequest {
  // List of queries to match against the records.
  repeated RecordQuery queries = 1;

  // Minimal target query match score.
  // For example, if min_match_score=2, it will return records that match
  // at least two of the queries.
  // If not set, it will return records that match at least one query.
  optional uint32 min_match_score = 2;

  // Limit the number of results returned.
  // If not set, it will return all discovered records.
  // Note that this is a soft limit, as the search may return more results
  // than the limit if there are multiple peers providing the same record.
  optional uint32 limit = 3;

  // TODO: we may want to add a way to filter results by peer.
}

message SearchResponse {
  // The record that matches the search query.
  string record_cid = 1;

  // The peer that provided the record.
  Peer peer = 2;

  // The queries that were matched.
  repeated RecordQuery match_queries = 3;

  // The score of the search match.
  uint32 match_score = 4;
}

message ListRequest {
  // List of queries to match against the records.
  // If set, all queries must match for the record to be returned.
  repeated RecordQuery queries = 1;

  // Limit the number of results returned.
  // If not set, it will return all records that this peer is providing.
  optional uint32 limit = 2;

  // Legacy list request.
  // TODO Remove when new announce and discovery design is implemented
  optional LegacyListRequest legacy_list_request = 3;
}

message LegacyListRequest {
  // Target peer.
  // If selected, it returns the skill details for this peer.
  // It may use labels to only return selected labels.
  optional Peer peer = 1;

  // Target labels.
  // For example, labels={"skill=text", "skill=text/rag"}
  repeated string labels = 2;

  // Target record, if any.
  // If set, it will return only the record with the given reference.
  optional core.v1.RecordRef ref = 3;

  // Max routing depth.
  optional uint32 max_hops = 4;
}

message ListResponse {
  // The record that matches the list queries.
  string record_cid = 1;

  // Legacy list response.
  // TODO Remove when new announce and discovery design is implemented
  optional LegacyListResponse legacy_list_response = 2;
}

message LegacyListResponse {
  message Item {
    // Labels associated with a given record
    repeated string labels = 1;

    // Optionally sends count details about individual skill.
    // This is only set when querying labels or our own current peer.
    // For record requests, only returns the data about that record.
    map<string, uint64> label_counts = 2;

    // Peer that returned this record.
    Peer peer = 3;

    // Found record if any.
    // If empty, then only the labels are important.
    optional core.v1.RecordRef ref = 4;
  }

  // Returned items that match a given request
  repeated Item items = 1;
}
