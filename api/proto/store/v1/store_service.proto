// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package store.v1;

import "core/v1/record.proto";
import "sign/v1/sign_service.proto";
import "google/protobuf/empty.proto";

// Defines an interface for content-addressable storage
// service for objects.
//
// Max object size: 4MB (to fully fit in a single request)
// Max metadata size: 100KB
//
// Store service can be implemented by various storage backends,
// such as local file system, OCI registry, etc.
//
// Middleware should be used to control who can perform these RPCs.
// Policies for the middleware can be handled via separate service.
//
// Each operation is performed sequentially, meaning that
// for the N-th request, N-th response will be returned.
// If an error occurs, the stream will be cancelled.
service StoreService {
  // Push performs write operation for given records.
  rpc Push(stream core.v1.Record) returns (stream core.v1.RecordRef);

  // Pull performs read operation for given records.
  rpc Pull(stream core.v1.RecordRef) returns (stream core.v1.Record);

  // Lookup resolves basic metadata for the records.
  rpc Lookup(stream core.v1.RecordRef) returns (stream core.v1.RecordMeta);

  // Remove performs delete operation for the records.
  rpc Delete(stream core.v1.RecordRef) returns (google.protobuf.Empty);

  // PushWithOptions performs write operation for records with optional OCI artifacts like signatures.
  rpc PushWithOptions(stream PushWithOptionsRequest) returns (stream PushWithOptionsResponse);

  // PullWithOptions retrieves records along with their associated OCI artifacts.
  rpc PullWithOptions(stream PullWithOptionsRequest) returns (stream PullWithOptionsResponse);
}

// PushWithOptionsRequest represents a record with optional OCI artifacts for push operations.
message PushWithOptionsRequest {
  // Record to be stored
  core.v1.Record record = 1;

  // Push options containing optional artifacts
  PushOptions options = 2;
}

// PushOptions contains optional artifacts for push operations.
message PushOptions {
  // Optional signature to be stored as separate manifest
  optional sign.v1.Signature signature = 1;
}

// PushWithOptionsResponse is returned after successfully storing a record with options.
message PushWithOptionsResponse {
  // Reference to the stored record
  core.v1.RecordRef record_ref = 1;
}

// PullWithOptionsRequest specifies which record and artifacts to retrieve.
message PullWithOptionsRequest {
  // Reference to the record to retrieve
  core.v1.RecordRef record_ref = 1;

  // Pull options specifying which artifacts to include
  PullOptions options = 2;
}

// PullOptions specifies which artifacts to include in pull operations.
message PullOptions {
  // Signature to be included
  bool include_signature = 1;
}

// PullWithOptionsResponse contains a record and its associated artifacts.
message PullWithOptionsResponse {
  // Stored record
  core.v1.Record record = 1;
  
  // Associated signature, if requested and available
  optional sign.v1.Signature signature = 2;
}
