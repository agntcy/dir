// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package sign.v1alpha2;

import "core/v1alpha2/record.proto";
import "google/protobuf/empty.proto";

service SignService {
  // Sign record using keyless OIDC based provider or using PEM-encoded private key with an optional passphrase
  rpc Sign(SignRequest) returns (SignResponse);

  // Verify signed record using keyless OIDC based provider or using PEM-encoded formatted PEM public key encrypted
  rpc Verify(VerifyRequest) returns (google.protobuf.Empty);
}

message SignRequest {
  oneof request {
    SignOIDCRequest oidc = 1;
    SignWithKeyRequest key = 2;
  }
}

message SignResponse {
  oneof response {
    SignOIDCResponse oidc = 1;
    SignWithKeyResponse key = 2;
  }
}

message SignOIDCRequest {
  // List of sign options for OIDC
  message SignOpts {
    // Fulcio authority access URL (default value: https://fulcio.sigstage.dev)
    optional string fulcio_url = 1;

    // Rekor validator access URL (default value: https://rekor.sigstage.dev)
    optional string rekor_url = 2;

    // Timestamp authority access URL (default value: https://timestamp.sigstage.dev/api/v1/timestamp)
    optional string timestamp_url = 3;

    // OIDC provider access URL (default value: https://oauth2.sigstage.dev/auth)
    optional string oidc_provider_url = 4;
  }

  // Record data for signing
  core.v1alpha2.Record record = 1;

  // Token for OIDC provider
  string id_token = 2;

  // Signing options for OIDC
  SignOpts options = 3;
}

message SignWithKeyRequest {
  // Record data for signing
  core.v1alpha2.Record record = 1;

  // Private key used for signing
  bytes private_key = 2;

  // Password to unlock the private key
  optional bytes password = 3;
}

message SignOIDCResponse {
  // Signed record data
  core.v1alpha2.Record record = 1;
}

message SignWithKeyResponse {
  // Signed record data
  core.v1alpha2.Record record = 1;
}

message VerifyRequest {
  oneof request {
    VerifyOIDCRequest oidc = 1;
    VerifyWithKeyRequest key = 2;
  }
}

message VerifyOIDCRequest {
  // Signed record data
  core.v1alpha2.Record record = 1;

  // Expected issuer in the signed record
  string expected_issuer = 2;

  // Expected signer in the signed record
  string expected_signer = 3;
}

message VerifyWithKeyRequest {
  // Signed record data
  core.v1alpha2.Record record = 1;

  // Public key to validate the signed Recordx
  bytes public_key = 2;
}
