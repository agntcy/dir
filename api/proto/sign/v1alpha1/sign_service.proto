// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package sign.v1alpha1;

import "core/v1alpha1/agent.proto";
import "google/protobuf/empty.proto";

service SignService {
  // Sign agents using keyless OIDC based provider
  rpc SignOIDC(SignOIDCRequest) returns (SignOIDCResponse);
  // Sign agents using PEM-encoded private key encrypted with an optional passphrase
  rpc SignWithKey(SignWithKeyRequest) returns (SignWithKeyResponse);

  // Verify signed agents using keyless OIDC based provider
  rpc VerifyOIDC(VerifyOIDCRequest) returns (google.protobuf.Empty);

  // Verify signed agents using PEM-encoded formatted PEM public key encrypted
  rpc VerifyWithKey(VerifyWithKeyRequest) returns (google.protobuf.Empty);
}

message SignOIDCRequest {
  // List of sign options for OIDC
  message SignOpts {
    // Fulcio authority access URL (default value: https://fulcio.sigstage.dev)
    optional string fulcio_url = 1;

    // Rekor validator access URL (default value: https://rekor.sigstage.dev)
    optional string rekor_url = 2;

    // Timestamp authority access URL (default value: https://timestamp.sigstage.dev/api/v1/timestamp)
    optional string timestamp_url = 3;

    // OIDC provider access URL (default value: https://oauth2.sigstage.dev/auth)
    optional string oidc_provider_url = 4;
  }

  // Agent data for signing
  core.v1alpha1.Agent agent = 1;

  // Token for OIDC provider
  string id_token = 2;

  // Signing options for OIDC
  SignOpts options = 3;
}

message SignWithKeyRequest {
  // Agent data for signing
  core.v1alpha1.Agent agent = 1;

  // Private key used for signing
  bytes private_key = 2;

  // Password to unlock the private key
  optional bytes password = 3;
}

message SignOIDCResponse {
  // Signed agent data
  core.v1alpha1.Agent agent = 1;
}

message SignWithKeyResponse {
  // Signed agent data
  core.v1alpha1.Agent agent = 1;
}

message VerifyOIDCRequest {
  // Signed agent data
  core.v1alpha1.Agent agent = 1;

  // Expected issuer in the signed agent
  string expected_issuer = 2;

  // Expected signer in the signed agent
  string expected_signer = 3;
}

message VerifyWithKeyRequest {
  // Signed agent data
  core.v1alpha1.Agent agent = 1;

  // Public key to validate the signed agent
  bytes public_key = 2;
}
