// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: routing/v1alpha2/record_query.proto

package routingv1alpha2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a list of supported record query types.
type RecordQueryType int32

const (
	// Unspecified query type.
	RecordQueryType_RECORD_QUERY_TYPE_UNSPECIFIED RecordQueryType = 0
	// Query for a skill name.
	RecordQueryType_RECORD_QUERY_TYPE_SKILL RecordQueryType = 1
	// Query for a locator type.
	RecordQueryType_RECORD_QUERY_TYPE_LOCATOR RecordQueryType = 2
)

// Enum value maps for RecordQueryType.
var (
	RecordQueryType_name = map[int32]string{
		0: "RECORD_QUERY_TYPE_UNSPECIFIED",
		1: "RECORD_QUERY_TYPE_SKILL",
		2: "RECORD_QUERY_TYPE_LOCATOR",
	}
	RecordQueryType_value = map[string]int32{
		"RECORD_QUERY_TYPE_UNSPECIFIED": 0,
		"RECORD_QUERY_TYPE_SKILL":       1,
		"RECORD_QUERY_TYPE_LOCATOR":     2,
	}
)

func (x RecordQueryType) Enum() *RecordQueryType {
	p := new(RecordQueryType)
	*p = x
	return p
}

func (x RecordQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_routing_v1alpha2_record_query_proto_enumTypes[0].Descriptor()
}

func (RecordQueryType) Type() protoreflect.EnumType {
	return &file_routing_v1alpha2_record_query_proto_enumTypes[0]
}

func (x RecordQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordQueryType.Descriptor instead.
func (RecordQueryType) EnumDescriptor() ([]byte, []int) {
	return file_routing_v1alpha2_record_query_proto_rawDescGZIP(), []int{0}
}

// A query to match the record against during discovery.
// For example:
//
//	{ type: RECORD_QUERY_TYPE_SKILL, value: "Natural Language Processing" }
//	{ type: RECORD_QUERY_TYPE_LOCATOR, value: "helm-chart" }
type RecordQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the query to match against.
	Type RecordQueryType `protobuf:"varint,1,opt,name=type,proto3,enum=routing.v1alpha2.RecordQueryType" json:"type,omitempty"`
	// The query value to match against.
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordQuery) Reset() {
	*x = RecordQuery{}
	mi := &file_routing_v1alpha2_record_query_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordQuery) ProtoMessage() {}

func (x *RecordQuery) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1alpha2_record_query_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordQuery.ProtoReflect.Descriptor instead.
func (*RecordQuery) Descriptor() ([]byte, []int) {
	return file_routing_v1alpha2_record_query_proto_rawDescGZIP(), []int{0}
}

func (x *RecordQuery) GetType() RecordQueryType {
	if x != nil {
		return x.Type
	}
	return RecordQueryType_RECORD_QUERY_TYPE_UNSPECIFIED
}

func (x *RecordQuery) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_routing_v1alpha2_record_query_proto protoreflect.FileDescriptor

var file_routing_v1alpha2_record_query_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x22, 0x5a, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2a, 0x70, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x02, 0x42, 0xdb, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x10,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x50, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x6f, 0x61, 0x73, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x3b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xca, 0x02, 0x10,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0xe2, 0x02, 0x1c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_routing_v1alpha2_record_query_proto_rawDescOnce sync.Once
	file_routing_v1alpha2_record_query_proto_rawDescData []byte
)

func file_routing_v1alpha2_record_query_proto_rawDescGZIP() []byte {
	file_routing_v1alpha2_record_query_proto_rawDescOnce.Do(func() {
		file_routing_v1alpha2_record_query_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_routing_v1alpha2_record_query_proto_rawDesc), len(file_routing_v1alpha2_record_query_proto_rawDesc)))
	})
	return file_routing_v1alpha2_record_query_proto_rawDescData
}

var file_routing_v1alpha2_record_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_routing_v1alpha2_record_query_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_routing_v1alpha2_record_query_proto_goTypes = []any{
	(RecordQueryType)(0), // 0: routing.v1alpha2.RecordQueryType
	(*RecordQuery)(nil),  // 1: routing.v1alpha2.RecordQuery
}
var file_routing_v1alpha2_record_query_proto_depIdxs = []int32{
	0, // 0: routing.v1alpha2.RecordQuery.type:type_name -> routing.v1alpha2.RecordQueryType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_routing_v1alpha2_record_query_proto_init() }
func file_routing_v1alpha2_record_query_proto_init() {
	if File_routing_v1alpha2_record_query_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_routing_v1alpha2_record_query_proto_rawDesc), len(file_routing_v1alpha2_record_query_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_routing_v1alpha2_record_query_proto_goTypes,
		DependencyIndexes: file_routing_v1alpha2_record_query_proto_depIdxs,
		EnumInfos:         file_routing_v1alpha2_record_query_proto_enumTypes,
		MessageInfos:      file_routing_v1alpha2_record_query_proto_msgTypes,
	}.Build()
	File_routing_v1alpha2_record_query_proto = out.File
	file_routing_v1alpha2_record_query_proto_goTypes = nil
	file_routing_v1alpha2_record_query_proto_depIdxs = nil
}
