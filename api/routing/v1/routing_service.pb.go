// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: routing/v1/routing_service.proto

package routingv1

import (
	v1 "github.com/agntcy/dir/api/core/v1"
	v11 "github.com/agntcy/dir/api/search/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PublishRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*PublishRequest_RecordRefs
	//	*PublishRequest_Queries
	Request       isPublishRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{0}
}

func (x *PublishRequest) GetRequest() isPublishRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PublishRequest) GetRecordRefs() *RecordRefs {
	if x != nil {
		if x, ok := x.Request.(*PublishRequest_RecordRefs); ok {
			return x.RecordRefs
		}
	}
	return nil
}

func (x *PublishRequest) GetQueries() *RecordQueries {
	if x != nil {
		if x, ok := x.Request.(*PublishRequest_Queries); ok {
			return x.Queries
		}
	}
	return nil
}

type isPublishRequest_Request interface {
	isPublishRequest_Request()
}

type PublishRequest_RecordRefs struct {
	// References to the records to be published.
	RecordRefs *RecordRefs `protobuf:"bytes,1,opt,name=record_refs,json=recordRefs,proto3,oneof"`
}

type PublishRequest_Queries struct {
	// Queries to match against the records to be published.
	Queries *RecordQueries `protobuf:"bytes,2,opt,name=queries,proto3,oneof"`
}

func (*PublishRequest_RecordRefs) isPublishRequest_Request() {}

func (*PublishRequest_Queries) isPublishRequest_Request() {}

type UnpublishRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*UnpublishRequest_RecordRefs
	//	*UnpublishRequest_Queries
	Request       isUnpublishRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpublishRequest) Reset() {
	*x = UnpublishRequest{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpublishRequest) ProtoMessage() {}

func (x *UnpublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpublishRequest.ProtoReflect.Descriptor instead.
func (*UnpublishRequest) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{1}
}

func (x *UnpublishRequest) GetRequest() isUnpublishRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *UnpublishRequest) GetRecordRefs() *RecordRefs {
	if x != nil {
		if x, ok := x.Request.(*UnpublishRequest_RecordRefs); ok {
			return x.RecordRefs
		}
	}
	return nil
}

func (x *UnpublishRequest) GetQueries() *RecordQueries {
	if x != nil {
		if x, ok := x.Request.(*UnpublishRequest_Queries); ok {
			return x.Queries
		}
	}
	return nil
}

type isUnpublishRequest_Request interface {
	isUnpublishRequest_Request()
}

type UnpublishRequest_RecordRefs struct {
	// References to the records to be unpublished.
	RecordRefs *RecordRefs `protobuf:"bytes,1,opt,name=record_refs,json=recordRefs,proto3,oneof"`
}

type UnpublishRequest_Queries struct {
	// Queries to match against the records to be unpublished.
	Queries *RecordQueries `protobuf:"bytes,2,opt,name=queries,proto3,oneof"`
}

func (*UnpublishRequest_RecordRefs) isUnpublishRequest_Request() {}

func (*UnpublishRequest_Queries) isUnpublishRequest_Request() {}

type RecordRefs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Refs          []*v1.RecordRef        `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordRefs) Reset() {
	*x = RecordRefs{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRefs) ProtoMessage() {}

func (x *RecordRefs) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRefs.ProtoReflect.Descriptor instead.
func (*RecordRefs) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{2}
}

func (x *RecordRefs) GetRefs() []*v1.RecordRef {
	if x != nil {
		return x.Refs
	}
	return nil
}

type RecordQueries struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*v11.RecordQuery     `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordQueries) Reset() {
	*x = RecordQueries{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordQueries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordQueries) ProtoMessage() {}

func (x *RecordQueries) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordQueries.ProtoReflect.Descriptor instead.
func (*RecordQueries) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{3}
}

func (x *RecordQueries) GetQueries() []*v11.RecordQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

type SearchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of queries to match against the records.
	Queries []*RecordQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// Minimal target query match score.
	// For example, if min_match_score=2, it will return records that match
	// at least two of the queries.
	// If not set, it will return records that match at least one query.
	MinMatchScore *uint32 `protobuf:"varint,2,opt,name=min_match_score,json=minMatchScore,proto3,oneof" json:"min_match_score,omitempty"`
	// Limit the number of results returned.
	// If not set, it will return all discovered records.
	// Note that this is a soft limit, as the search may return more results
	// than the limit if there are multiple peers providing the same record.
	Limit         *uint32 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{4}
}

func (x *SearchRequest) GetQueries() []*RecordQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *SearchRequest) GetMinMatchScore() uint32 {
	if x != nil && x.MinMatchScore != nil {
		return *x.MinMatchScore
	}
	return 0
}

func (x *SearchRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type SearchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The record that matches the search query.
	RecordRef *v1.RecordRef `protobuf:"bytes,1,opt,name=record_ref,json=recordRef,proto3" json:"record_ref,omitempty"`
	// The peer that provided the record.
	Peer *Peer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	// The queries that were matched.
	MatchQueries []*RecordQuery `protobuf:"bytes,3,rep,name=match_queries,json=matchQueries,proto3" json:"match_queries,omitempty"`
	// The score of the search match.
	MatchScore    uint32 `protobuf:"varint,4,opt,name=match_score,json=matchScore,proto3" json:"match_score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{5}
}

func (x *SearchResponse) GetRecordRef() *v1.RecordRef {
	if x != nil {
		return x.RecordRef
	}
	return nil
}

func (x *SearchResponse) GetPeer() *Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *SearchResponse) GetMatchQueries() []*RecordQuery {
	if x != nil {
		return x.MatchQueries
	}
	return nil
}

func (x *SearchResponse) GetMatchScore() uint32 {
	if x != nil {
		return x.MatchScore
	}
	return 0
}

type ListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of queries to match against the records.
	// If set, all queries must match for the record to be returned.
	Queries []*RecordQuery `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// Limit the number of results returned.
	// If not set, it will return all records that this peer is providing.
	Limit         *uint32 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListRequest) GetQueries() []*RecordQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ListRequest) GetLimit() uint32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The record that matches the list queries.
	RecordRef *v1.RecordRef `protobuf:"bytes,1,opt,name=record_ref,json=recordRef,proto3" json:"record_ref,omitempty"`
	// Labels associated with this record (skills, domains, features)
	// Derived from the record content for CLI display purposes
	Labels        []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	mi := &file_routing_v1_routing_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routing_v1_routing_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_routing_v1_routing_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListResponse) GetRecordRef() *v1.RecordRef {
	if x != nil {
		return x.RecordRef
	}
	return nil
}

func (x *ListResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_routing_v1_routing_service_proto protoreflect.FileDescriptor

var file_routing_v1_routing_service_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x14,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x66, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x66, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x66, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x66, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x41, 0x0a,
	0x0d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x22, 0xa8, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x66, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x65, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x66, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x32, 0x92, 0x02, 0x0a, 0x0e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x55, 0x6e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x9e, 0x01,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x42, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x64, 0x69, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x0a,
	0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0a, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_routing_v1_routing_service_proto_rawDescOnce sync.Once
	file_routing_v1_routing_service_proto_rawDescData []byte
)

func file_routing_v1_routing_service_proto_rawDescGZIP() []byte {
	file_routing_v1_routing_service_proto_rawDescOnce.Do(func() {
		file_routing_v1_routing_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_routing_v1_routing_service_proto_rawDesc), len(file_routing_v1_routing_service_proto_rawDesc)))
	})
	return file_routing_v1_routing_service_proto_rawDescData
}

var file_routing_v1_routing_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_routing_v1_routing_service_proto_goTypes = []any{
	(*PublishRequest)(nil),   // 0: routing.v1.PublishRequest
	(*UnpublishRequest)(nil), // 1: routing.v1.UnpublishRequest
	(*RecordRefs)(nil),       // 2: routing.v1.RecordRefs
	(*RecordQueries)(nil),    // 3: routing.v1.RecordQueries
	(*SearchRequest)(nil),    // 4: routing.v1.SearchRequest
	(*SearchResponse)(nil),   // 5: routing.v1.SearchResponse
	(*ListRequest)(nil),      // 6: routing.v1.ListRequest
	(*ListResponse)(nil),     // 7: routing.v1.ListResponse
	(*v1.RecordRef)(nil),     // 8: core.v1.RecordRef
	(*v11.RecordQuery)(nil),  // 9: search.v1.RecordQuery
	(*RecordQuery)(nil),      // 10: routing.v1.RecordQuery
	(*Peer)(nil),             // 11: routing.v1.Peer
	(*emptypb.Empty)(nil),    // 12: google.protobuf.Empty
}
var file_routing_v1_routing_service_proto_depIdxs = []int32{
	2,  // 0: routing.v1.PublishRequest.record_refs:type_name -> routing.v1.RecordRefs
	3,  // 1: routing.v1.PublishRequest.queries:type_name -> routing.v1.RecordQueries
	2,  // 2: routing.v1.UnpublishRequest.record_refs:type_name -> routing.v1.RecordRefs
	3,  // 3: routing.v1.UnpublishRequest.queries:type_name -> routing.v1.RecordQueries
	8,  // 4: routing.v1.RecordRefs.refs:type_name -> core.v1.RecordRef
	9,  // 5: routing.v1.RecordQueries.queries:type_name -> search.v1.RecordQuery
	10, // 6: routing.v1.SearchRequest.queries:type_name -> routing.v1.RecordQuery
	8,  // 7: routing.v1.SearchResponse.record_ref:type_name -> core.v1.RecordRef
	11, // 8: routing.v1.SearchResponse.peer:type_name -> routing.v1.Peer
	10, // 9: routing.v1.SearchResponse.match_queries:type_name -> routing.v1.RecordQuery
	10, // 10: routing.v1.ListRequest.queries:type_name -> routing.v1.RecordQuery
	8,  // 11: routing.v1.ListResponse.record_ref:type_name -> core.v1.RecordRef
	0,  // 12: routing.v1.RoutingService.Publish:input_type -> routing.v1.PublishRequest
	1,  // 13: routing.v1.RoutingService.Unpublish:input_type -> routing.v1.UnpublishRequest
	4,  // 14: routing.v1.RoutingService.Search:input_type -> routing.v1.SearchRequest
	6,  // 15: routing.v1.RoutingService.List:input_type -> routing.v1.ListRequest
	12, // 16: routing.v1.RoutingService.Publish:output_type -> google.protobuf.Empty
	12, // 17: routing.v1.RoutingService.Unpublish:output_type -> google.protobuf.Empty
	5,  // 18: routing.v1.RoutingService.Search:output_type -> routing.v1.SearchResponse
	7,  // 19: routing.v1.RoutingService.List:output_type -> routing.v1.ListResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_routing_v1_routing_service_proto_init() }
func file_routing_v1_routing_service_proto_init() {
	if File_routing_v1_routing_service_proto != nil {
		return
	}
	file_routing_v1_peer_proto_init()
	file_routing_v1_record_query_proto_init()
	file_routing_v1_routing_service_proto_msgTypes[0].OneofWrappers = []any{
		(*PublishRequest_RecordRefs)(nil),
		(*PublishRequest_Queries)(nil),
	}
	file_routing_v1_routing_service_proto_msgTypes[1].OneofWrappers = []any{
		(*UnpublishRequest_RecordRefs)(nil),
		(*UnpublishRequest_Queries)(nil),
	}
	file_routing_v1_routing_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_routing_v1_routing_service_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_routing_v1_routing_service_proto_rawDesc), len(file_routing_v1_routing_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_routing_v1_routing_service_proto_goTypes,
		DependencyIndexes: file_routing_v1_routing_service_proto_depIdxs,
		MessageInfos:      file_routing_v1_routing_service_proto_msgTypes,
	}.Build()
	File_routing_v1_routing_service_proto = out.File
	file_routing_v1_routing_service_proto_goTypes = nil
	file_routing_v1_routing_service_proto_depIdxs = nil
}
