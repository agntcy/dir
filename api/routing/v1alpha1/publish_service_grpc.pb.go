// SPDX-FileCopyrightText: Copyright (c) 2025 Cisco and/or its affiliates.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: routing/v1alpha1/publish_service.proto

package routingv1alpha1

import (
	context "context"
	v1alpha1 "github.com/agntcy/dir/api/core/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PublishService_Publish_FullMethodName   = "/routing.v1alpha1.PublishService/Publish"
	PublishService_Unpublish_FullMethodName = "/routing.v1alpha1.PublishService/Unpublish"
	PublishService_Resolve_FullMethodName   = "/routing.v1alpha1.PublishService/Resolve"
)

// PublishServiceClient is the client API for PublishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Defines an interface for publication and retrieval
// of objects across interconnected network.
//
// Required for the Announce and Discover API.
//
// This is a namespaced service: <directory>/<owner>/<repo>
type PublishServiceClient interface {
	// Create creates a new named record for an object.
	// Validation is performed based on the associated metadata of referenced object.
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete removes an existing named record of an object.
	Unpublish(ctx context.Context, in *Record, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Resolve performs lookup operation for the requested record
	// and returns associated object reference.
	Resolve(ctx context.Context, in *Record, opts ...grpc.CallOption) (*v1alpha1.ObjectRef, error)
}

type publishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublishServiceClient(cc grpc.ClientConnInterface) PublishServiceClient {
	return &publishServiceClient{cc}
}

func (c *publishServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PublishService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishServiceClient) Unpublish(ctx context.Context, in *Record, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PublishService_Unpublish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publishServiceClient) Resolve(ctx context.Context, in *Record, opts ...grpc.CallOption) (*v1alpha1.ObjectRef, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1alpha1.ObjectRef)
	err := c.cc.Invoke(ctx, PublishService_Resolve_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublishServiceServer is the server API for PublishService service.
// All implementations should embed UnimplementedPublishServiceServer
// for forward compatibility.
//
// Defines an interface for publication and retrieval
// of objects across interconnected network.
//
// Required for the Announce and Discover API.
//
// This is a namespaced service: <directory>/<owner>/<repo>
type PublishServiceServer interface {
	// Create creates a new named record for an object.
	// Validation is performed based on the associated metadata of referenced object.
	Publish(context.Context, *PublishRequest) (*emptypb.Empty, error)
	// Delete removes an existing named record of an object.
	Unpublish(context.Context, *Record) (*emptypb.Empty, error)
	// Resolve performs lookup operation for the requested record
	// and returns associated object reference.
	Resolve(context.Context, *Record) (*v1alpha1.ObjectRef, error)
}

// UnimplementedPublishServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublishServiceServer struct{}

func (UnimplementedPublishServiceServer) Publish(context.Context, *PublishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedPublishServiceServer) Unpublish(context.Context, *Record) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpublish not implemented")
}
func (UnimplementedPublishServiceServer) Resolve(context.Context, *Record) (*v1alpha1.ObjectRef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (UnimplementedPublishServiceServer) testEmbeddedByValue() {}

// UnsafePublishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublishServiceServer will
// result in compilation errors.
type UnsafePublishServiceServer interface {
	mustEmbedUnimplementedPublishServiceServer()
}

func RegisterPublishServiceServer(s grpc.ServiceRegistrar, srv PublishServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublishServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublishService_ServiceDesc, srv)
}

func _PublishService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublishService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishService_Unpublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServiceServer).Unpublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublishService_Unpublish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServiceServer).Unpublish(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublishService_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublishServiceServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublishService_Resolve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublishServiceServer).Resolve(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

// PublishService_ServiceDesc is the grpc.ServiceDesc for PublishService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublishService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routing.v1alpha1.PublishService",
	HandlerType: (*PublishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PublishService_Publish_Handler,
		},
		{
			MethodName: "Unpublish",
			Handler:    _PublishService_Unpublish_Handler,
		},
		{
			MethodName: "Resolve",
			Handler:    _PublishService_Resolve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routing/v1alpha1/publish_service.proto",
}
