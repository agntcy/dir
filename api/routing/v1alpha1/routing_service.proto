// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package routing.v1alpha1;

import "google/protobuf/empty.proto";
import "core/v1alpha1/object.proto";
import "core/v1alpha1/agent.proto";
import "routing/v1alpha1/routing.proto";

// Defines an interface for publication and retrieval
// of objects across interconnected network.
service RoutingService {
  // Notifies the network that the node is providing given object.
  // Listeners should use this event to update their routing tables.
  // They may optionally forward the request to other nodes.
  // Items need to be periodically republished to avoid stale data.
  //
  // It is the API responsibility to fully construct the routing details,
  // these are minimal details needed for us to publish the request.
  rpc Publish(PublishRequest) returns (google.protobuf.Empty);
  // List all the available items across the network.
  // TODO: maybe remove to search?
  rpc List(ListRequest) returns (stream ListResponse);
}

message PublishRequest {
  // Published record reference.
  // On publish, we read from the local store and extract the neccessary labels.
  core.v1alpha1.ObjectRef record = 1;

  // Publish locally only.
  // This item will never end up in the network,
  // unless republished with local=false.
  optional bool local = 2;
}

message ListRequest {
  // Target peer.
  optional Peer peer = 1;

  // Target labels.
  // For example, labels={"skill=text", "skill=text/rag"}
  repeated string labels = 2;

  // Target object, if any.
  optional core.v1alpha1.ObjectRef record = 3;

  // Max routing depth.
  optional uint32 max_hops = 4;

  // List only locally published data.
  optional bool local = 5;
}

message ListResponse {
  message Item {
    // Labels associated with a given object
    repeated string labels = 1;

    // Peer that returned this object.
    Peer peer = 2;

    // Found object if any.
    // If empty, then only the labels are important.
    optional core.v1alpha1.ObjectRef record = 3;
  }

  // Returned items that match a given request
  repeated Item items = 1;
}
