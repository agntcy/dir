// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: core/v1/record.proto

package corev1

import (
	v1 "github.com/agntcy/dir/api/objects/v1"
	v2 "github.com/agntcy/dir/api/objects/v2"
	v3 "github.com/agntcy/dir/api/objects/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines a reference or a globally unique content identifier of a record.
type RecordRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Globally-unique content identifier (CID) of the record.
	// Specs: https://github.com/multiformats/cid
	Cid           string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordRef) Reset() {
	*x = RecordRef{}
	mi := &file_core_v1_record_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRef) ProtoMessage() {}

func (x *RecordRef) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_record_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRef.ProtoReflect.Descriptor instead.
func (*RecordRef) Descriptor() ([]byte, []int) {
	return file_core_v1_record_proto_rawDescGZIP(), []int{0}
}

func (x *RecordRef) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

// Defines metadata about a record.
type RecordMeta struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CID of the record.
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// Annotations attached to the record.
	Annotations map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Schema version of the record.
	SchemaVersion string `protobuf:"bytes,3,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	// Creation timestamp of the record in the RFC3339 format.
	// Specs: https://www.rfc-editor.org/rfc/rfc3339.html
	CreatedAt     string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordMeta) Reset() {
	*x = RecordMeta{}
	mi := &file_core_v1_record_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMeta) ProtoMessage() {}

func (x *RecordMeta) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_record_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMeta.ProtoReflect.Descriptor instead.
func (*RecordMeta) Descriptor() ([]byte, []int) {
	return file_core_v1_record_proto_rawDescGZIP(), []int{1}
}

func (x *RecordMeta) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *RecordMeta) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *RecordMeta) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *RecordMeta) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// Record unifies different versions of records into a single message.
// It allows for backward compatibility and easier handling of different
// record versions in the same service or application.
type Record struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Data:
	//
	//	*Record_V1
	//	*Record_V2
	//	*Record_V3
	Data          isRecord_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_core_v1_record_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_record_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_core_v1_record_proto_rawDescGZIP(), []int{2}
}

func (x *Record) GetData() isRecord_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Record) GetV1() *v1.Agent {
	if x != nil {
		if x, ok := x.Data.(*Record_V1); ok {
			return x.V1
		}
	}
	return nil
}

func (x *Record) GetV2() *v2.AgentRecord {
	if x != nil {
		if x, ok := x.Data.(*Record_V2); ok {
			return x.V2
		}
	}
	return nil
}

func (x *Record) GetV3() *v3.Record {
	if x != nil {
		if x, ok := x.Data.(*Record_V3); ok {
			return x.V3
		}
	}
	return nil
}

type isRecord_Data interface {
	isRecord_Data()
}

type Record_V1 struct {
	V1 *v1.Agent `protobuf:"bytes,1,opt,name=v1,proto3,oneof"`
}

type Record_V2 struct {
	V2 *v2.AgentRecord `protobuf:"bytes,2,opt,name=v2,proto3,oneof"`
}

type Record_V3 struct {
	V3 *v3.Record `protobuf:"bytes,3,opt,name=v3,proto3,oneof"`
}

func (*Record_V1) isRecord_Data() {}

func (*Record_V2) isRecord_Data() {}

func (*Record_V3) isRecord_Data() {}

var File_core_v1_record_proto protoreflect.FileDescriptor

var file_core_v1_record_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x16, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x76, 0x32, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x76, 0x33, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x1d, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22, 0xec,
	0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x3e, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x86, 0x01,
	0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x76, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x02, 0x76, 0x31, 0x12, 0x29, 0x0a,
	0x02, 0x76, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x02, 0x76, 0x32, 0x12, 0x24, 0x0a, 0x02, 0x76, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x02, 0x76, 0x33, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x81, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x64, 0x69, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x07, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x43, 0x6f, 0x72, 0x65,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x08, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_core_v1_record_proto_rawDescOnce sync.Once
	file_core_v1_record_proto_rawDescData []byte
)

func file_core_v1_record_proto_rawDescGZIP() []byte {
	file_core_v1_record_proto_rawDescOnce.Do(func() {
		file_core_v1_record_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_v1_record_proto_rawDesc), len(file_core_v1_record_proto_rawDesc)))
	})
	return file_core_v1_record_proto_rawDescData
}

var file_core_v1_record_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_core_v1_record_proto_goTypes = []any{
	(*RecordRef)(nil),      // 0: core.v1.RecordRef
	(*RecordMeta)(nil),     // 1: core.v1.RecordMeta
	(*Record)(nil),         // 2: core.v1.Record
	nil,                    // 3: core.v1.RecordMeta.AnnotationsEntry
	(*v1.Agent)(nil),       // 4: objects.v1.Agent
	(*v2.AgentRecord)(nil), // 5: objects.v2.AgentRecord
	(*v3.Record)(nil),      // 6: objects.v3.Record
}
var file_core_v1_record_proto_depIdxs = []int32{
	3, // 0: core.v1.RecordMeta.annotations:type_name -> core.v1.RecordMeta.AnnotationsEntry
	4, // 1: core.v1.Record.v1:type_name -> objects.v1.Agent
	5, // 2: core.v1.Record.v2:type_name -> objects.v2.AgentRecord
	6, // 3: core.v1.Record.v3:type_name -> objects.v3.Record
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_core_v1_record_proto_init() }
func file_core_v1_record_proto_init() {
	if File_core_v1_record_proto != nil {
		return
	}
	file_core_v1_record_proto_msgTypes[2].OneofWrappers = []any{
		(*Record_V1)(nil),
		(*Record_V2)(nil),
		(*Record_V3)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_v1_record_proto_rawDesc), len(file_core_v1_record_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_v1_record_proto_goTypes,
		DependencyIndexes: file_core_v1_record_proto_depIdxs,
		MessageInfos:      file_core_v1_record_proto_msgTypes,
	}.Build()
	File_core_v1_record_proto = out.File
	file_core_v1_record_proto_goTypes = nil
	file_core_v1_record_proto_depIdxs = nil
}
