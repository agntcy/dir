// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: core/v1alpha1/llm.proto

package corev1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LLM information provides metadata about the LLM (Large Language Model)
type LLMInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the LLM provider (e.g., "openai", "anthropic", "google", "azure", etc.)
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// Version of the LLM model (e.g., "2024-03", "v2", etc.)
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Model name or identifier (e.g., "gpt-4-turbo", "claude-3-opus", etc.)
	ModelName string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Additional metadata associated with this LLM
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Model configuration
	Config *LLMConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Provider-specific endpoint information
	Endpoint *LLMEndpoint `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Model capabilities and constraints
	Capabilities  *LLMCapabilities `protobuf:"bytes,7,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMInfo) Reset() {
	*x = LLMInfo{}
	mi := &file_core_v1alpha1_llm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMInfo) ProtoMessage() {}

func (x *LLMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1alpha1_llm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMInfo.ProtoReflect.Descriptor instead.
func (*LLMInfo) Descriptor() ([]byte, []int) {
	return file_core_v1alpha1_llm_proto_rawDescGZIP(), []int{0}
}

func (x *LLMInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *LLMInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LLMInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *LLMInfo) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *LLMInfo) GetConfig() *LLMConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *LLMInfo) GetEndpoint() *LLMEndpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *LLMInfo) GetCapabilities() *LLMCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// Configuration for the LLM
type LLMConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Temperature controls randomness in responses (0.0 to 1.0)
	Temperature float32 `protobuf:"fixed32,1,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// Maximum number of tokens to generate
	MaxTokens int32 `protobuf:"varint,2,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	// Stop sequences that signal the end of generation
	StopSequences []string `protobuf:"bytes,3,rep,name=stop_sequences,json=stopSequences,proto3" json:"stop_sequences,omitempty"`
	// Top-p (nucleus) sampling parameter (0.0 to 1.0)
	TopP float32 `protobuf:"fixed32,4,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	// Frequency penalty for token generation (-2.0 to 2.0)
	FrequencyPenalty float32 `protobuf:"fixed32,5,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	// Presence penalty for token generation (-2.0 to 2.0)
	PresencePenalty float32 `protobuf:"fixed32,6,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	// Response format specification (e.g., "json", "text")
	ResponseFormat string `protobuf:"bytes,7,opt,name=response_format,json=responseFormat,proto3" json:"response_format,omitempty"`
	// Seed for deterministic responses
	Seed *int64 `protobuf:"varint,8,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	// Provider-specific configuration parameters
	ProviderConfig *structpb.Struct `protobuf:"bytes,9,opt,name=provider_config,json=providerConfig,proto3" json:"provider_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LLMConfig) Reset() {
	*x = LLMConfig{}
	mi := &file_core_v1alpha1_llm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMConfig) ProtoMessage() {}

func (x *LLMConfig) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1alpha1_llm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMConfig.ProtoReflect.Descriptor instead.
func (*LLMConfig) Descriptor() ([]byte, []int) {
	return file_core_v1alpha1_llm_proto_rawDescGZIP(), []int{1}
}

func (x *LLMConfig) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *LLMConfig) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *LLMConfig) GetStopSequences() []string {
	if x != nil {
		return x.StopSequences
	}
	return nil
}

func (x *LLMConfig) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *LLMConfig) GetFrequencyPenalty() float32 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *LLMConfig) GetPresencePenalty() float32 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *LLMConfig) GetResponseFormat() string {
	if x != nil {
		return x.ResponseFormat
	}
	return ""
}

func (x *LLMConfig) GetSeed() int64 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *LLMConfig) GetProviderConfig() *structpb.Struct {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

// Endpoint information for the LLM provider
type LLMEndpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Base URL for API requests
	BaseUrl string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// API version to use
	ApiVersion string `protobuf:"bytes,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Custom headers required for API requests
	Headers       map[string]string `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMEndpoint) Reset() {
	*x = LLMEndpoint{}
	mi := &file_core_v1alpha1_llm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMEndpoint) ProtoMessage() {}

func (x *LLMEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1alpha1_llm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMEndpoint.ProtoReflect.Descriptor instead.
func (*LLMEndpoint) Descriptor() ([]byte, []int) {
	return file_core_v1alpha1_llm_proto_rawDescGZIP(), []int{2}
}

func (x *LLMEndpoint) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *LLMEndpoint) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *LLMEndpoint) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Model capabilities and constraints
type LLMCapabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum context length in tokens
	MaxContextTokens int32 `protobuf:"varint,1,opt,name=max_context_tokens,json=maxContextTokens,proto3" json:"max_context_tokens,omitempty"`
	// Maximum response length in tokens
	MaxResponseTokens int32 `protobuf:"varint,2,opt,name=max_response_tokens,json=maxResponseTokens,proto3" json:"max_response_tokens,omitempty"`
	// Supported features (e.g., "streaming", "function-calling")
	Features []string `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	// Supported response formats
	SupportedFormats []string `protobuf:"bytes,4,rep,name=supported_formats,json=supportedFormats,proto3" json:"supported_formats,omitempty"`
	// Model's primary strengths/focus areas
	Specializations []string `protobuf:"bytes,5,rep,name=specializations,proto3" json:"specializations,omitempty"`
	// Cost per token (in millicents, 1/1000th of a cent)
	CostPer_1KPromptTokens     float32 `protobuf:"fixed32,6,opt,name=cost_per_1k_prompt_tokens,json=costPer1kPromptTokens,proto3" json:"cost_per_1k_prompt_tokens,omitempty"`
	CostPer_1KCompletionTokens float32 `protobuf:"fixed32,7,opt,name=cost_per_1k_completion_tokens,json=costPer1kCompletionTokens,proto3" json:"cost_per_1k_completion_tokens,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *LLMCapabilities) Reset() {
	*x = LLMCapabilities{}
	mi := &file_core_v1alpha1_llm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMCapabilities) ProtoMessage() {}

func (x *LLMCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1alpha1_llm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMCapabilities.ProtoReflect.Descriptor instead.
func (*LLMCapabilities) Descriptor() ([]byte, []int) {
	return file_core_v1alpha1_llm_proto_rawDescGZIP(), []int{3}
}

func (x *LLMCapabilities) GetMaxContextTokens() int32 {
	if x != nil {
		return x.MaxContextTokens
	}
	return 0
}

func (x *LLMCapabilities) GetMaxResponseTokens() int32 {
	if x != nil {
		return x.MaxResponseTokens
	}
	return 0
}

func (x *LLMCapabilities) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *LLMCapabilities) GetSupportedFormats() []string {
	if x != nil {
		return x.SupportedFormats
	}
	return nil
}

func (x *LLMCapabilities) GetSpecializations() []string {
	if x != nil {
		return x.Specializations
	}
	return nil
}

func (x *LLMCapabilities) GetCostPer_1KPromptTokens() float32 {
	if x != nil {
		return x.CostPer_1KPromptTokens
	}
	return 0
}

func (x *LLMCapabilities) GetCostPer_1KCompletionTokens() float32 {
	if x != nil {
		return x.CostPer_1KCompletionTokens
	}
	return 0
}

// Usage tracking and quota information
type LLMQuota struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of requests per minute allowed
	RequestsPerMinute int32 `protobuf:"varint,1,opt,name=requests_per_minute,json=requestsPerMinute,proto3" json:"requests_per_minute,omitempty"`
	// Number of tokens per minute allowed
	TokensPerMinute int32 `protobuf:"varint,2,opt,name=tokens_per_minute,json=tokensPerMinute,proto3" json:"tokens_per_minute,omitempty"`
	// Maximum concurrent requests allowed
	MaxConcurrentRequests int32 `protobuf:"varint,3,opt,name=max_concurrent_requests,json=maxConcurrentRequests,proto3" json:"max_concurrent_requests,omitempty"`
	// Quota reset period in seconds
	QuotaResetPeriod int32 `protobuf:"varint,4,opt,name=quota_reset_period,json=quotaResetPeriod,proto3" json:"quota_reset_period,omitempty"`
	// Whether to enable quota tracking
	EnableQuotaTracking bool `protobuf:"varint,5,opt,name=enable_quota_tracking,json=enableQuotaTracking,proto3" json:"enable_quota_tracking,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LLMQuota) Reset() {
	*x = LLMQuota{}
	mi := &file_core_v1alpha1_llm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMQuota) ProtoMessage() {}

func (x *LLMQuota) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1alpha1_llm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMQuota.ProtoReflect.Descriptor instead.
func (*LLMQuota) Descriptor() ([]byte, []int) {
	return file_core_v1alpha1_llm_proto_rawDescGZIP(), []int{4}
}

func (x *LLMQuota) GetRequestsPerMinute() int32 {
	if x != nil {
		return x.RequestsPerMinute
	}
	return 0
}

func (x *LLMQuota) GetTokensPerMinute() int32 {
	if x != nil {
		return x.TokensPerMinute
	}
	return 0
}

func (x *LLMQuota) GetMaxConcurrentRequests() int32 {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return 0
}

func (x *LLMQuota) GetQuotaResetPeriod() int32 {
	if x != nil {
		return x.QuotaResetPeriod
	}
	return 0
}

func (x *LLMQuota) GetEnableQuotaTracking() bool {
	if x != nil {
		return x.EnableQuotaTracking
	}
	return false
}

var File_core_v1alpha1_llm_proto protoreflect.FileDescriptor

var file_core_v1alpha1_llm_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x6c, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0a, 0x07, 0x4c, 0x4c, 0x4d, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x4c, 0x4d,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xed, 0x02, 0x0a, 0x09, 0x4c, 0x4c, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x2b, 0x0a, 0x11, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61,
	0x6c, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64,
	0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x4c, 0x4c, 0x4d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x4c,
	0x4d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xde, 0x02, 0x0a, 0x0f,
	0x4c, 0x4c, 0x4d, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x19, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x31, 0x6b, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x31, 0x6b, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x6f,
	0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x31, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x65, 0x72, 0x31, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x80, 0x02, 0x0a,
	0x08, 0x4c, 0x4c, 0x4d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x42,
	0xa8, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x08, 0x4c, 0x6c, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67,
	0x6e, 0x74, 0x63, 0x79, 0x2f, 0x64, 0x69, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0d,
	0x43, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x0d,
	0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x19,
	0x43, 0x6f, 0x72, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x43, 0x6f, 0x72, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_core_v1alpha1_llm_proto_rawDescOnce sync.Once
	file_core_v1alpha1_llm_proto_rawDescData []byte
)

func file_core_v1alpha1_llm_proto_rawDescGZIP() []byte {
	file_core_v1alpha1_llm_proto_rawDescOnce.Do(func() {
		file_core_v1alpha1_llm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_core_v1alpha1_llm_proto_rawDesc), len(file_core_v1alpha1_llm_proto_rawDesc)))
	})
	return file_core_v1alpha1_llm_proto_rawDescData
}

var file_core_v1alpha1_llm_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_core_v1alpha1_llm_proto_goTypes = []any{
	(*LLMInfo)(nil),         // 0: core.v1alpha1.LLMInfo
	(*LLMConfig)(nil),       // 1: core.v1alpha1.LLMConfig
	(*LLMEndpoint)(nil),     // 2: core.v1alpha1.LLMEndpoint
	(*LLMCapabilities)(nil), // 3: core.v1alpha1.LLMCapabilities
	(*LLMQuota)(nil),        // 4: core.v1alpha1.LLMQuota
	nil,                     // 5: core.v1alpha1.LLMInfo.AnnotationsEntry
	nil,                     // 6: core.v1alpha1.LLMEndpoint.HeadersEntry
	(*structpb.Struct)(nil), // 7: google.protobuf.Struct
}
var file_core_v1alpha1_llm_proto_depIdxs = []int32{
	5, // 0: core.v1alpha1.LLMInfo.annotations:type_name -> core.v1alpha1.LLMInfo.AnnotationsEntry
	1, // 1: core.v1alpha1.LLMInfo.config:type_name -> core.v1alpha1.LLMConfig
	2, // 2: core.v1alpha1.LLMInfo.endpoint:type_name -> core.v1alpha1.LLMEndpoint
	3, // 3: core.v1alpha1.LLMInfo.capabilities:type_name -> core.v1alpha1.LLMCapabilities
	7, // 4: core.v1alpha1.LLMConfig.provider_config:type_name -> google.protobuf.Struct
	6, // 5: core.v1alpha1.LLMEndpoint.headers:type_name -> core.v1alpha1.LLMEndpoint.HeadersEntry
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_core_v1alpha1_llm_proto_init() }
func file_core_v1alpha1_llm_proto_init() {
	if File_core_v1alpha1_llm_proto != nil {
		return
	}
	file_core_v1alpha1_llm_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_core_v1alpha1_llm_proto_rawDesc), len(file_core_v1alpha1_llm_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_v1alpha1_llm_proto_goTypes,
		DependencyIndexes: file_core_v1alpha1_llm_proto_depIdxs,
		MessageInfos:      file_core_v1alpha1_llm_proto_msgTypes,
	}.Build()
	File_core_v1alpha1_llm_proto = out.File
	file_core_v1alpha1_llm_proto_goTypes = nil
	file_core_v1alpha1_llm_proto_depIdxs = nil
}
