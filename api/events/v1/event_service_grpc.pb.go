// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: agntcy/dir/events/v1/event_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	EventService_Listen_FullMethodName = "/agntcy.dir.events.v1.EventService/Listen"
)

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// EventService provides real-time event streaming for all system operations.
// Events are delivered from subscription time forward with no history or replay.
// This service enables external applications to react to system changes in real-time.
type EventServiceClient interface {
	// Listen establishes a streaming connection to receive events.
	// Events are only delivered while the stream is active.
	// On disconnect, missed events are not recoverable.
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (EventService_ListenClient, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (EventService_ListenClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventService_ServiceDesc.Streams[0], EventService_Listen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceListenClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type eventServiceListenClient struct {
	grpc.ClientStream
}

func (x *eventServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations should embed UnimplementedEventServiceServer
// for forward compatibility.
//
// EventService provides real-time event streaming for all system operations.
// Events are delivered from subscription time forward with no history or replay.
// This service enables external applications to react to system changes in real-time.
type EventServiceServer interface {
	// Listen establishes a streaming connection to receive events.
	// Events are only delivered while the stream is active.
	// On disconnect, missed events are not recoverable.
	Listen(*ListenRequest, EventService_ListenServer) error
}

// UnimplementedEventServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventServiceServer struct{}

func (UnimplementedEventServiceServer) Listen(*ListenRequest, EventService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedEventServiceServer) testEmbeddedByValue() {}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventServiceServer).Listen(m, &eventServiceListenServer{ServerStream: stream})
}

type EventService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type eventServiceListenServer struct {
	grpc.ServerStream
}

func (x *eventServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agntcy.dir.events.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _EventService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agntcy/dir/events/v1/event_service.proto",
}
