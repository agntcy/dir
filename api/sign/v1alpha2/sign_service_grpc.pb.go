// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: sign/v1alpha2/sign_service.proto

package signv1alpha2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SignService_SignOIDC_FullMethodName      = "/sign.v1alpha2.SignService/SignOIDC"
	SignService_SignWithKey_FullMethodName   = "/sign.v1alpha2.SignService/SignWithKey"
	SignService_VerifyOIDC_FullMethodName    = "/sign.v1alpha2.SignService/VerifyOIDC"
	SignService_VerifyWithKey_FullMethodName = "/sign.v1alpha2.SignService/VerifyWithKey"
)

// SignServiceClient is the client API for SignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignServiceClient interface {
	// Sign record using keyless OIDC based provider
	SignOIDC(ctx context.Context, in *SignOIDCRequest, opts ...grpc.CallOption) (*SignOIDCResponse, error)
	// Sign record using PEM-encoded private key encrypted with an optional passphrase
	SignWithKey(ctx context.Context, in *SignWithKeyRequest, opts ...grpc.CallOption) (*SignWithKeyResponse, error)
	// Verify record agents using keyless OIDC based provider
	VerifyOIDC(ctx context.Context, in *VerifyOIDCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Verify record agents using PEM-encoded formatted PEM public key encrypted
	VerifyWithKey(ctx context.Context, in *VerifyWithKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type signServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignServiceClient(cc grpc.ClientConnInterface) SignServiceClient {
	return &signServiceClient{cc}
}

func (c *signServiceClient) SignOIDC(ctx context.Context, in *SignOIDCRequest, opts ...grpc.CallOption) (*SignOIDCResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignOIDCResponse)
	err := c.cc.Invoke(ctx, SignService_SignOIDC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) SignWithKey(ctx context.Context, in *SignWithKeyRequest, opts ...grpc.CallOption) (*SignWithKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignWithKeyResponse)
	err := c.cc.Invoke(ctx, SignService_SignWithKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) VerifyOIDC(ctx context.Context, in *VerifyOIDCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SignService_VerifyOIDC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signServiceClient) VerifyWithKey(ctx context.Context, in *VerifyWithKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SignService_VerifyWithKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignServiceServer is the server API for SignService service.
// All implementations should embed UnimplementedSignServiceServer
// for forward compatibility.
type SignServiceServer interface {
	// Sign record using keyless OIDC based provider
	SignOIDC(context.Context, *SignOIDCRequest) (*SignOIDCResponse, error)
	// Sign record using PEM-encoded private key encrypted with an optional passphrase
	SignWithKey(context.Context, *SignWithKeyRequest) (*SignWithKeyResponse, error)
	// Verify record agents using keyless OIDC based provider
	VerifyOIDC(context.Context, *VerifyOIDCRequest) (*emptypb.Empty, error)
	// Verify record agents using PEM-encoded formatted PEM public key encrypted
	VerifyWithKey(context.Context, *VerifyWithKeyRequest) (*emptypb.Empty, error)
}

// UnimplementedSignServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSignServiceServer struct{}

func (UnimplementedSignServiceServer) SignOIDC(context.Context, *SignOIDCRequest) (*SignOIDCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignOIDC not implemented")
}
func (UnimplementedSignServiceServer) SignWithKey(context.Context, *SignWithKeyRequest) (*SignWithKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignWithKey not implemented")
}
func (UnimplementedSignServiceServer) VerifyOIDC(context.Context, *VerifyOIDCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOIDC not implemented")
}
func (UnimplementedSignServiceServer) VerifyWithKey(context.Context, *VerifyWithKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWithKey not implemented")
}
func (UnimplementedSignServiceServer) testEmbeddedByValue() {}

// UnsafeSignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignServiceServer will
// result in compilation errors.
type UnsafeSignServiceServer interface {
	mustEmbedUnimplementedSignServiceServer()
}

func RegisterSignServiceServer(s grpc.ServiceRegistrar, srv SignServiceServer) {
	// If the following call pancis, it indicates UnimplementedSignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SignService_ServiceDesc, srv)
}

func _SignService_SignOIDC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOIDCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).SignOIDC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_SignOIDC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).SignOIDC(ctx, req.(*SignOIDCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_SignWithKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignWithKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).SignWithKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_SignWithKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).SignWithKey(ctx, req.(*SignWithKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_VerifyOIDC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyOIDCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).VerifyOIDC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_VerifyOIDC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).VerifyOIDC(ctx, req.(*VerifyOIDCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignService_VerifyWithKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyWithKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignServiceServer).VerifyWithKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignService_VerifyWithKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignServiceServer).VerifyWithKey(ctx, req.(*VerifyWithKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignService_ServiceDesc is the grpc.ServiceDesc for SignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sign.v1alpha2.SignService",
	HandlerType: (*SignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignOIDC",
			Handler:    _SignService_SignOIDC_Handler,
		},
		{
			MethodName: "SignWithKey",
			Handler:    _SignService_SignWithKey_Handler,
		},
		{
			MethodName: "VerifyOIDC",
			Handler:    _SignService_VerifyOIDC_Handler,
		},
		{
			MethodName: "VerifyWithKey",
			Handler:    _SignService_VerifyWithKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sign/v1alpha2/sign_service.proto",
}
