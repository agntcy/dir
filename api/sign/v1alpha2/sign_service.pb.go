// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: sign/v1alpha2/sign_service.proto

package signv1alpha2

import (
	v1alpha2 "github.com/agntcy/dir/api/core/v1alpha2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignOIDCRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Record data for signing
	Record *v1alpha2.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// Token for OIDC provider
	IdToken string `protobuf:"bytes,2,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`
	// Signing options for OIDC
	Options       *SignOIDCRequest_SignOpts `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignOIDCRequest) Reset() {
	*x = SignOIDCRequest{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignOIDCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOIDCRequest) ProtoMessage() {}

func (x *SignOIDCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOIDCRequest.ProtoReflect.Descriptor instead.
func (*SignOIDCRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{0}
}

func (x *SignOIDCRequest) GetRecord() *v1alpha2.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *SignOIDCRequest) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

func (x *SignOIDCRequest) GetOptions() *SignOIDCRequest_SignOpts {
	if x != nil {
		return x.Options
	}
	return nil
}

type SignWithKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Record data for signing
	Record *v1alpha2.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// Private key used for signing
	PrivateKey []byte `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// Password to unlock the private key
	Password      []byte `protobuf:"bytes,3,opt,name=password,proto3,oneof" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignWithKeyRequest) Reset() {
	*x = SignWithKeyRequest{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignWithKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignWithKeyRequest) ProtoMessage() {}

func (x *SignWithKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignWithKeyRequest.ProtoReflect.Descriptor instead.
func (*SignWithKeyRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{1}
}

func (x *SignWithKeyRequest) GetRecord() *v1alpha2.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *SignWithKeyRequest) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SignWithKeyRequest) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

type SignOIDCResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed record data
	Record        *v1alpha2.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignOIDCResponse) Reset() {
	*x = SignOIDCResponse{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignOIDCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOIDCResponse) ProtoMessage() {}

func (x *SignOIDCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOIDCResponse.ProtoReflect.Descriptor instead.
func (*SignOIDCResponse) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{2}
}

func (x *SignOIDCResponse) GetRecord() *v1alpha2.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type SignWithKeyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed record data
	Record        *v1alpha2.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignWithKeyResponse) Reset() {
	*x = SignWithKeyResponse{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignWithKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignWithKeyResponse) ProtoMessage() {}

func (x *SignWithKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignWithKeyResponse.ProtoReflect.Descriptor instead.
func (*SignWithKeyResponse) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{3}
}

func (x *SignWithKeyResponse) GetRecord() *v1alpha2.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

type VerifyOIDCRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed record data
	Record *v1alpha2.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// Expected issuer in the signed record
	ExpectedIssuer string `protobuf:"bytes,2,opt,name=expected_issuer,json=expectedIssuer,proto3" json:"expected_issuer,omitempty"`
	// Expected signer in the signed record
	ExpectedSigner string `protobuf:"bytes,3,opt,name=expected_signer,json=expectedSigner,proto3" json:"expected_signer,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VerifyOIDCRequest) Reset() {
	*x = VerifyOIDCRequest{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyOIDCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOIDCRequest) ProtoMessage() {}

func (x *VerifyOIDCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOIDCRequest.ProtoReflect.Descriptor instead.
func (*VerifyOIDCRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyOIDCRequest) GetRecord() *v1alpha2.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *VerifyOIDCRequest) GetExpectedIssuer() string {
	if x != nil {
		return x.ExpectedIssuer
	}
	return ""
}

func (x *VerifyOIDCRequest) GetExpectedSigner() string {
	if x != nil {
		return x.ExpectedSigner
	}
	return ""
}

type VerifyWithKeyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signed record data
	Record *v1alpha2.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	// Public key to validate the signed Recordx
	PublicKey     []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyWithKeyRequest) Reset() {
	*x = VerifyWithKeyRequest{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyWithKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyWithKeyRequest) ProtoMessage() {}

func (x *VerifyWithKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyWithKeyRequest.ProtoReflect.Descriptor instead.
func (*VerifyWithKeyRequest) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyWithKeyRequest) GetRecord() *v1alpha2.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *VerifyWithKeyRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// List of sign options for OIDC
type SignOIDCRequest_SignOpts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fulcio authority access URL (default value: https://fulcio.sigstage.dev)
	FulcioUrl *string `protobuf:"bytes,1,opt,name=fulcio_url,json=fulcioUrl,proto3,oneof" json:"fulcio_url,omitempty"`
	// Rekor validator access URL (default value: https://rekor.sigstage.dev)
	RekorUrl *string `protobuf:"bytes,2,opt,name=rekor_url,json=rekorUrl,proto3,oneof" json:"rekor_url,omitempty"`
	// Timestamp authority access URL (default value: https://timestamp.sigstage.dev/api/v1/timestamp)
	TimestampUrl *string `protobuf:"bytes,3,opt,name=timestamp_url,json=timestampUrl,proto3,oneof" json:"timestamp_url,omitempty"`
	// OIDC provider access URL (default value: https://oauth2.sigstage.dev/auth)
	OidcProviderUrl *string `protobuf:"bytes,4,opt,name=oidc_provider_url,json=oidcProviderUrl,proto3,oneof" json:"oidc_provider_url,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SignOIDCRequest_SignOpts) Reset() {
	*x = SignOIDCRequest_SignOpts{}
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignOIDCRequest_SignOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOIDCRequest_SignOpts) ProtoMessage() {}

func (x *SignOIDCRequest_SignOpts) ProtoReflect() protoreflect.Message {
	mi := &file_sign_v1alpha2_sign_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOIDCRequest_SignOpts.ProtoReflect.Descriptor instead.
func (*SignOIDCRequest_SignOpts) Descriptor() ([]byte, []int) {
	return file_sign_v1alpha2_sign_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SignOIDCRequest_SignOpts) GetFulcioUrl() string {
	if x != nil && x.FulcioUrl != nil {
		return *x.FulcioUrl
	}
	return ""
}

func (x *SignOIDCRequest_SignOpts) GetRekorUrl() string {
	if x != nil && x.RekorUrl != nil {
		return *x.RekorUrl
	}
	return ""
}

func (x *SignOIDCRequest_SignOpts) GetTimestampUrl() string {
	if x != nil && x.TimestampUrl != nil {
		return *x.TimestampUrl
	}
	return ""
}

func (x *SignOIDCRequest_SignOpts) GetOidcProviderUrl() string {
	if x != nil && x.OidcProviderUrl != nil {
		return *x.OidcProviderUrl
	}
	return ""
}

var File_sign_v1alpha2_sign_service_proto protoreflect.FileDescriptor

var file_sign_v1alpha2_sign_service_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x1a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x03, 0x0a, 0x0f, 0x53,
	0x69, 0x67, 0x6e, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x69, 0x67, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x49,
	0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf0, 0x01, 0x0a, 0x08,
	0x53, 0x69, 0x67, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x75, 0x6c, 0x63,
	0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x66, 0x75, 0x6c, 0x63, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x69, 0x64, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x6f, 0x69, 0x64, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x75,
	0x6c, 0x63, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x6b,
	0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x69, 0x64,
	0x63, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x92,
	0x01, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x41, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x49, 0x44, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x44, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x94, 0x01, 0x0a,
	0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x69, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x32, 0xc6, 0x02, 0x0a, 0x0b, 0x53, 0x69,
	0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x49, 0x44, 0x43, 0x12, 0x1e, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x49, 0x44, 0x43, 0x12, 0x20, 0x2e, 0x73, 0x69, 0x67,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4f, 0x49, 0x44, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x69,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x57, 0x69, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x42, 0xb0, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x42, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f,
	0x64, 0x69, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x3b, 0x73, 0x69, 0x67, 0x6e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x2e,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xca, 0x02, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0xe2, 0x02, 0x19, 0x53, 0x69, 0x67, 0x6e, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_sign_v1alpha2_sign_service_proto_rawDescOnce sync.Once
	file_sign_v1alpha2_sign_service_proto_rawDescData []byte
)

func file_sign_v1alpha2_sign_service_proto_rawDescGZIP() []byte {
	file_sign_v1alpha2_sign_service_proto_rawDescOnce.Do(func() {
		file_sign_v1alpha2_sign_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sign_v1alpha2_sign_service_proto_rawDesc), len(file_sign_v1alpha2_sign_service_proto_rawDesc)))
	})
	return file_sign_v1alpha2_sign_service_proto_rawDescData
}

var file_sign_v1alpha2_sign_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_sign_v1alpha2_sign_service_proto_goTypes = []any{
	(*SignOIDCRequest)(nil),          // 0: sign.v1alpha2.SignOIDCRequest
	(*SignWithKeyRequest)(nil),       // 1: sign.v1alpha2.SignWithKeyRequest
	(*SignOIDCResponse)(nil),         // 2: sign.v1alpha2.SignOIDCResponse
	(*SignWithKeyResponse)(nil),      // 3: sign.v1alpha2.SignWithKeyResponse
	(*VerifyOIDCRequest)(nil),        // 4: sign.v1alpha2.VerifyOIDCRequest
	(*VerifyWithKeyRequest)(nil),     // 5: sign.v1alpha2.VerifyWithKeyRequest
	(*SignOIDCRequest_SignOpts)(nil), // 6: sign.v1alpha2.SignOIDCRequest.SignOpts
	(*v1alpha2.Record)(nil),          // 7: core.v1alpha2.Record
	(*emptypb.Empty)(nil),            // 8: google.protobuf.Empty
}
var file_sign_v1alpha2_sign_service_proto_depIdxs = []int32{
	7,  // 0: sign.v1alpha2.SignOIDCRequest.record:type_name -> core.v1alpha2.Record
	6,  // 1: sign.v1alpha2.SignOIDCRequest.options:type_name -> sign.v1alpha2.SignOIDCRequest.SignOpts
	7,  // 2: sign.v1alpha2.SignWithKeyRequest.record:type_name -> core.v1alpha2.Record
	7,  // 3: sign.v1alpha2.SignOIDCResponse.record:type_name -> core.v1alpha2.Record
	7,  // 4: sign.v1alpha2.SignWithKeyResponse.record:type_name -> core.v1alpha2.Record
	7,  // 5: sign.v1alpha2.VerifyOIDCRequest.record:type_name -> core.v1alpha2.Record
	7,  // 6: sign.v1alpha2.VerifyWithKeyRequest.record:type_name -> core.v1alpha2.Record
	0,  // 7: sign.v1alpha2.SignService.SignOIDC:input_type -> sign.v1alpha2.SignOIDCRequest
	1,  // 8: sign.v1alpha2.SignService.SignWithKey:input_type -> sign.v1alpha2.SignWithKeyRequest
	4,  // 9: sign.v1alpha2.SignService.VerifyOIDC:input_type -> sign.v1alpha2.VerifyOIDCRequest
	5,  // 10: sign.v1alpha2.SignService.VerifyWithKey:input_type -> sign.v1alpha2.VerifyWithKeyRequest
	2,  // 11: sign.v1alpha2.SignService.SignOIDC:output_type -> sign.v1alpha2.SignOIDCResponse
	3,  // 12: sign.v1alpha2.SignService.SignWithKey:output_type -> sign.v1alpha2.SignWithKeyResponse
	8,  // 13: sign.v1alpha2.SignService.VerifyOIDC:output_type -> google.protobuf.Empty
	8,  // 14: sign.v1alpha2.SignService.VerifyWithKey:output_type -> google.protobuf.Empty
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_sign_v1alpha2_sign_service_proto_init() }
func file_sign_v1alpha2_sign_service_proto_init() {
	if File_sign_v1alpha2_sign_service_proto != nil {
		return
	}
	file_sign_v1alpha2_sign_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_sign_v1alpha2_sign_service_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sign_v1alpha2_sign_service_proto_rawDesc), len(file_sign_v1alpha2_sign_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sign_v1alpha2_sign_service_proto_goTypes,
		DependencyIndexes: file_sign_v1alpha2_sign_service_proto_depIdxs,
		MessageInfos:      file_sign_v1alpha2_sign_service_proto_msgTypes,
	}.Build()
	File_sign_v1alpha2_sign_service_proto = out.File
	file_sign_v1alpha2_sign_service_proto_goTypes = nil
	file_sign_v1alpha2_sign_service_proto_depIdxs = nil
}
