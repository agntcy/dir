# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0
name: Container Security Scan

on:
  push:
    branches: [ main, "**" ]
  pull_request:
  schedule:
    - cron: '0 3 * * *' # Daily at 03:00 UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write # for uploading SARIF
  actions: read

jobs:
  trivy-scan:
    name: Trivy Image Scan (Pull from GHCR)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: dir-apiserver
            repo: ghcr.io/${{ github.repository_owner }}/dir-apiserver
            version: latest
          - image: dir-ctl
            repo: ghcr.io/${{ github.repository_owner }}/dir-ctl
            version: latest
          - image: zot
            repo: ghcr.io/project-zot/zot
            version: latest
          - image: spire-server
            repo: ghcr.io/spiffe/spire-server
            version: 1.9.6
          - image: spire-agent
            repo: ghcr.io/spiffe/spire-agent
            version: 1.9.6
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Log in to GHCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image (explicit version)
        run: |
          set -euo pipefail
          IMAGE_REF="${{ matrix.repo }}:${{ matrix.version }}"
          echo "Pulling $IMAGE_REF"
          docker pull "$IMAGE_REF"
          docker image inspect "$IMAGE_REF" >/dev/null 2>&1

      - name: Run Trivy vulnerability scan (image)
        uses: aquasecurity/trivy-action@9ab158e8597f3b310480b9a69402b419bc03dbd5 # v0.24.0
        with:
          image-ref: ${{ matrix.repo }}:${{ matrix.version }}
          format: sarif
          output: trivy-${{ matrix.image }}.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3.26.9
        with:
          sarif_file: trivy-${{ matrix.image }}.sarif
          # Distinguish reports per container image in Code Scanning UI
          category: trivy-${{ matrix.image }}

      - name: Upload raw report artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: trivy-report-${{ matrix.image }}
          path: trivy-${{ matrix.image }}.sarif
          retention-days: 7

  summarize:
    name: Summarize Results
    needs: [trivy-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: trivy-artifacts

      - name: Debug artifact contents
        run: |
          echo "Downloaded artifact directory tree:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find trivy-artifacts -maxdepth 3 -type f -print >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: Generate summary
        run: |
          echo '## Container Security Scan Summary' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          files=$(ls trivy-artifacts/*/trivy-*.sarif 2>/dev/null || true)
          if [ -z "$files" ]; then
            echo "No SARIF files found in artifacts (check previous job logs)." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo '| Image | Critical | High | Medium | Total | File |' >> $GITHUB_STEP_SUMMARY
          echo '|-------|----------|------|--------|-------|------|' >> $GITHUB_STEP_SUMMARY
          for f in $files; do
            img=$(basename "$f" .sarif | sed 's/^trivy-//')
            # Trivy SARIF embeds severity in rule properties.tags, the result refers to ruleIndex.
            # Map result.ruleIndex to rule tags; count severities based on presence of tag and result level.
            critical=$(jq '(.runs[].results[] | .ruleIndex as $ri | {lvl: .level, sev: (.runs[].tool.driver.rules[$ri].properties.tags // [])}) | select(.sev[]? == "CRITICAL") | length' "$f" 2>/dev/null || echo 0)
            high=$(jq '(.runs[].results[] | .ruleIndex as $ri | {lvl: .level, sev: (.runs[].tool.driver.rules[$ri].properties.tags // [])}) | select(.sev[]? == "HIGH") | length' "$f" 2>/dev/null || echo 0)
            medium=$(jq '(.runs[].results[] | .ruleIndex as $ri | {lvl: .level, sev: (.runs[].tool.driver.rules[$ri].properties.tags // [])}) | select(.sev[]? == "MEDIUM") | length' "$f" 2>/dev/null || echo 0)
            total=$(jq '[.runs[].results[]] | length' "$f" 2>/dev/null || echo 0)
            echo "| $img | $critical | $high | $medium | $total | $(basename $f) |" >> $GITHUB_STEP_SUMMARY
          done
          echo '' >> $GITHUB_STEP_SUMMARY
          echo 'Severity counts derived from rule tags (CRITICAL/HIGH/MEDIUM) mapped via result.ruleIndex.' >> $GITHUB_STEP_SUMMARY

      - name: Fail if critical vulns found (optional gate)
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          set -e
          found=$(grep -R "CRITICAL" -c trivy-artifacts || true)
          if [ "${found}" != "0" ]; then
            echo "Critical vulnerabilities detected. (Gate currently informational.)" >&2
          fi
