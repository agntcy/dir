name: "CodeQL Quick Scan"

on:
  workflow_dispatch:
    inputs:
      language:
        description: 'Language to scan (leave empty for all)'
        required: false
        type: choice
        options:
          - 'all'
          - 'go'
          - 'javascript-typescript'
          - 'python'
          - 'actions'
        default: 'all'
      queries:
        description: 'Query suite to use'
        required: false
        type: choice
        options:
          - 'security-extended'
          - 'security-and-quality'
          - 'code-scanning'
        default: 'security-extended'

permissions:
  contents: read
  security-events: write
  actions: read
  packages: read

jobs:
  codeql-scan:
    name: CodeQL Quick Scan
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: go
          build-mode: manual
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
    steps:
    - name: Skip if language filter doesn't match
      if: ${{ inputs.language != 'all' && matrix.language != inputs.language }}
      run: |
        echo "Skipping ${{ matrix.language }} - not matching filter '${{ inputs.language }}'"
        exit 0

    - name: Checkout repository
      if: ${{ inputs.language == 'all' || matrix.language == inputs.language }}
      uses: actions/checkout@v4

    - name: Log language being analyzed
      if: ${{ inputs.language == 'all' || matrix.language == inputs.language }}
      run: |
        echo "🔍 Starting CodeQL quick scan for: ${{ matrix.language }}"
        echo "Build mode: ${{ matrix.build-mode }}"
        echo "Query suite: ${{ inputs.queries }}"

    - name: Initialize CodeQL
      if: ${{ inputs.language == 'all' || matrix.language == inputs.language }}
      uses: github/codeql-action/init@v4
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        queries: +${{ inputs.queries }}

    - name: Set up Go
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'go' }}
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.2'
        cache: true

    - name: Install Task
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'go' }}
      uses: arduino/setup-task@v2
      with:
        version: 3.x
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Install buf CLI
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'go' }}
      shell: bash
      run: |
        # Install buf for protobuf generation
        curl -sSL "https://github.com/bufbuild/buf/releases/latest/download/buf-$(uname -s)-$(uname -m)" -o /tmp/buf
        sudo mv /tmp/buf /usr/local/bin/buf
        sudo chmod +x /usr/local/bin/buf

    - name: Set up Node.js
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'javascript-typescript' }}
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: '**/package*.json'

    - name: Set up Python
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'python' }}
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install JavaScript/TypeScript dependencies
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'javascript-typescript' }}
      shell: bash
      run: |
        echo "📦 Installing JavaScript/TypeScript dependencies..."
        # Install dependencies for JavaScript SDK
        if [ -f "sdk/dir-js/package.json" ]; then
          cd sdk/dir-js
          npm ci || npm install
          cd ../..
        fi
        # Install dependencies for examples
        if [ -f "sdk/examples/example-js/package.json" ]; then
          cd sdk/examples/example-js
          npm ci || npm install
          cd ../../..
        fi
        echo "✅ JavaScript/TypeScript dependencies installed"

    - name: Install Python dependencies
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.language == 'python' }}
      shell: bash
      run: |
        echo "📦 Installing Python dependencies..."
        # Install dependencies for Python SDK
        if [ -f "sdk/dir-py/pyproject.toml" ]; then
          cd sdk/dir-py
          pip install -e . || echo "Failed to install Python SDK"
          cd ../..
        fi
        # Install dependencies for examples
        if [ -f "sdk/examples/example-py/requirements.txt" ]; then
          cd sdk/examples/example-py
          pip install -r requirements.txt || echo "Failed to install example requirements"
          cd ../../..
        fi
        echo "✅ Python dependencies installed"

    - name: Build Go project
      if: ${{ (inputs.language == 'all' || matrix.language == inputs.language) && matrix.build-mode == 'manual' && matrix.language == 'go' }}
      shell: bash
      run: |
        echo "🔨 Building Go project for CodeQL analysis..."

        # First try using Task if available
        if command -v task &> /dev/null; then
          echo "📦 Installing dependencies with Task..."
          if task deps; then
            echo "✅ Task deps completed"
          else
            echo "⚠️ Task deps failed, trying alternative approach"
          fi

          echo "🔧 Generating code with Task..."
          if task gen; then
            echo "✅ Code generation completed"
          else
            echo "⚠️ Code generation failed, continuing..."
          fi

          echo "🧹 Tidying dependencies with Task..."
          if task deps:tidy; then
            echo "✅ Dependencies tidied"
          else
            echo "⚠️ Deps tidy failed, continuing..."
          fi

          echo "🔨 Compiling CLI with Task..."
          if task cli:compile; then
            echo "✅ CLI compilation completed"
          else
            echo "⚠️ CLI compile failed, trying manual build..."
          fi
        fi

        # Fallback: Manual Go build for each module
        echo "🔍 Building all Go modules manually to ensure CodeQL can analyze them..."
        find . -name "go.mod" -not -path "./vendor/*" -not -path "./.git/*" -print0 | while IFS= read -r -d '' gomod; do
          module_dir=$(dirname "$gomod")
          echo "📦 Building module: $module_dir"

          pushd "$module_dir" > /dev/null

          # Download dependencies
          if go mod download; then
            echo "✅ Downloaded dependencies for $module_dir"
          else
            echo "⚠️ Failed to download dependencies for $module_dir"
          fi

          # Build all packages in the module
          if go build -v ./...; then
            echo "✅ Built packages in $module_dir"
          else
            echo "⚠️ Failed to build some packages in $module_dir, but continuing..."
          fi

          popd > /dev/null
        done

        echo "✅ Go build process completed"

    - name: Perform CodeQL Analysis
      if: ${{ inputs.language == 'all' || matrix.language == inputs.language }}
      uses: github/codeql-action/analyze@v4
      with:
        category: "/language:${{matrix.language}}"

    - name: Generate scan summary
      if: ${{ inputs.language == 'all' || matrix.language == inputs.language }}
      run: |
        echo "## 🔍 CodeQL Quick Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Language:** ${{ matrix.language }}" >> $GITHUB_STEP_SUMMARY
        echo "**Queries:** ${{ inputs.queries }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Mode:** ${{ matrix.build-mode }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Analysis completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "📊 Check the Security tab for detailed results" >> $GITHUB_STEP_SUMMARY