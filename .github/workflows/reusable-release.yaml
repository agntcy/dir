# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

name: Release

on:
  workflow_call:
    inputs:
      image_repo:
        required: true
        type: string
        description: "Image repo to use."
      release_tag:
        required: true
        type: string
        description: "Release tag for all components."
      bake_targets:
        required: true
        type: string
        description: "Bake targets to build and push"
      helm-version:
        required: false
        default: "3.12.1"
        type: string
        description: 'Helm version'

jobs:
  images:
    name: Images
    strategy:
      fail-fast: false
      matrix:
        targets: ${{ fromJson(inputs.bake_targets) }}
    uses: ./.github/workflows/reusable-build-push.yaml
    with:
      bake_target: ${{ matrix.targets }}
      image_repo: ${{ inputs.image_repo }}
      image_tag: ${{ inputs.release_tag }}

  chart:
    name: Helm chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: notused
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Setup Helm
        uses: azure/setup-helm@fe7b79cd5ee1e45176fcad797de68ecaf3ca4814 # v4.2.0
        with:
          version: ${{ inputs.helm-version }}

      - name: Helm update
        shell: bash
        run: helm dependency update install/charts/dir

      - name: Helm lint
        shell: bash
        run: helm lint install/charts/dir --with-subcharts

      - name: Set chart name
        id: chart-name
        shell: bash
        run: echo "value=${{ github.event.repository.name }}" >> "$GITHUB_OUTPUT"

      - name: Helm package
        id: build
        shell: bash
        run: |
          helm package install/charts/dir --dependency-update --version ${{ inputs.release_tag }}
          echo "package=${{ steps.chart-name.outputs.value }}-${{ inputs.release_tag }}.tgz" >> "$GITHUB_OUTPUT"

      - name: Helm push to GHCR OCI registry
        shell: bash
        run: |
          echo "ðŸš§ Pushing ${{ steps.build.outputs.package }} to GHCR OCI registry"
          helm push ${{ steps.build.outputs.package }} oci://${{ inputs.image_repo }}/dir/helm-charts

  cli:
    name: CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          fetch-depth: 0

      - name: Setup Taskfile
        shell: bash
        run: sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin

      - name: Build
        run: |
          task cli:compile:all

      - name: Upload artifact
        uses: actions/upload-artifact@v4.4.3
        with:
          name: artifacts
          path: bin
          if-no-files-found: error

  release:
    name: Release
    needs:
      - images
      - chart
      - cli
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN  }}
        with:
          tag_name: ${{ inputs.release_tag }}
          release_name: Release ${{ inputs.release_tag }}
          draft: true
          prerelease: false

  post-release:
    name: Post Release
    needs:
      - release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: artifacts
          path: bin

      - name: Verify file
        run: |
          ls -l bin
          file bin/dirctl-${{ matrix.os }}-${{ matrix.arch }}

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN  }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: bin/dirctl-${{ matrix.os }}-${{ matrix.arch }}
          asset_name: dirctl-${{ matrix.os }}-${{ matrix.arch }}
          asset_content_type: application/octet-stream
