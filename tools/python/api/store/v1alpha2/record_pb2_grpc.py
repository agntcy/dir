# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from store.v1alpha2 import object_pb2 as store_dot_v1alpha2_dot_object__pb2
from store.v1alpha2 import record_pb2 as store_dot_v1alpha2_dot_record__pb2


class RecordObjectServiceStub(object):
    """Converts Object to an RecordObject and vice versa.
    This is client-side service only.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConvertToRecordObject = channel.unary_unary(
                '/store.v1alpha2.RecordObjectService/ConvertToRecordObject',
                request_serializer=store_dot_v1alpha2_dot_object__pb2.Object.SerializeToString,
                response_deserializer=store_dot_v1alpha2_dot_record__pb2.RecordObject.FromString,
                _registered_method=True)
        self.ConvertFromRecordObject = channel.unary_unary(
                '/store.v1alpha2.RecordObjectService/ConvertFromRecordObject',
                request_serializer=store_dot_v1alpha2_dot_record__pb2.RecordObject.SerializeToString,
                response_deserializer=store_dot_v1alpha2_dot_object__pb2.Object.FromString,
                _registered_method=True)


class RecordObjectServiceServicer(object):
    """Converts Object to an RecordObject and vice versa.
    This is client-side service only.
    """

    def ConvertToRecordObject(self, request, context):
        """Converts an Object to a RecordObject.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertFromRecordObject(self, request, context):
        """Converts a RecordObject to an Object.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecordObjectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConvertToRecordObject': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertToRecordObject,
                    request_deserializer=store_dot_v1alpha2_dot_object__pb2.Object.FromString,
                    response_serializer=store_dot_v1alpha2_dot_record__pb2.RecordObject.SerializeToString,
            ),
            'ConvertFromRecordObject': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertFromRecordObject,
                    request_deserializer=store_dot_v1alpha2_dot_record__pb2.RecordObject.FromString,
                    response_serializer=store_dot_v1alpha2_dot_object__pb2.Object.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'store.v1alpha2.RecordObjectService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('store.v1alpha2.RecordObjectService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RecordObjectService(object):
    """Converts Object to an RecordObject and vice versa.
    This is client-side service only.
    """

    @staticmethod
    def ConvertToRecordObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/store.v1alpha2.RecordObjectService/ConvertToRecordObject',
            store_dot_v1alpha2_dot_object__pb2.Object.SerializeToString,
            store_dot_v1alpha2_dot_record__pb2.RecordObject.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConvertFromRecordObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/store.v1alpha2.RecordObjectService/ConvertFromRecordObject',
            store_dot_v1alpha2_dot_record__pb2.RecordObject.SerializeToString,
            store_dot_v1alpha2_dot_object__pb2.Object.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
