// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: saas/v1alpha1/record_hub_service.proto

package saasv1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RecordHubService_ListRecords_FullMethodName          = "/saas.v1alpha1.RecordHubService/ListRecords"
	RecordHubService_ListOrgRecords_FullMethodName       = "/saas.v1alpha1.RecordHubService/ListOrgRecords"
	RecordHubService_GetPublicRecordByCID_FullMethodName = "/saas.v1alpha1.RecordHubService/GetPublicRecordByCID"
	RecordHubService_GetOrgRecordByCID_FullMethodName    = "/saas.v1alpha1.RecordHubService/GetOrgRecordByCID"
	RecordHubService_UpdateRecord_FullMethodName         = "/saas.v1alpha1.RecordHubService/UpdateRecord"
	RecordHubService_PushRecord_FullMethodName           = "/saas.v1alpha1.RecordHubService/PushRecord"
	RecordHubService_PullRecord_FullMethodName           = "/saas.v1alpha1.RecordHubService/PullRecord"
)

// RecordHubServiceClient is the client API for RecordHubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordHubServiceClient interface {
	ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error)
	ListOrgRecords(ctx context.Context, in *ListOrgRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error)
	GetPublicRecordByCID(ctx context.Context, in *GetPublicRecordByCIDRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	GetOrgRecordByCID(ctx context.Context, in *GetOrgRecordByCIDRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error)
	PushRecord(ctx context.Context, in *PushRecordRequest, opts ...grpc.CallOption) (*PushRecordResponse, error)
	PullRecord(ctx context.Context, in *PullRecordRequest, opts ...grpc.CallOption) (*PullRecordResponse, error)
}

type recordHubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordHubServiceClient(cc grpc.ClientConnInterface) RecordHubServiceClient {
	return &recordHubServiceClient{cc}
}

func (c *recordHubServiceClient) ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecordsResponse)
	err := c.cc.Invoke(ctx, RecordHubService_ListRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHubServiceClient) ListOrgRecords(ctx context.Context, in *ListOrgRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecordsResponse)
	err := c.cc.Invoke(ctx, RecordHubService_ListOrgRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHubServiceClient) GetPublicRecordByCID(ctx context.Context, in *GetPublicRecordByCIDRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, RecordHubService_GetPublicRecordByCID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHubServiceClient) GetOrgRecordByCID(ctx context.Context, in *GetOrgRecordByCIDRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, RecordHubService_GetOrgRecordByCID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHubServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecordResponse)
	err := c.cc.Invoke(ctx, RecordHubService_UpdateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHubServiceClient) PushRecord(ctx context.Context, in *PushRecordRequest, opts ...grpc.CallOption) (*PushRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushRecordResponse)
	err := c.cc.Invoke(ctx, RecordHubService_PushRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordHubServiceClient) PullRecord(ctx context.Context, in *PullRecordRequest, opts ...grpc.CallOption) (*PullRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PullRecordResponse)
	err := c.cc.Invoke(ctx, RecordHubService_PullRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordHubServiceServer is the server API for RecordHubService service.
// All implementations should embed UnimplementedRecordHubServiceServer
// for forward compatibility.
type RecordHubServiceServer interface {
	ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsResponse, error)
	ListOrgRecords(context.Context, *ListOrgRecordsRequest) (*ListRecordsResponse, error)
	GetPublicRecordByCID(context.Context, *GetPublicRecordByCIDRequest) (*GetRecordResponse, error)
	GetOrgRecordByCID(context.Context, *GetOrgRecordByCIDRequest) (*GetRecordResponse, error)
	UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error)
	PushRecord(context.Context, *PushRecordRequest) (*PushRecordResponse, error)
	PullRecord(context.Context, *PullRecordRequest) (*PullRecordResponse, error)
}

// UnimplementedRecordHubServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecordHubServiceServer struct{}

func (UnimplementedRecordHubServiceServer) ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (UnimplementedRecordHubServiceServer) ListOrgRecords(context.Context, *ListOrgRecordsRequest) (*ListRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgRecords not implemented")
}
func (UnimplementedRecordHubServiceServer) GetPublicRecordByCID(context.Context, *GetPublicRecordByCIDRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicRecordByCID not implemented")
}
func (UnimplementedRecordHubServiceServer) GetOrgRecordByCID(context.Context, *GetOrgRecordByCIDRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgRecordByCID not implemented")
}
func (UnimplementedRecordHubServiceServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedRecordHubServiceServer) PushRecord(context.Context, *PushRecordRequest) (*PushRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRecord not implemented")
}
func (UnimplementedRecordHubServiceServer) PullRecord(context.Context, *PullRecordRequest) (*PullRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullRecord not implemented")
}
func (UnimplementedRecordHubServiceServer) testEmbeddedByValue() {}

// UnsafeRecordHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordHubServiceServer will
// result in compilation errors.
type UnsafeRecordHubServiceServer interface {
	mustEmbedUnimplementedRecordHubServiceServer()
}

func RegisterRecordHubServiceServer(s grpc.ServiceRegistrar, srv RecordHubServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecordHubServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecordHubService_ServiceDesc, srv)
}

func _RecordHubService_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_ListRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).ListRecords(ctx, req.(*ListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHubService_ListOrgRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).ListOrgRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_ListOrgRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).ListOrgRecords(ctx, req.(*ListOrgRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHubService_GetPublicRecordByCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicRecordByCIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).GetPublicRecordByCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_GetPublicRecordByCID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).GetPublicRecordByCID(ctx, req.(*GetPublicRecordByCIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHubService_GetOrgRecordByCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgRecordByCIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).GetOrgRecordByCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_GetOrgRecordByCID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).GetOrgRecordByCID(ctx, req.(*GetOrgRecordByCIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHubService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_UpdateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHubService_PushRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).PushRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_PushRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).PushRecord(ctx, req.(*PushRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordHubService_PullRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordHubServiceServer).PullRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecordHubService_PullRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordHubServiceServer).PullRecord(ctx, req.(*PullRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordHubService_ServiceDesc is the grpc.ServiceDesc for RecordHubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordHubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "saas.v1alpha1.RecordHubService",
	HandlerType: (*RecordHubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecords",
			Handler:    _RecordHubService_ListRecords_Handler,
		},
		{
			MethodName: "ListOrgRecords",
			Handler:    _RecordHubService_ListOrgRecords_Handler,
		},
		{
			MethodName: "GetPublicRecordByCID",
			Handler:    _RecordHubService_GetPublicRecordByCID_Handler,
		},
		{
			MethodName: "GetOrgRecordByCID",
			Handler:    _RecordHubService_GetOrgRecordByCID_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _RecordHubService_UpdateRecord_Handler,
		},
		{
			MethodName: "PushRecord",
			Handler:    _RecordHubService_PushRecord_Handler,
		},
		{
			MethodName: "PullRecord",
			Handler:    _RecordHubService_PullRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saas/v1alpha1/record_hub_service.proto",
}
