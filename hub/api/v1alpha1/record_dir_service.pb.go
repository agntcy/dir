// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: saas/v1alpha1/record_dir_service.proto

package v1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1alpha1 "github.com/agntcy/dir/api/core/v1alpha1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PushRecordRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Repository:
	//
	//	*PushRecordRequest_RepositoryId
	//	*PushRecordRequest_RepositoryName
	Repository       isPushRecordRequest_Repository `protobuf_oneof:"repository"`
	OrganizationName string                         `protobuf:"bytes,3,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	Model            *v1alpha1.Object               `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PushRecordRequest) Reset() {
	*x = PushRecordRequest{}
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRecordRequest) ProtoMessage() {}

func (x *PushRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRecordRequest.ProtoReflect.Descriptor instead.
func (*PushRecordRequest) Descriptor() ([]byte, []int) {
	return file_saas_v1alpha1_record_dir_service_proto_rawDescGZIP(), []int{0}
}

func (x *PushRecordRequest) GetRepository() isPushRecordRequest_Repository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *PushRecordRequest) GetRepositoryId() string {
	if x != nil {
		if x, ok := x.Repository.(*PushRecordRequest_RepositoryId); ok {
			return x.RepositoryId
		}
	}
	return ""
}

func (x *PushRecordRequest) GetRepositoryName() string {
	if x != nil {
		if x, ok := x.Repository.(*PushRecordRequest_RepositoryName); ok {
			return x.RepositoryName
		}
	}
	return ""
}

func (x *PushRecordRequest) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *PushRecordRequest) GetModel() *v1alpha1.Object {
	if x != nil {
		return x.Model
	}
	return nil
}

type isPushRecordRequest_Repository interface {
	isPushRecordRequest_Repository()
}

type PushRecordRequest_RepositoryId struct {
	// option (buf.validate.oneof).required = true;
	RepositoryId string `protobuf:"bytes,1,opt,name=repository_id,json=repositoryId,proto3,oneof"`
}

type PushRecordRequest_RepositoryName struct {
	RepositoryName string `protobuf:"bytes,2,opt,name=repository_name,json=repositoryName,proto3,oneof"`
}

func (*PushRecordRequest_RepositoryId) isPushRecordRequest_Repository() {}

func (*PushRecordRequest_RepositoryName) isPushRecordRequest_Repository() {}

type PushRecordResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            *RecordIdentifierResponse `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushRecordResponse) Reset() {
	*x = PushRecordResponse{}
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushRecordResponse) ProtoMessage() {}

func (x *PushRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushRecordResponse.ProtoReflect.Descriptor instead.
func (*PushRecordResponse) Descriptor() ([]byte, []int) {
	return file_saas_v1alpha1_record_dir_service_proto_rawDescGZIP(), []int{1}
}

func (x *PushRecordResponse) GetId() *RecordIdentifierResponse {
	if x != nil {
		return x.Id
	}
	return nil
}

type PullRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *RecordIdentifier      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullRecordRequest) Reset() {
	*x = PullRecordRequest{}
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRecordRequest) ProtoMessage() {}

func (x *PullRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRecordRequest.ProtoReflect.Descriptor instead.
func (*PullRecordRequest) Descriptor() ([]byte, []int) {
	return file_saas_v1alpha1_record_dir_service_proto_rawDescGZIP(), []int{2}
}

func (x *PullRecordRequest) GetId() *RecordIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

type PullRecordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         *v1alpha1.Object       `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PullRecordResponse) Reset() {
	*x = PullRecordResponse{}
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRecordResponse) ProtoMessage() {}

func (x *PullRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_saas_v1alpha1_record_dir_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRecordResponse.ProtoReflect.Descriptor instead.
func (*PullRecordResponse) Descriptor() ([]byte, []int) {
	return file_saas_v1alpha1_record_dir_service_proto_rawDescGZIP(), []int{3}
}

func (x *PullRecordResponse) GetModel() *v1alpha1.Object {
	if x != nil {
		return x.Model
	}
	return nil
}

var File_saas_v1alpha1_record_dir_service_proto protoreflect.FileDescriptor

var file_saas_v1alpha1_record_dir_service_proto_rawDesc = string([]byte{
	0x0a, 0x26, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x73,
	0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xba, 0x48, 0x22, 0x72, 0x20, 0x18, 0x64, 0x32, 0x1c,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x28, 0x2f, 0x5b, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5f, 0x2d, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x18, 0x64, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x4d, 0x0a, 0x12, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44,
	0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x8a, 0x02, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x44, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x0a, 0x50,
	0x75, 0x73, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x70, 0x75, 0x73,
	0x68, 0x28, 0x01, 0x12, 0x7f, 0x0a, 0x0a, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x2e, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x7d, 0x30, 0x01, 0x42, 0xa7, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x15, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x69, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x64, 0x69, 0x72, 0x2f, 0x68, 0x75, 0x62, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58,
	0x58, 0xaa, 0x02, 0x0d, 0x53, 0x61, 0x61, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xca, 0x02, 0x0d, 0x53, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xe2, 0x02, 0x19, 0x53, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e,
	0x53, 0x61, 0x61, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_saas_v1alpha1_record_dir_service_proto_rawDescOnce sync.Once
	file_saas_v1alpha1_record_dir_service_proto_rawDescData []byte
)

func file_saas_v1alpha1_record_dir_service_proto_rawDescGZIP() []byte {
	file_saas_v1alpha1_record_dir_service_proto_rawDescOnce.Do(func() {
		file_saas_v1alpha1_record_dir_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_saas_v1alpha1_record_dir_service_proto_rawDesc), len(file_saas_v1alpha1_record_dir_service_proto_rawDesc)))
	})
	return file_saas_v1alpha1_record_dir_service_proto_rawDescData
}

var file_saas_v1alpha1_record_dir_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_saas_v1alpha1_record_dir_service_proto_goTypes = []any{
	(*PushRecordRequest)(nil),        // 0: saas.v1alpha1.PushRecordRequest
	(*PushRecordResponse)(nil),       // 1: saas.v1alpha1.PushRecordResponse
	(*PullRecordRequest)(nil),        // 2: saas.v1alpha1.PullRecordRequest
	(*PullRecordResponse)(nil),       // 3: saas.v1alpha1.PullRecordResponse
	(*v1alpha1.Object)(nil),          // 4: core.v1alpha1.Object
	(*RecordIdentifierResponse)(nil), // 5: saas.v1alpha1.RecordIdentifierResponse
	(*RecordIdentifier)(nil),         // 6: saas.v1alpha1.RecordIdentifier
}
var file_saas_v1alpha1_record_dir_service_proto_depIdxs = []int32{
	4, // 0: saas.v1alpha1.PushRecordRequest.model:type_name -> core.v1alpha1.Object
	5, // 1: saas.v1alpha1.PushRecordResponse.id:type_name -> saas.v1alpha1.RecordIdentifierResponse
	6, // 2: saas.v1alpha1.PullRecordRequest.id:type_name -> saas.v1alpha1.RecordIdentifier
	4, // 3: saas.v1alpha1.PullRecordResponse.model:type_name -> core.v1alpha1.Object
	0, // 4: saas.v1alpha1.AgentDirService.PushRecord:input_type -> saas.v1alpha1.PushRecordRequest
	2, // 5: saas.v1alpha1.AgentDirService.PullRecord:input_type -> saas.v1alpha1.PullRecordRequest
	1, // 6: saas.v1alpha1.AgentDirService.PushRecord:output_type -> saas.v1alpha1.PushRecordResponse
	3, // 7: saas.v1alpha1.AgentDirService.PullRecord:output_type -> saas.v1alpha1.PullRecordResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_saas_v1alpha1_record_dir_service_proto_init() }
func file_saas_v1alpha1_record_dir_service_proto_init() {
	if File_saas_v1alpha1_record_dir_service_proto != nil {
		return
	}
	file_saas_v1alpha1_record_id_proto_init()
	file_saas_v1alpha1_record_id_response_proto_init()
	file_saas_v1alpha1_record_dir_service_proto_msgTypes[0].OneofWrappers = []any{
		(*PushRecordRequest_RepositoryId)(nil),
		(*PushRecordRequest_RepositoryName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_saas_v1alpha1_record_dir_service_proto_rawDesc), len(file_saas_v1alpha1_record_dir_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_saas_v1alpha1_record_dir_service_proto_goTypes,
		DependencyIndexes: file_saas_v1alpha1_record_dir_service_proto_depIdxs,
		MessageInfos:      file_saas_v1alpha1_record_dir_service_proto_msgTypes,
	}.Build()
	File_saas_v1alpha1_record_dir_service_proto = out.File
	file_saas_v1alpha1_record_dir_service_proto_goTypes = nil
	file_saas_v1alpha1_record_dir_service_proto_depIdxs = nil
}
