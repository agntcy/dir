// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: saas/v1alpha1/dm_record.proto

package saasv1alpha1

import (
	reflect "reflect"
	sync "sync"

	v1alpha1 "buf.build/gen/go/agntcy/oasf/protocolbuffers/go/agntcy/oasf/types/v1alpha1"
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "google.golang.org/genproto/googleapis/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordVisibility int32

const (
	RecordVisibility_private RecordVisibility = 0
	RecordVisibility_public  RecordVisibility = 1
)

// Enum value maps for RecordVisibility.
var (
	RecordVisibility_name = map[int32]string{
		0: "private",
		1: "public",
	}
	RecordVisibility_value = map[string]int32{
		"private": 0,
		"public":  1,
	}
)

func (x RecordVisibility) Enum() *RecordVisibility {
	p := new(RecordVisibility)
	*p = x
	return p
}

func (x RecordVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_saas_v1alpha1_dm_record_proto_enumTypes[0].Descriptor()
}

func (RecordVisibility) Type() protoreflect.EnumType {
	return &file_saas_v1alpha1_dm_record_proto_enumTypes[0]
}

func (x RecordVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordVisibility.Descriptor instead.
func (RecordVisibility) EnumDescriptor() ([]byte, []int) {
	return file_saas_v1alpha1_dm_record_proto_rawDescGZIP(), []int{0}
}

type DMRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	NameRef      string                 `protobuf:"bytes,4,opt,name=name_ref,json=nameRef,proto3" json:"name_ref,omitempty"`
	Name         string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Version      string                 `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Digest       string                 `protobuf:"bytes,7,opt,name=digest,proto3" json:"digest,omitempty"`
	BlobRef      string                 `protobuf:"bytes,8,opt,name=blob_ref,json=blobRef,proto3" json:"blob_ref,omitempty"`
	Annotations  map[string]string      `protobuf:"bytes,9,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Security     map[string]*anypb.Any  `protobuf:"bytes,10,rep,name=security,proto3" json:"security,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Framework    map[string]*anypb.Any  `protobuf:"bytes,11,rep,name=framework,proto3" json:"framework,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Categories   []*Category            `protobuf:"bytes,13,rep,name=categories,proto3" json:"categories,omitempty"`
	Locators     []*v1alpha1.Locator    `protobuf:"bytes,14,rep,name=locators,proto3" json:"locators,omitempty"`
	RepositoryId *string                `protobuf:"bytes,15,opt,name=repository_id,json=repositoryId,proto3,oneof" json:"repository_id,omitempty"`
	UserId       *string                `protobuf:"bytes,16,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Description  *string                `protobuf:"bytes,17,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Authors      []string               `protobuf:"bytes,18,rep,name=authors,proto3" json:"authors,omitempty"`
	Modules      []string               `protobuf:"bytes,19,rep,name=modules,proto3" json:"modules,omitempty"`
	// Mcp related field
	Mcp *Mcp `protobuf:"bytes,20,opt,name=mcp,proto3,oneof" json:"mcp,omitempty"`
	// A2A related field
	A2A               *A2A    `protobuf:"bytes,21,opt,name=a2a,proto3,oneof" json:"a2a,omitempty"`
	RepositoryPrivate *bool   `protobuf:"varint,22,opt,name=repository_private,json=repositoryPrivate,proto3,oneof" json:"repository_private,omitempty"`
	RecordType        *string `protobuf:"bytes,23,opt,name=record_type,json=recordType,proto3,oneof" json:"record_type,omitempty"`
	// Identity AppID
	IdentityAppId *string `protobuf:"bytes,24,opt,name=identity_app_id,json=identityAppId,proto3,oneof" json:"identity_app_id,omitempty"`
	// Visibility of the record: "public" or "private"
	Visibility RecordVisibility `protobuf:"varint,25,opt,name=visibility,proto3,enum=saas.v1alpha1.RecordVisibility" json:"visibility,omitempty"`
	// List of organization IDs with same CID, empty list for discovered records
	OrganizationIds   []string    `protobuf:"bytes,26,rep,name=organization_ids,json=organizationIds,proto3" json:"organization_ids,omitempty"`
	PreviousRecordCid *string     `protobuf:"bytes,27,opt,name=previous_record_cid,json=previousRecordCid,proto3,oneof" json:"previous_record_cid,omitempty"`
	RecordCid         string      `protobuf:"bytes,28,opt,name=record_cid,json=recordCid,proto3" json:"record_cid,omitempty"`
	RelatedVersions   []*DMRecord `protobuf:"bytes,29,rep,name=related_versions,json=relatedVersions,proto3" json:"related_versions,omitempty"`
}

func (x *DMRecord) Reset() {
	*x = DMRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_saas_v1alpha1_dm_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMRecord) ProtoMessage() {}

func (x *DMRecord) ProtoReflect() protoreflect.Message {
	mi := &file_saas_v1alpha1_dm_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMRecord.ProtoReflect.Descriptor instead.
func (*DMRecord) Descriptor() ([]byte, []int) {
	return file_saas_v1alpha1_dm_record_proto_rawDescGZIP(), []int{0}
}

func (x *DMRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DMRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DMRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DMRecord) GetNameRef() string {
	if x != nil {
		return x.NameRef
	}
	return ""
}

func (x *DMRecord) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DMRecord) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DMRecord) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *DMRecord) GetBlobRef() string {
	if x != nil {
		return x.BlobRef
	}
	return ""
}

func (x *DMRecord) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *DMRecord) GetSecurity() map[string]*anypb.Any {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *DMRecord) GetFramework() map[string]*anypb.Any {
	if x != nil {
		return x.Framework
	}
	return nil
}

func (x *DMRecord) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *DMRecord) GetLocators() []*v1alpha1.Locator {
	if x != nil {
		return x.Locators
	}
	return nil
}

func (x *DMRecord) GetRepositoryId() string {
	if x != nil && x.RepositoryId != nil {
		return *x.RepositoryId
	}
	return ""
}

func (x *DMRecord) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *DMRecord) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DMRecord) GetAuthors() []string {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *DMRecord) GetModules() []string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *DMRecord) GetMcp() *Mcp {
	if x != nil {
		return x.Mcp
	}
	return nil
}

func (x *DMRecord) GetA2A() *A2A {
	if x != nil {
		return x.A2A
	}
	return nil
}

func (x *DMRecord) GetRepositoryPrivate() bool {
	if x != nil && x.RepositoryPrivate != nil {
		return *x.RepositoryPrivate
	}
	return false
}

func (x *DMRecord) GetRecordType() string {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return ""
}

func (x *DMRecord) GetIdentityAppId() string {
	if x != nil && x.IdentityAppId != nil {
		return *x.IdentityAppId
	}
	return ""
}

func (x *DMRecord) GetVisibility() RecordVisibility {
	if x != nil {
		return x.Visibility
	}
	return RecordVisibility_private
}

func (x *DMRecord) GetOrganizationIds() []string {
	if x != nil {
		return x.OrganizationIds
	}
	return nil
}

func (x *DMRecord) GetPreviousRecordCid() string {
	if x != nil && x.PreviousRecordCid != nil {
		return *x.PreviousRecordCid
	}
	return ""
}

func (x *DMRecord) GetRecordCid() string {
	if x != nil {
		return x.RecordCid
	}
	return ""
}

func (x *DMRecord) GetRelatedVersions() []*DMRecord {
	if x != nil {
		return x.RelatedVersions
	}
	return nil
}

var File_saas_v1alpha1_dm_record_proto protoreflect.FileDescriptor

var file_saas_v1alpha1_dm_record_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x28,
	0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2f, 0x6f, 0x61, 0x73, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x6d, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x61,
	0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x32, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf2, 0x0c, 0x0a, 0x08, 0x44, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x62, 0x52, 0x65,
	0x66, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a,
	0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2e, 0x6f, 0x61, 0x73, 0x66, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0x18, 0xde, 0x02, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x03, 0x6d, 0x63, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x63, 0x70, 0x48, 0x03,
	0x52, 0x03, 0x6d, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x32, 0x61, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x32, 0x41, 0x48, 0x04, 0x52, 0x03, 0x61, 0x32, 0x61,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x70, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x0a, 0xba, 0x48, 0x07, 0x82, 0x01, 0x04, 0x18, 0x00, 0x18, 0x01, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x10, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x51, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x52, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x63, 0x70, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x61, 0x32, 0x61, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x63, 0x69, 0x64, 0x2a, 0x2b, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x10, 0x01, 0x42, 0xc6, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0d, 0x44, 0x6d, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x75, 0x74, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x2f, 0x61, 0x67, 0x6e, 0x74, 0x63, 0x79, 0x2d, 0x64, 0x69, 0x72,
	0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2d, 0x62, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x73, 0x61,
	0x61, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58,
	0xaa, 0x02, 0x0d, 0x53, 0x61, 0x61, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xca, 0x02, 0x0d, 0x53, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0xe2, 0x02, 0x19, 0x53, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x53,
	0x61, 0x61, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_saas_v1alpha1_dm_record_proto_rawDescOnce sync.Once
	file_saas_v1alpha1_dm_record_proto_rawDescData = file_saas_v1alpha1_dm_record_proto_rawDesc
)

func file_saas_v1alpha1_dm_record_proto_rawDescGZIP() []byte {
	file_saas_v1alpha1_dm_record_proto_rawDescOnce.Do(func() {
		file_saas_v1alpha1_dm_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_saas_v1alpha1_dm_record_proto_rawDescData)
	})
	return file_saas_v1alpha1_dm_record_proto_rawDescData
}

var file_saas_v1alpha1_dm_record_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_saas_v1alpha1_dm_record_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_saas_v1alpha1_dm_record_proto_goTypes = []interface{}{
	(RecordVisibility)(0),         // 0: saas.v1alpha1.RecordVisibility
	(*DMRecord)(nil),              // 1: saas.v1alpha1.DMRecord
	nil,                           // 2: saas.v1alpha1.DMRecord.AnnotationsEntry
	nil,                           // 3: saas.v1alpha1.DMRecord.SecurityEntry
	nil,                           // 4: saas.v1alpha1.DMRecord.FrameworkEntry
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*Category)(nil),              // 6: saas.v1alpha1.Category
	(*v1alpha1.Locator)(nil),      // 7: agntcy.oasf.types.v1alpha1.Locator
	(*Mcp)(nil),                   // 8: saas.v1alpha1.Mcp
	(*A2A)(nil),                   // 9: saas.v1alpha1.A2A
	(*anypb.Any)(nil),             // 10: google.protobuf.Any
}
var file_saas_v1alpha1_dm_record_proto_depIdxs = []int32{
	5,  // 0: saas.v1alpha1.DMRecord.created_at:type_name -> google.protobuf.Timestamp
	5,  // 1: saas.v1alpha1.DMRecord.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 2: saas.v1alpha1.DMRecord.annotations:type_name -> saas.v1alpha1.DMRecord.AnnotationsEntry
	3,  // 3: saas.v1alpha1.DMRecord.security:type_name -> saas.v1alpha1.DMRecord.SecurityEntry
	4,  // 4: saas.v1alpha1.DMRecord.framework:type_name -> saas.v1alpha1.DMRecord.FrameworkEntry
	6,  // 5: saas.v1alpha1.DMRecord.categories:type_name -> saas.v1alpha1.Category
	7,  // 6: saas.v1alpha1.DMRecord.locators:type_name -> agntcy.oasf.types.v1alpha1.Locator
	8,  // 7: saas.v1alpha1.DMRecord.mcp:type_name -> saas.v1alpha1.Mcp
	9,  // 8: saas.v1alpha1.DMRecord.a2a:type_name -> saas.v1alpha1.A2A
	0,  // 9: saas.v1alpha1.DMRecord.visibility:type_name -> saas.v1alpha1.RecordVisibility
	1,  // 10: saas.v1alpha1.DMRecord.related_versions:type_name -> saas.v1alpha1.DMRecord
	10, // 11: saas.v1alpha1.DMRecord.SecurityEntry.value:type_name -> google.protobuf.Any
	10, // 12: saas.v1alpha1.DMRecord.FrameworkEntry.value:type_name -> google.protobuf.Any
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_saas_v1alpha1_dm_record_proto_init() }
func file_saas_v1alpha1_dm_record_proto_init() {
	if File_saas_v1alpha1_dm_record_proto != nil {
		return
	}
	file_saas_v1alpha1_category_proto_init()
	file_saas_v1alpha1_mcp_proto_init()
	file_saas_v1alpha1_a2a_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_saas_v1alpha1_dm_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_saas_v1alpha1_dm_record_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_saas_v1alpha1_dm_record_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_saas_v1alpha1_dm_record_proto_goTypes,
		DependencyIndexes: file_saas_v1alpha1_dm_record_proto_depIdxs,
		EnumInfos:         file_saas_v1alpha1_dm_record_proto_enumTypes,
		MessageInfos:      file_saas_v1alpha1_dm_record_proto_msgTypes,
	}.Build()
	File_saas_v1alpha1_dm_record_proto = out.File
	file_saas_v1alpha1_dm_record_proto_rawDesc = nil
	file_saas_v1alpha1_dm_record_proto_goTypes = nil
	file_saas_v1alpha1_dm_record_proto_depIdxs = nil
}
