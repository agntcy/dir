syntax = "proto3";

package saas.v1alpha1;

option go_package = "github.com/cisco-eti/phoenix-saas-be/api/saas/v1alpha1";

import "buf/validate/validate.proto";
import "core/v1alpha1/object.proto";
import "google/api/annotations.proto";
import "saas/v1alpha1/agent_id.proto";
import "saas/v1alpha1/agent_id_response.proto";

message PushAgentRequest {
  oneof repository {
    option (buf.validate.oneof).required = true;

    string repository_id = 1 [(buf.validate.field).string.uuid = true];
    string repository_name = 2 [
      (buf.validate.field).string.pattern = "^[a-z0-9_-]+(/[a-z0-9_-]+)*$",
      (buf.validate.field).string.max_len = 100
    ];
  }
  string organisation_name = 3 [
    (buf.validate.field).string.pattern = "^[a-z0-9_-]+(/[a-z0-9_-]+)*$",
    (buf.validate.field).string.max_len = 100
  ];
  core.v1alpha1.Object model = 4;
}

message PushAgentResponse {
  AgentIdentifierResponse id = 1;
}

message PullAgentRequest {
  AgentIdentifier id = 1;
}

message PullAgentResponse {
  core.v1alpha1.Object model = 1;
}

// This API is manily for CLIs and the implementation of these APIs should communicate with the Agent Directory
service AgentDirService {
  rpc PushAgent(stream PushAgentRequest) returns (PushAgentResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/agents/push"
      body: "*"
    };
  }
  rpc PullAgent(PullAgentRequest) returns (stream PullAgentResponse) {
    option (google.api.http) = {get: "/v1alpha1/agents/pull/{id.digest}"};
  }

}
