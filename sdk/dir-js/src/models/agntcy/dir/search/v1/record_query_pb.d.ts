// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file agntcy/dir/search/v1/record_query.proto (package agntcy.dir.search.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file agntcy/dir/search/v1/record_query.proto.
 */
export declare const file_agntcy_dir_search_v1_record_query: GenFile;

/**
 * A query to match the record against during discovery.
 * For example:
 *   Exact match:      { type: RECORD_QUERY_TYPE_NAME, value: "my-agent" }
 *   Wildcard match:   { type: RECORD_QUERY_TYPE_NAME, value: "web*" }
 *   Pattern match:    { type: RECORD_QUERY_TYPE_SKILL_NAME, value: "*machine*learning*" }
 *   Question mark:    { type: RECORD_QUERY_TYPE_VERSION, value: "v1.0.?" }
 *   List wildcards:   { type: RECORD_QUERY_TYPE_NAME, value: "agent-[0-9]" }
 *   Complex match:    { type: RECORD_QUERY_TYPE_LOCATOR, value: "docker-image:https://*.example.com/*" }
 *
 * @generated from message agntcy.dir.search.v1.RecordQuery
 */
export declare type RecordQuery = Message<"agntcy.dir.search.v1.RecordQuery"> & {
  /**
   * The type of the query to match against.
   *
   * @generated from field: agntcy.dir.search.v1.RecordQueryType type = 1;
   */
  type: RecordQueryType;

  /**
   * The query value to match against.
   * Supports wildcard patterns:
   *   '*' - matches zero or more characters
   *   '?' - matches exactly one character
   *   '[]' - matches any character within brackets (e.g., [0-9], [a-z], [abc])
   *
   * @generated from field: string value = 2;
   */
  value: string;
};

/**
 * Describes the message agntcy.dir.search.v1.RecordQuery.
 * Use `create(RecordQuerySchema)` to create a new message.
 */
export declare const RecordQuerySchema: GenMessage<RecordQuery>;

/**
 * Defines a list of supported record query types.
 *
 * @generated from enum agntcy.dir.search.v1.RecordQueryType
 */
export enum RecordQueryType {
  /**
   * Unspecified query type.
   *
   * @generated from enum value: RECORD_QUERY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Query for a record name.
   * Supports wildcard patterns: "web*", "*service", "api-*-v2", "???api", "agent-[0-9]"
   *
   * @generated from enum value: RECORD_QUERY_TYPE_NAME = 1;
   */
  NAME = 1,

  /**
   * Query for a record version.
   * Supports wildcard patterns: "v1.*", "v2.*", "*-beta", "v1.0.?", "v[0-9].*"
   *
   * @generated from enum value: RECORD_QUERY_TYPE_VERSION = 2;
   */
  VERSION = 2,

  /**
   * Query for a skill ID.
   * Numeric field - exact match only, no wildcard support.
   *
   * @generated from enum value: RECORD_QUERY_TYPE_SKILL_ID = 3;
   */
  SKILL_ID = 3,

  /**
   * Query for a skill name.
   * Supports wildcard patterns: "python*", "*script", "*machine*learning*", "Pytho?", "[A-M]*"
   *
   * @generated from enum value: RECORD_QUERY_TYPE_SKILL_NAME = 4;
   */
  SKILL_NAME = 4,

  /**
   * Query for a locator type.
   * Supports wildcard patterns: "http*", "ftp*", "*docker*", "[hf]tt[ps]*"
   *
   * @generated from enum value: RECORD_QUERY_TYPE_LOCATOR = 5;
   */
  LOCATOR = 5,

  /**
   * Query for a module.
   * Supports wildcard patterns: "*-plugin", "*-module", "core*", "mod-?", "plugin-[0-9]"
   *
   * @generated from enum value: RECORD_QUERY_TYPE_MODULE = 6;
   */
  MODULE = 6,
}

/**
 * Describes the enum agntcy.dir.search.v1.RecordQueryType.
 */
export declare const RecordQueryTypeSchema: GenEnum<RecordQueryType>;

