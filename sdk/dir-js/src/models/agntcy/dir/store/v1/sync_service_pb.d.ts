// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file agntcy/dir/store/v1/sync_service.proto (package agntcy.dir.store.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file agntcy/dir/store/v1/sync_service.proto.
 */
export declare const file_agntcy_dir_store_v1_sync_service: GenFile;

/**
 * CreateSyncRequest defines the parameters for creating a new synchronization operation.
 *
 * Currently supports basic synchronization of all objects from a remote Directory.
 * Future versions may include additional options for filtering and scheduling capabilities.
 *
 * @generated from message agntcy.dir.store.v1.CreateSyncRequest
 */
export declare type CreateSyncRequest = Message<"agntcy.dir.store.v1.CreateSyncRequest"> & {
  /**
   * URL of the remote Registry to synchronize from.
   *
   * This should be a complete URL including protocol and port if non-standard.
   * Examples:
   * - "https://directory.example.com"
   * - "http://localhost:8080"
   * - "https://directory.example.com:9443"
   *
   * @generated from field: string remote_directory_url = 1;
   */
  remoteDirectoryUrl: string;

  /**
   * List of CIDs to synchronize from the remote Directory.
   * If empty, all objects will be synchronized.
   *
   * @generated from field: repeated string cids = 2;
   */
  cids: string[];
};

/**
 * Describes the message agntcy.dir.store.v1.CreateSyncRequest.
 * Use `create(CreateSyncRequestSchema)` to create a new message.
 */
export declare const CreateSyncRequestSchema: GenMessage<CreateSyncRequest>;

/**
 * CreateSyncResponse contains the result of creating a new synchronization operation.
 *
 * @generated from message agntcy.dir.store.v1.CreateSyncResponse
 */
export declare type CreateSyncResponse = Message<"agntcy.dir.store.v1.CreateSyncResponse"> & {
  /**
   * Unique identifier for the created synchronization operation.
   * This ID can be used with other SyncService RPCs to monitor and manage the sync.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;
};

/**
 * Describes the message agntcy.dir.store.v1.CreateSyncResponse.
 * Use `create(CreateSyncResponseSchema)` to create a new message.
 */
export declare const CreateSyncResponseSchema: GenMessage<CreateSyncResponse>;

/**
 * ListSyncsRequest specifies parameters for listing synchronization operations.
 *
 * @generated from message agntcy.dir.store.v1.ListSyncsRequest
 */
export declare type ListSyncsRequest = Message<"agntcy.dir.store.v1.ListSyncsRequest"> & {
  /**
   * Optional limit on the number of results to return.
   *
   * @generated from field: optional uint32 limit = 2;
   */
  limit?: number;

  /**
   * Optional offset for pagination of results.
   *
   * @generated from field: optional uint32 offset = 3;
   */
  offset?: number;
};

/**
 * Describes the message agntcy.dir.store.v1.ListSyncsRequest.
 * Use `create(ListSyncsRequestSchema)` to create a new message.
 */
export declare const ListSyncsRequestSchema: GenMessage<ListSyncsRequest>;

/**
 * ListSyncItem represents a single synchronization in the list of all syncs.
 *
 * @generated from message agntcy.dir.store.v1.ListSyncsItem
 */
export declare type ListSyncsItem = Message<"agntcy.dir.store.v1.ListSyncsItem"> & {
  /**
   * Unique identifier of the synchronization operation.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;

  /**
   * Current status of the synchronization operation.
   *
   * @generated from field: agntcy.dir.store.v1.SyncStatus status = 2;
   */
  status: SyncStatus;

  /**
   * URL of the remote Directory being synchronized from.
   *
   * @generated from field: string remote_directory_url = 3;
   */
  remoteDirectoryUrl: string;
};

/**
 * Describes the message agntcy.dir.store.v1.ListSyncsItem.
 * Use `create(ListSyncsItemSchema)` to create a new message.
 */
export declare const ListSyncsItemSchema: GenMessage<ListSyncsItem>;

/**
 * GetSyncRequest specifies which synchronization status to retrieve.
 *
 * @generated from message agntcy.dir.store.v1.GetSyncRequest
 */
export declare type GetSyncRequest = Message<"agntcy.dir.store.v1.GetSyncRequest"> & {
  /**
   * Unique identifier of the synchronization operation to query.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;
};

/**
 * Describes the message agntcy.dir.store.v1.GetSyncRequest.
 * Use `create(GetSyncRequestSchema)` to create a new message.
 */
export declare const GetSyncRequestSchema: GenMessage<GetSyncRequest>;

/**
 * GetSyncResponse provides detailed information about a specific synchronization operation.
 *
 * @generated from message agntcy.dir.store.v1.GetSyncResponse
 */
export declare type GetSyncResponse = Message<"agntcy.dir.store.v1.GetSyncResponse"> & {
  /**
   * Unique identifier of the synchronization operation.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;

  /**
   * Current status of the synchronization operation.
   *
   * @generated from field: agntcy.dir.store.v1.SyncStatus status = 2;
   */
  status: SyncStatus;

  /**
   * URL of the remote Directory node being synchronized from.
   *
   * @generated from field: string remote_directory_url = 3;
   */
  remoteDirectoryUrl: string;

  /**
   * Timestamp when the synchronization operation was created in the RFC3339 format.
   * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
   *
   * @generated from field: string created_time = 4;
   */
  createdTime: string;

  /**
   * Timestamp of the most recent status update for this synchronization in the RFC3339 format.
   *
   * @generated from field: string last_update_time = 5;
   */
  lastUpdateTime: string;
};

/**
 * Describes the message agntcy.dir.store.v1.GetSyncResponse.
 * Use `create(GetSyncResponseSchema)` to create a new message.
 */
export declare const GetSyncResponseSchema: GenMessage<GetSyncResponse>;

/**
 * DeleteSyncRequest specifies which synchronization to delete.
 *
 * @generated from message agntcy.dir.store.v1.DeleteSyncRequest
 */
export declare type DeleteSyncRequest = Message<"agntcy.dir.store.v1.DeleteSyncRequest"> & {
  /**
   * Unique identifier of the synchronization operation to delete.
   *
   * @generated from field: string sync_id = 1;
   */
  syncId: string;
};

/**
 * Describes the message agntcy.dir.store.v1.DeleteSyncRequest.
 * Use `create(DeleteSyncRequestSchema)` to create a new message.
 */
export declare const DeleteSyncRequestSchema: GenMessage<DeleteSyncRequest>;

/**
 * DeleteSyncResponse
 *
 * @generated from message agntcy.dir.store.v1.DeleteSyncResponse
 */
export declare type DeleteSyncResponse = Message<"agntcy.dir.store.v1.DeleteSyncResponse"> & {
};

/**
 * Describes the message agntcy.dir.store.v1.DeleteSyncResponse.
 * Use `create(DeleteSyncResponseSchema)` to create a new message.
 */
export declare const DeleteSyncResponseSchema: GenMessage<DeleteSyncResponse>;

/**
 * @generated from message agntcy.dir.store.v1.RequestRegistryCredentialsRequest
 */
export declare type RequestRegistryCredentialsRequest = Message<"agntcy.dir.store.v1.RequestRegistryCredentialsRequest"> & {
  /**
   * Identity of the requesting node
   * For example: spiffe://example.org/service/foo
   *
   * @generated from field: string requesting_node_id = 1;
   */
  requestingNodeId: string;
};

/**
 * Describes the message agntcy.dir.store.v1.RequestRegistryCredentialsRequest.
 * Use `create(RequestRegistryCredentialsRequestSchema)` to create a new message.
 */
export declare const RequestRegistryCredentialsRequestSchema: GenMessage<RequestRegistryCredentialsRequest>;

/**
 * @generated from message agntcy.dir.store.v1.RequestRegistryCredentialsResponse
 */
export declare type RequestRegistryCredentialsResponse = Message<"agntcy.dir.store.v1.RequestRegistryCredentialsResponse"> & {
  /**
   * Success status of the credential negotiation
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Error message if negotiation failed
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;

  /**
   * URL of the remote Registry being synchronized from.
   *
   * @generated from field: string remote_registry_url = 3;
   */
  remoteRegistryUrl: string;

  /**
   * Registry credentials (oneof based on credential type)
   *
   * @generated from oneof agntcy.dir.store.v1.RequestRegistryCredentialsResponse.credentials
   */
  credentials: {
    /**
     * CertificateCredentials certificate = 5;
     *
     * @generated from field: agntcy.dir.store.v1.BasicAuthCredentials basic_auth = 4;
     */
    value: BasicAuthCredentials;
    case: "basicAuth";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message agntcy.dir.store.v1.RequestRegistryCredentialsResponse.
 * Use `create(RequestRegistryCredentialsResponseSchema)` to create a new message.
 */
export declare const RequestRegistryCredentialsResponseSchema: GenMessage<RequestRegistryCredentialsResponse>;

/**
 * Supporting credential type definitions
 *
 * @generated from message agntcy.dir.store.v1.BasicAuthCredentials
 */
export declare type BasicAuthCredentials = Message<"agntcy.dir.store.v1.BasicAuthCredentials"> & {
  /**
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message agntcy.dir.store.v1.BasicAuthCredentials.
 * Use `create(BasicAuthCredentialsSchema)` to create a new message.
 */
export declare const BasicAuthCredentialsSchema: GenMessage<BasicAuthCredentials>;

/**
 * SyncStatus enumeration defines the possible states of a synchronization operation.
 *
 * @generated from enum agntcy.dir.store.v1.SyncStatus
 */
export enum SyncStatus {
  /**
   * Default/unset status - should not be used in practice
   *
   * @generated from enum value: SYNC_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Sync operation has been created but not yet started
   *
   * @generated from enum value: SYNC_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * Sync operation is actively discovering and transferring objects
   *
   * @generated from enum value: SYNC_STATUS_IN_PROGRESS = 2;
   */
  IN_PROGRESS = 2,

  /**
   * Sync operation encountered an error and stopped
   *
   * @generated from enum value: SYNC_STATUS_FAILED = 3;
   */
  FAILED = 3,

  /**
   * Sync operation has been marked for deletion but cleanup not yet started
   *
   * @generated from enum value: SYNC_STATUS_DELETE_PENDING = 4;
   */
  DELETE_PENDING = 4,

  /**
   * Sync operation has been successfully deleted and cleaned up
   *
   * @generated from enum value: SYNC_STATUS_DELETED = 5;
   */
  DELETED = 5,
}

/**
 * Describes the enum agntcy.dir.store.v1.SyncStatus.
 */
export declare const SyncStatusSchema: GenEnum<SyncStatus>;

/**
 * SyncService provides functionality for synchronizing objects between Directory nodes.
 *
 * This service enables one-way synchronization from a remote Directory node to the local node,
 * allowing distributed Directory instances to share and replicate objects. The service supports
 * both on-demand synchronization and tracking of sync operations through their lifecycle.
 *
 * @generated from service agntcy.dir.store.v1.SyncService
 */
export declare const SyncService: GenService<{
  /**
   * CreateSync initiates a new synchronization operation from a remote Directory node.
   *
   * The operation is non-blocking and returns immediately with a sync ID that can be used
   * to track progress and manage the sync operation.
   *
   * @generated from rpc agntcy.dir.store.v1.SyncService.CreateSync
   */
  createSync: {
    methodKind: "unary";
    input: typeof CreateSyncRequestSchema;
    output: typeof CreateSyncResponseSchema;
  },
  /**
   * ListSyncs returns a stream of all sync operations known to the system.
   *
   * This includes active, completed, and failed synchronizations.
   *
   * @generated from rpc agntcy.dir.store.v1.SyncService.ListSyncs
   */
  listSyncs: {
    methodKind: "server_streaming";
    input: typeof ListSyncsRequestSchema;
    output: typeof ListSyncsItemSchema;
  },
  /**
   * GetSync retrieves detailed status information for a specific synchronization.
   *
   * @generated from rpc agntcy.dir.store.v1.SyncService.GetSync
   */
  getSync: {
    methodKind: "unary";
    input: typeof GetSyncRequestSchema;
    output: typeof GetSyncResponseSchema;
  },
  /**
   * DeleteSync removes a synchronization operation from the system.
   *
   * @generated from rpc agntcy.dir.store.v1.SyncService.DeleteSync
   */
  deleteSync: {
    methodKind: "unary";
    input: typeof DeleteSyncRequestSchema;
    output: typeof DeleteSyncResponseSchema;
  },
  /**
   * RequestRegistryCredentials requests registry credentials between two Directory nodes.
   *
   * This RPC allows a requesting node to authenticate with this node and obtain
   * temporary registry credentials for secure Zot-based synchronization.
   *
   * @generated from rpc agntcy.dir.store.v1.SyncService.RequestRegistryCredentials
   */
  requestRegistryCredentials: {
    methodKind: "unary";
    input: typeof RequestRegistryCredentialsRequestSchema;
    output: typeof RequestRegistryCredentialsResponseSchema;
  },
}>;

