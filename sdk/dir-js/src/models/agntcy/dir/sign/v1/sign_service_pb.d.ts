// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file agntcy/dir/sign/v1/sign_service.proto (package agntcy.dir.sign.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { RecordRef } from "../../core/v1/record_pb.js";
import type { Signature } from "./signature_pb.js";

/**
 * Describes the file agntcy/dir/sign/v1/sign_service.proto.
 */
export declare const file_agntcy_dir_sign_v1_sign_service: GenFile;

/**
 * @generated from message agntcy.dir.sign.v1.SignRequest
 */
export declare type SignRequest = Message<"agntcy.dir.sign.v1.SignRequest"> & {
  /**
   * Record reference to be signed
   *
   * @generated from field: agntcy.dir.core.v1.RecordRef record_ref = 1;
   */
  recordRef?: RecordRef;

  /**
   * Signing provider to use
   *
   * @generated from field: agntcy.dir.sign.v1.SignRequestProvider provider = 2;
   */
  provider?: SignRequestProvider;
};

/**
 * Describes the message agntcy.dir.sign.v1.SignRequest.
 * Use `create(SignRequestSchema)` to create a new message.
 */
export declare const SignRequestSchema: GenMessage<SignRequest>;

/**
 * @generated from message agntcy.dir.sign.v1.SignRequestProvider
 */
export declare type SignRequestProvider = Message<"agntcy.dir.sign.v1.SignRequestProvider"> & {
  /**
   * @generated from oneof agntcy.dir.sign.v1.SignRequestProvider.request
   */
  request: {
    /**
     * Sign with OIDC provider
     *
     * @generated from field: agntcy.dir.sign.v1.SignWithOIDC oidc = 1;
     */
    value: SignWithOIDC;
    case: "oidc";
  } | {
    /**
     * Sign with PEM-encoded public key
     *
     * @generated from field: agntcy.dir.sign.v1.SignWithKey key = 2;
     */
    value: SignWithKey;
    case: "key";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message agntcy.dir.sign.v1.SignRequestProvider.
 * Use `create(SignRequestProviderSchema)` to create a new message.
 */
export declare const SignRequestProviderSchema: GenMessage<SignRequestProvider>;

/**
 * @generated from message agntcy.dir.sign.v1.SignWithOIDC
 */
export declare type SignWithOIDC = Message<"agntcy.dir.sign.v1.SignWithOIDC"> & {
  /**
   * Token for OIDC provider
   *
   * @generated from field: string id_token = 1;
   */
  idToken: string;

  /**
   * Signing options for OIDC
   *
   * @generated from field: agntcy.dir.sign.v1.SignWithOIDC.SignOpts options = 2;
   */
  options?: SignWithOIDC_SignOpts;
};

/**
 * Describes the message agntcy.dir.sign.v1.SignWithOIDC.
 * Use `create(SignWithOIDCSchema)` to create a new message.
 */
export declare const SignWithOIDCSchema: GenMessage<SignWithOIDC>;

/**
 * List of sign options for OIDC
 *
 * @generated from message agntcy.dir.sign.v1.SignWithOIDC.SignOpts
 */
export declare type SignWithOIDC_SignOpts = Message<"agntcy.dir.sign.v1.SignWithOIDC.SignOpts"> & {
  /**
   * Fulcio authority access URL (default value: https://fulcio.sigstage.dev)
   *
   * @generated from field: optional string fulcio_url = 1;
   */
  fulcioUrl?: string;

  /**
   * Rekor validator access URL (default value: https://rekor.sigstage.dev)
   *
   * @generated from field: optional string rekor_url = 2;
   */
  rekorUrl?: string;

  /**
   * Timestamp authority access URL (default value: https://timestamp.sigstage.dev/api/v1/timestamp)
   *
   * @generated from field: optional string timestamp_url = 3;
   */
  timestampUrl?: string;

  /**
   * OIDC provider access URL (default value: https://oauth2.sigstage.dev/auth)
   *
   * @generated from field: optional string oidc_provider_url = 4;
   */
  oidcProviderUrl?: string;
};

/**
 * Describes the message agntcy.dir.sign.v1.SignWithOIDC.SignOpts.
 * Use `create(SignWithOIDC_SignOptsSchema)` to create a new message.
 */
export declare const SignWithOIDC_SignOptsSchema: GenMessage<SignWithOIDC_SignOpts>;

/**
 * @generated from message agntcy.dir.sign.v1.SignWithKey
 */
export declare type SignWithKey = Message<"agntcy.dir.sign.v1.SignWithKey"> & {
  /**
   * Private key used for signing
   *
   * @generated from field: bytes private_key = 1;
   */
  privateKey: Uint8Array;

  /**
   * Password to unlock the private key
   *
   * @generated from field: optional bytes password = 2;
   */
  password?: Uint8Array;
};

/**
 * Describes the message agntcy.dir.sign.v1.SignWithKey.
 * Use `create(SignWithKeySchema)` to create a new message.
 */
export declare const SignWithKeySchema: GenMessage<SignWithKey>;

/**
 * @generated from message agntcy.dir.sign.v1.SignResponse
 */
export declare type SignResponse = Message<"agntcy.dir.sign.v1.SignResponse"> & {
  /**
   * Cryptographic signature of the record
   *
   * @generated from field: agntcy.dir.sign.v1.Signature signature = 1;
   */
  signature?: Signature;
};

/**
 * Describes the message agntcy.dir.sign.v1.SignResponse.
 * Use `create(SignResponseSchema)` to create a new message.
 */
export declare const SignResponseSchema: GenMessage<SignResponse>;

/**
 * @generated from message agntcy.dir.sign.v1.VerifyRequest
 */
export declare type VerifyRequest = Message<"agntcy.dir.sign.v1.VerifyRequest"> & {
  /**
   * Record reference to be verified
   *
   * @generated from field: agntcy.dir.core.v1.RecordRef record_ref = 1;
   */
  recordRef?: RecordRef;
};

/**
 * Describes the message agntcy.dir.sign.v1.VerifyRequest.
 * Use `create(VerifyRequestSchema)` to create a new message.
 */
export declare const VerifyRequestSchema: GenMessage<VerifyRequest>;

/**
 * @generated from message agntcy.dir.sign.v1.VerifyResponse
 */
export declare type VerifyResponse = Message<"agntcy.dir.sign.v1.VerifyResponse"> & {
  /**
   * The verify process result
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Optional error message if verification failed
   *
   * @generated from field: optional string error_message = 2;
   */
  errorMessage?: string;
};

/**
 * Describes the message agntcy.dir.sign.v1.VerifyResponse.
 * Use `create(VerifyResponseSchema)` to create a new message.
 */
export declare const VerifyResponseSchema: GenMessage<VerifyResponse>;

/**
 * SignService provides methods to sign and verify records.
 *
 * @generated from service agntcy.dir.sign.v1.SignService
 */
export declare const SignService: GenService<{
  /**
   * Sign record using keyless OIDC based provider or using PEM-encoded private key with an optional passphrase
   *
   * @generated from rpc agntcy.dir.sign.v1.SignService.Sign
   */
  sign: {
    methodKind: "unary";
    input: typeof SignRequestSchema;
    output: typeof SignResponseSchema;
  },
  /**
   * Verify signed record using keyless OIDC based provider or using PEM-encoded formatted PEM public key encrypted
   *
   * @generated from rpc agntcy.dir.sign.v1.SignService.Verify
   */
  verify: {
    methodKind: "unary";
    input: typeof VerifyRequestSchema;
    output: typeof VerifyResponseSchema;
  },
}>;

