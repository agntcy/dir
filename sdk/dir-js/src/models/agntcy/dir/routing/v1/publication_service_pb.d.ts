// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file agntcy/dir/routing/v1/publication_service.proto (package agntcy.dir.routing.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { PublishRequestSchema } from "./routing_service_pb.js";

/**
 * Describes the file agntcy/dir/routing/v1/publication_service.proto.
 */
export declare const file_agntcy_dir_routing_v1_publication_service: GenFile;

/**
 * CreatePublicationResponse returns the result of creating a publication request.
 * This includes the publication ID and any relevant metadata.
 *
 * @generated from message agntcy.dir.routing.v1.CreatePublicationResponse
 */
export declare type CreatePublicationResponse = Message<"agntcy.dir.routing.v1.CreatePublicationResponse"> & {
  /**
   * Unique identifier of the publication operation.
   *
   * @generated from field: string publication_id = 1;
   */
  publicationId: string;
};

/**
 * Describes the message agntcy.dir.routing.v1.CreatePublicationResponse.
 * Use `create(CreatePublicationResponseSchema)` to create a new message.
 */
export declare const CreatePublicationResponseSchema: GenMessage<CreatePublicationResponse>;

/**
 * ListPublicationsRequest contains optional filters for listing publication requests.
 *
 * @generated from message agntcy.dir.routing.v1.ListPublicationsRequest
 */
export declare type ListPublicationsRequest = Message<"agntcy.dir.routing.v1.ListPublicationsRequest"> & {
  /**
   * Optional limit on the number of results to return.
   *
   * @generated from field: optional uint32 limit = 2;
   */
  limit?: number;

  /**
   * Optional offset for pagination of results.
   *
   * @generated from field: optional uint32 offset = 3;
   */
  offset?: number;
};

/**
 * Describes the message agntcy.dir.routing.v1.ListPublicationsRequest.
 * Use `create(ListPublicationsRequestSchema)` to create a new message.
 */
export declare const ListPublicationsRequestSchema: GenMessage<ListPublicationsRequest>;

/**
 * ListPublicationsItem represents a single publication request in the list response.
 * Contains publication details including ID, status, and creation timestamp.
 *
 * @generated from message agntcy.dir.routing.v1.ListPublicationsItem
 */
export declare type ListPublicationsItem = Message<"agntcy.dir.routing.v1.ListPublicationsItem"> & {
  /**
   * Unique identifier of the publication operation.
   *
   * @generated from field: string publication_id = 1;
   */
  publicationId: string;

  /**
   * Current status of the publication operation.
   *
   * @generated from field: agntcy.dir.routing.v1.PublicationStatus status = 2;
   */
  status: PublicationStatus;

  /**
   * Timestamp when the publication operation was created in the RFC3339 format.
   * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
   *
   * @generated from field: string created_time = 3;
   */
  createdTime: string;

  /**
   * Timestamp of the most recent status update for this publication in the RFC3339 format.
   *
   * @generated from field: string last_update_time = 4;
   */
  lastUpdateTime: string;
};

/**
 * Describes the message agntcy.dir.routing.v1.ListPublicationsItem.
 * Use `create(ListPublicationsItemSchema)` to create a new message.
 */
export declare const ListPublicationsItemSchema: GenMessage<ListPublicationsItem>;

/**
 * GetPublicationRequest specifies which publication to retrieve by its identifier.
 *
 * @generated from message agntcy.dir.routing.v1.GetPublicationRequest
 */
export declare type GetPublicationRequest = Message<"agntcy.dir.routing.v1.GetPublicationRequest"> & {
  /**
   * Unique identifier of the publication operation to query.
   *
   * @generated from field: string publication_id = 1;
   */
  publicationId: string;
};

/**
 * Describes the message agntcy.dir.routing.v1.GetPublicationRequest.
 * Use `create(GetPublicationRequestSchema)` to create a new message.
 */
export declare const GetPublicationRequestSchema: GenMessage<GetPublicationRequest>;

/**
 * GetPublicationResponse contains the full details of a specific publication request.
 * Includes status, progress information, and any error details if applicable.
 *
 * @generated from message agntcy.dir.routing.v1.GetPublicationResponse
 */
export declare type GetPublicationResponse = Message<"agntcy.dir.routing.v1.GetPublicationResponse"> & {
  /**
   * Unique identifier of the publication operation.
   *
   * @generated from field: string publication_id = 1;
   */
  publicationId: string;

  /**
   * Current status of the publication operation.
   *
   * @generated from field: agntcy.dir.routing.v1.PublicationStatus status = 2;
   */
  status: PublicationStatus;

  /**
   * Timestamp when the publication operation was created in the RFC3339 format.
   * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
   *
   * @generated from field: string created_time = 3;
   */
  createdTime: string;

  /**
   * Timestamp of the most recent status update for this publication in the RFC3339 format.
   *
   * @generated from field: string last_update_time = 4;
   */
  lastUpdateTime: string;
};

/**
 * Describes the message agntcy.dir.routing.v1.GetPublicationResponse.
 * Use `create(GetPublicationResponseSchema)` to create a new message.
 */
export declare const GetPublicationResponseSchema: GenMessage<GetPublicationResponse>;

/**
 * PublicationStatus represents the current state of a publication request.
 * Publications progress from pending to processing to completed or failed states.
 *
 * @generated from enum agntcy.dir.routing.v1.PublicationStatus
 */
export enum PublicationStatus {
  /**
   * Default/unset status - should not be used in practice
   *
   * @generated from enum value: PUBLICATION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Sync operation has been created but not yet started
   *
   * @generated from enum value: PUBLICATION_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * Sync operation is actively discovering and transferring objects
   *
   * @generated from enum value: PUBLICATION_STATUS_IN_PROGRESS = 2;
   */
  IN_PROGRESS = 2,

  /**
   * Sync operation has been successfully completed
   *
   * @generated from enum value: PUBLICATION_STATUS_COMPLETED = 3;
   */
  COMPLETED = 3,

  /**
   * Sync operation encountered an error and stopped
   *
   * @generated from enum value: PUBLICATION_STATUS_FAILED = 4;
   */
  FAILED = 4,
}

/**
 * Describes the enum agntcy.dir.routing.v1.PublicationStatus.
 */
export declare const PublicationStatusSchema: GenEnum<PublicationStatus>;

/**
 * PublicationService manages publication requests for announcing records to the DHT.
 *
 * Publications are stored in the database and processed by a worker that runs every hour.
 * The publication workflow:
 * 1. Publications are created via routing's Publish RPC by specifying either a query, a list of CIDs, or all records
 * 2. Publication requests are added to the database
 * 3. PublicationWorker queries the data using the publication request from the database to get the list of CIDs to be published
 * 4. PublicationWorker announces the records with these CIDs to the DHT
 *
 * @generated from service agntcy.dir.routing.v1.PublicationService
 */
export declare const PublicationService: GenService<{
  /**
   * CreatePublication creates a new publication request that will be processed by the PublicationWorker.
   * The publication request can specify either a query, a list of specific CIDs, or all records to be announced to the DHT.
   *
   * @generated from rpc agntcy.dir.routing.v1.PublicationService.CreatePublication
   */
  createPublication: {
    methodKind: "unary";
    input: typeof PublishRequestSchema;
    output: typeof CreatePublicationResponseSchema;
  },
  /**
   * ListPublications returns a stream of all publication requests in the system.
   * This allows monitoring of pending, processing, and completed publication requests.
   *
   * @generated from rpc agntcy.dir.routing.v1.PublicationService.ListPublications
   */
  listPublications: {
    methodKind: "server_streaming";
    input: typeof ListPublicationsRequestSchema;
    output: typeof ListPublicationsItemSchema;
  },
  /**
   * GetPublication retrieves details of a specific publication request by its identifier.
   * This includes the current status and any associated metadata.
   *
   * @generated from rpc agntcy.dir.routing.v1.PublicationService.GetPublication
   */
  getPublication: {
    methodKind: "unary";
    input: typeof GetPublicationRequestSchema;
    output: typeof GetPublicationResponseSchema;
  },
}>;

