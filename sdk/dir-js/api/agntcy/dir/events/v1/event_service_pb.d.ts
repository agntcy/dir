// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file agntcy/dir/events/v1/event_service.proto (package agntcy.dir.events.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file agntcy/dir/events/v1/event_service.proto.
 */
export declare const file_agntcy_dir_events_v1_event_service: GenFile;

/**
 * ListenRequest specifies filters for event subscription.
 *
 * @generated from message agntcy.dir.events.v1.ListenRequest
 */
export declare type ListenRequest = Message<"agntcy.dir.events.v1.ListenRequest"> & {
  /**
   * Event types to subscribe to.
   * If empty, subscribes to all event types.
   *
   * @generated from field: repeated agntcy.dir.events.v1.EventType event_types = 1;
   */
  eventTypes: EventType[];

  /**
   * Optional label filters (e.g., "/skills/AI", "/domains/research").
   * Only events for records matching these labels are delivered.
   * Uses substring matching.
   *
   * @generated from field: repeated string label_filters = 2;
   */
  labelFilters: string[];

  /**
   * Optional CID filters.
   * Only events for specific CIDs are delivered.
   *
   * @generated from field: repeated string cid_filters = 3;
   */
  cidFilters: string[];
};

/**
 * Describes the message agntcy.dir.events.v1.ListenRequest.
 * Use `create(ListenRequestSchema)` to create a new message.
 */
export declare const ListenRequestSchema: GenMessage<ListenRequest>;

/**
 * ListenResponse is the response message for the Listen RPC.
 * Wraps the Event message to allow for future extensions without breaking the Event structure.
 *
 * @generated from message agntcy.dir.events.v1.ListenResponse
 */
export declare type ListenResponse = Message<"agntcy.dir.events.v1.ListenResponse"> & {
  /**
   * The event that occurred.
   *
   * @generated from field: agntcy.dir.events.v1.Event event = 1;
   */
  event?: Event;
};

/**
 * Describes the message agntcy.dir.events.v1.ListenResponse.
 * Use `create(ListenResponseSchema)` to create a new message.
 */
export declare const ListenResponseSchema: GenMessage<ListenResponse>;

/**
 * Event represents a system event that occurred.
 *
 * @generated from message agntcy.dir.events.v1.Event
 */
export declare type Event = Message<"agntcy.dir.events.v1.Event"> & {
  /**
   * Unique event identifier (generated by the system).
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Type of event that occurred.
   *
   * @generated from field: agntcy.dir.events.v1.EventType type = 2;
   */
  type: EventType;

  /**
   * When the event occurred.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 3;
   */
  timestamp?: Timestamp;

  /**
   * Resource identifier (CID for records, sync_id for syncs, etc.).
   *
   * @generated from field: string resource_id = 4;
   */
  resourceId: string;

  /**
   * Optional labels associated with the record (for record events).
   *
   * @generated from field: repeated string labels = 5;
   */
  labels: string[];

  /**
   * Optional metadata for additional context.
   * Used for flexible event-specific data that doesn't fit standard fields.
   *
   * @generated from field: map<string, string> metadata = 7;
   */
  metadata: { [key: string]: string };
};

/**
 * Describes the message agntcy.dir.events.v1.Event.
 * Use `create(EventSchema)` to create a new message.
 */
export declare const EventSchema: GenMessage<Event>;

/**
 * EventType represents all valid event types in the system.
 * Each value represents a specific operation that can occur.
 *
 * Supported Events:
 * - Store: RECORD_PUSHED, RECORD_PULLED, RECORD_DELETED
 * - Routing: RECORD_PUBLISHED, RECORD_UNPUBLISHED
 * - Sync: SYNC_CREATED, SYNC_COMPLETED, SYNC_FAILED
 * - Sign: RECORD_SIGNED
 *
 * @generated from enum agntcy.dir.events.v1.EventType
 */
export enum EventType {
  /**
   * Unknown/unspecified event type.
   *
   * @generated from enum value: EVENT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * A record was pushed to local storage.
   *
   * @generated from enum value: EVENT_TYPE_RECORD_PUSHED = 1;
   */
  RECORD_PUSHED = 1,

  /**
   * A record was pulled from storage.
   *
   * @generated from enum value: EVENT_TYPE_RECORD_PULLED = 2;
   */
  RECORD_PULLED = 2,

  /**
   * A record was deleted from storage.
   *
   * @generated from enum value: EVENT_TYPE_RECORD_DELETED = 3;
   */
  RECORD_DELETED = 3,

  /**
   * A record was published/announced to the network.
   *
   * @generated from enum value: EVENT_TYPE_RECORD_PUBLISHED = 4;
   */
  RECORD_PUBLISHED = 4,

  /**
   * A record was unpublished from the network.
   *
   * @generated from enum value: EVENT_TYPE_RECORD_UNPUBLISHED = 5;
   */
  RECORD_UNPUBLISHED = 5,

  /**
   * A sync operation was created/initiated.
   *
   * @generated from enum value: EVENT_TYPE_SYNC_CREATED = 6;
   */
  SYNC_CREATED = 6,

  /**
   * A sync operation completed successfully.
   *
   * @generated from enum value: EVENT_TYPE_SYNC_COMPLETED = 7;
   */
  SYNC_COMPLETED = 7,

  /**
   * A sync operation failed.
   *
   * @generated from enum value: EVENT_TYPE_SYNC_FAILED = 8;
   */
  SYNC_FAILED = 8,

  /**
   * A record was signed.
   *
   * @generated from enum value: EVENT_TYPE_RECORD_SIGNED = 9;
   */
  RECORD_SIGNED = 9,
}

/**
 * Describes the enum agntcy.dir.events.v1.EventType.
 */
export declare const EventTypeSchema: GenEnum<EventType>;

/**
 * EventService provides real-time event streaming for all system operations.
 * Events are delivered from subscription time forward with no history or replay.
 * This service enables external applications to react to system changes in real-time.
 *
 * @generated from service agntcy.dir.events.v1.EventService
 */
export declare const EventService: GenService<{
  /**
   * Listen establishes a streaming connection to receive events.
   * Events are only delivered while the stream is active.
   * On disconnect, missed events are not recoverable.
   *
   * @generated from rpc agntcy.dir.events.v1.EventService.Listen
   */
  listen: {
    methodKind: "server_streaming";
    input: typeof ListenRequestSchema;
    output: typeof ListenResponseSchema;
  },
}>;

