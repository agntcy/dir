// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

// @generated by protoc-gen-es v2.9.0 with parameter "import_extension=js"
// @generated from file agntcy/dir/store/v1/store_service.proto (package agntcy.dir.store.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { RecordMetaSchema, RecordRef, RecordReferrer, RecordRefSchema, RecordSchema } from "../../core/v1/record_pb.js";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file agntcy/dir/store/v1/store_service.proto.
 */
export declare const file_agntcy_dir_store_v1_store_service: GenFile;

/**
 * PushReferrerRequest represents a record with optional OCI artifacts for push operations.
 *
 * @generated from message agntcy.dir.store.v1.PushReferrerRequest
 */
export declare type PushReferrerRequest = Message<"agntcy.dir.store.v1.PushReferrerRequest"> & {
  /**
   * Record reference
   *
   * @generated from field: agntcy.dir.core.v1.RecordRef record_ref = 1;
   */
  recordRef?: RecordRef;

  /**
   * RecordReferrer object to be stored for the record
   *
   * @generated from field: agntcy.dir.core.v1.RecordReferrer referrer = 2;
   */
  referrer?: RecordReferrer;
};

/**
 * Describes the message agntcy.dir.store.v1.PushReferrerRequest.
 * Use `create(PushReferrerRequestSchema)` to create a new message.
 */
export declare const PushReferrerRequestSchema: GenMessage<PushReferrerRequest>;

/**
 * PushReferrerResponse
 *
 * @generated from message agntcy.dir.store.v1.PushReferrerResponse
 */
export declare type PushReferrerResponse = Message<"agntcy.dir.store.v1.PushReferrerResponse"> & {
  /**
   * The push process result
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * Optional error message if push failed
   *
   * @generated from field: optional string error_message = 2;
   */
  errorMessage?: string;
};

/**
 * Describes the message agntcy.dir.store.v1.PushReferrerResponse.
 * Use `create(PushReferrerResponseSchema)` to create a new message.
 */
export declare const PushReferrerResponseSchema: GenMessage<PushReferrerResponse>;

/**
 * PullReferrerRequest represents a record with optional OCI artifacts for pull operations.
 *
 * @generated from message agntcy.dir.store.v1.PullReferrerRequest
 */
export declare type PullReferrerRequest = Message<"agntcy.dir.store.v1.PullReferrerRequest"> & {
  /**
   * Record reference
   *
   * @generated from field: agntcy.dir.core.v1.RecordRef record_ref = 1;
   */
  recordRef?: RecordRef;

  /**
   * Record referrer type to be pulled
   * If not provided, all referrers will be pulled
   *
   * @generated from field: optional string referrer_type = 2;
   */
  referrerType?: string;
};

/**
 * Describes the message agntcy.dir.store.v1.PullReferrerRequest.
 * Use `create(PullReferrerRequestSchema)` to create a new message.
 */
export declare const PullReferrerRequestSchema: GenMessage<PullReferrerRequest>;

/**
 * PullReferrerResponse is returned after successfully fetching a record referrer.
 *
 * @generated from message agntcy.dir.store.v1.PullReferrerResponse
 */
export declare type PullReferrerResponse = Message<"agntcy.dir.store.v1.PullReferrerResponse"> & {
  /**
   * RecordReferrer object associated with the record
   *
   * @generated from field: agntcy.dir.core.v1.RecordReferrer referrer = 1;
   */
  referrer?: RecordReferrer;
};

/**
 * Describes the message agntcy.dir.store.v1.PullReferrerResponse.
 * Use `create(PullReferrerResponseSchema)` to create a new message.
 */
export declare const PullReferrerResponseSchema: GenMessage<PullReferrerResponse>;

/**
 * Defines an interface for content-addressable storage
 * service for objects.
 *
 * Max object size: 4MB (to fully fit in a single request)
 * Max metadata size: 100KB
 *
 * Store service can be implemented by various storage backends,
 * such as local file system, OCI registry, etc.
 *
 * Middleware should be used to control who can perform these RPCs.
 * Policies for the middleware can be handled via separate service.
 *
 * Each operation is performed sequentially, meaning that
 * for the N-th request, N-th response will be returned.
 * If an error occurs, the stream will be cancelled.
 *
 * @generated from service agntcy.dir.store.v1.StoreService
 */
export declare const StoreService: GenService<{
  /**
   * Push performs write operation for given records.
   *
   * @generated from rpc agntcy.dir.store.v1.StoreService.Push
   */
  push: {
    methodKind: "bidi_streaming";
    input: typeof RecordSchema;
    output: typeof RecordRefSchema;
  },
  /**
   * Pull performs read operation for given records.
   *
   * @generated from rpc agntcy.dir.store.v1.StoreService.Pull
   */
  pull: {
    methodKind: "bidi_streaming";
    input: typeof RecordRefSchema;
    output: typeof RecordSchema;
  },
  /**
   * Lookup resolves basic metadata for the records.
   *
   * @generated from rpc agntcy.dir.store.v1.StoreService.Lookup
   */
  lookup: {
    methodKind: "bidi_streaming";
    input: typeof RecordRefSchema;
    output: typeof RecordMetaSchema;
  },
  /**
   * Remove performs delete operation for the records.
   *
   * @generated from rpc agntcy.dir.store.v1.StoreService.Delete
   */
  delete: {
    methodKind: "client_streaming";
    input: typeof RecordRefSchema;
    output: typeof EmptySchema;
  },
  /**
   * PushReferrer performs write operation for record referrers.
   *
   * @generated from rpc agntcy.dir.store.v1.StoreService.PushReferrer
   */
  pushReferrer: {
    methodKind: "bidi_streaming";
    input: typeof PushReferrerRequestSchema;
    output: typeof PushReferrerResponseSchema;
  },
  /**
   * PullReferrer performs read operation for record referrers.
   *
   * @generated from rpc agntcy.dir.store.v1.StoreService.PullReferrer
   */
  pullReferrer: {
    methodKind: "bidi_streaming";
    input: typeof PullReferrerRequestSchema;
    output: typeof PullReferrerResponseSchema;
  },
}>;

