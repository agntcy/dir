// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "search/v1/search_service.proto" (package "search.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RecordQuery } from "./record_query";
/**
 * @generated from protobuf message search.v1.SearchRequest
 */
export interface SearchRequest {
    /**
     * List of queries to match against the records.
     *
     * @generated from protobuf field: repeated search.v1.RecordQuery queries = 1
     */
    queries: RecordQuery[];
    /**
     * Optional limit on the number of results to return.
     *
     * @generated from protobuf field: optional uint32 limit = 2
     */
    limit?: number;
    /**
     * Optional offset for pagination of results.
     *
     * @generated from protobuf field: optional uint32 offset = 3
     */
    offset?: number;
}
/**
 * @generated from protobuf message search.v1.SearchResponse
 */
export interface SearchResponse {
    /**
     * The CID of the record that matches the search criteria.
     *
     * @generated from protobuf field: string record_cid = 1
     */
    recordCid: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
    constructor() {
        super("search.v1.SearchRequest", [
            { no: 1, name: "queries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RecordQuery },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "offset", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchRequest>): SearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queries = [];
        if (value !== undefined)
            reflectionMergePartial<SearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchRequest): SearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated search.v1.RecordQuery queries */ 1:
                    message.queries.push(RecordQuery.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 limit */ 2:
                    message.limit = reader.uint32();
                    break;
                case /* optional uint32 offset */ 3:
                    message.offset = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated search.v1.RecordQuery queries = 1; */
        for (let i = 0; i < message.queries.length; i++)
            RecordQuery.internalBinaryWrite(message.queries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.limit);
        /* optional uint32 offset = 3; */
        if (message.offset !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.v1.SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchResponse$Type extends MessageType<SearchResponse> {
    constructor() {
        super("search.v1.SearchResponse", [
            { no: 1, name: "record_cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchResponse>): SearchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.recordCid = "";
        if (value !== undefined)
            reflectionMergePartial<SearchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchResponse): SearchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string record_cid */ 1:
                    message.recordCid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string record_cid = 1; */
        if (message.recordCid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.recordCid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.v1.SearchResponse
 */
export const SearchResponse = new SearchResponse$Type();
/**
 * @generated ServiceType for protobuf service search.v1.SearchService
 */
export const SearchService = new ServiceType("search.v1.SearchService", [
    { name: "Search", serverStreaming: true, options: {}, I: SearchRequest, O: SearchResponse }
]);
