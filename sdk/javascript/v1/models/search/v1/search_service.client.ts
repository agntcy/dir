// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "search/v1/search_service.proto" (package "search.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SearchService } from "./search_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SearchResponse } from "./search_service";
import type { SearchRequest } from "./search_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service search.v1.SearchService
 */
export interface ISearchServiceClient {
    /**
     * List records that this peer is currently providing that match the given parameters.
     * This operation does not interact with the network.
     *
     * @generated from protobuf rpc: Search
     */
    search(input: SearchRequest, options?: RpcOptions): ServerStreamingCall<SearchRequest, SearchResponse>;
}
/**
 * @generated from protobuf service search.v1.SearchService
 */
export class SearchServiceClient implements ISearchServiceClient, ServiceInfo {
    typeName = SearchService.typeName;
    methods = SearchService.methods;
    options = SearchService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * List records that this peer is currently providing that match the given parameters.
     * This operation does not interact with the network.
     *
     * @generated from protobuf rpc: Search
     */
    search(input: SearchRequest, options?: RpcOptions): ServerStreamingCall<SearchRequest, SearchResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchRequest, SearchResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
