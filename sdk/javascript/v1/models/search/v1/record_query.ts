// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "search/v1/record_query.proto" (package "search.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A query to match the record against during discovery.
 * For example:
 *  { type: RECORD_QUERY_TYPE_SKILL_NAME, value: "Natural Language Processing" }
 *  { type: RECORD_QUERY_TYPE_LOCATOR, value: "docker-image:https://example.com/docker-image" }
 *
 * @generated from protobuf message search.v1.RecordQuery
 */
export interface RecordQuery {
    /**
     * The type of the query to match against.
     *
     * @generated from protobuf field: search.v1.RecordQueryType type = 1
     */
    type: RecordQueryType;
    /**
     * The query value to match against.
     *
     * @generated from protobuf field: string value = 2
     */
    value: string;
}
/**
 * Defines a list of supported record query types.
 *
 * @generated from protobuf enum search.v1.RecordQueryType
 */
export enum RecordQueryType {
    /**
     * Unspecified query type.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Query for a record name.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_NAME = 1;
     */
    NAME = 1,
    /**
     * Query for a record version.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_VERSION = 2;
     */
    VERSION = 2,
    /**
     * Query for a skill ID.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_SKILL_ID = 3;
     */
    SKILL_ID = 3,
    /**
     * Query for a skill name.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_SKILL_NAME = 4;
     */
    SKILL_NAME = 4,
    /**
     * Query for a locator type.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_LOCATOR = 5;
     */
    LOCATOR = 5,
    /**
     * Query for an extension.
     *
     * @generated from protobuf enum value: RECORD_QUERY_TYPE_EXTENSION = 6;
     */
    EXTENSION = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class RecordQuery$Type extends MessageType<RecordQuery> {
    constructor() {
        super("search.v1.RecordQuery", [
            { no: 1, name: "type", kind: "enum", T: () => ["search.v1.RecordQueryType", RecordQueryType, "RECORD_QUERY_TYPE_"] },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecordQuery>): RecordQuery {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<RecordQuery>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordQuery): RecordQuery {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* search.v1.RecordQueryType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* search.v1.RecordQueryType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message search.v1.RecordQuery
 */
export const RecordQuery = new RecordQuery$Type();
