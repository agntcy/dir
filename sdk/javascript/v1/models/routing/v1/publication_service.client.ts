// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "routing/v1/publication_service.proto" (package "routing.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PublicationService } from "./publication_service";
import type { GetPublicationResponse } from "./publication_service";
import type { GetPublicationRequest } from "./publication_service";
import type { ListPublicationsItem } from "./publication_service";
import type { ListPublicationsRequest } from "./publication_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreatePublicationResponse } from "./publication_service";
import type { PublishRequest } from "./routing_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * PublicationService manages publication requests for announcing records to the DHT.
 *
 * Publications are stored in the database and processed by a worker that runs every hour.
 * The publication workflow:
 * 1. Publications are created via routing's Publish RPC by specifying either a query, a list of CIDs, or all records
 * 2. Publication requests are added to the database
 * 3. PublicationWorker queries the data using the publication request from the database to get the list of CIDs to be published
 * 4. PublicationWorker announces the records with these CIDs to the DHT
 *
 * @generated from protobuf service routing.v1.PublicationService
 */
export interface IPublicationServiceClient {
    /**
     * CreatePublication creates a new publication request that will be processed by the PublicationWorker.
     * The publication request can specify either a query, a list of specific CIDs, or all records to be announced to the DHT.
     *
     * @generated from protobuf rpc: CreatePublication
     */
    createPublication(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, CreatePublicationResponse>;
    /**
     * ListPublications returns a stream of all publication requests in the system.
     * This allows monitoring of pending, processing, and completed publication requests.
     *
     * @generated from protobuf rpc: ListPublications
     */
    listPublications(input: ListPublicationsRequest, options?: RpcOptions): ServerStreamingCall<ListPublicationsRequest, ListPublicationsItem>;
    /**
     * GetPublication retrieves details of a specific publication request by its identifier.
     * This includes the current status and any associated metadata.
     *
     * @generated from protobuf rpc: GetPublication
     */
    getPublication(input: GetPublicationRequest, options?: RpcOptions): UnaryCall<GetPublicationRequest, GetPublicationResponse>;
}
/**
 * PublicationService manages publication requests for announcing records to the DHT.
 *
 * Publications are stored in the database and processed by a worker that runs every hour.
 * The publication workflow:
 * 1. Publications are created via routing's Publish RPC by specifying either a query, a list of CIDs, or all records
 * 2. Publication requests are added to the database
 * 3. PublicationWorker queries the data using the publication request from the database to get the list of CIDs to be published
 * 4. PublicationWorker announces the records with these CIDs to the DHT
 *
 * @generated from protobuf service routing.v1.PublicationService
 */
export class PublicationServiceClient implements IPublicationServiceClient, ServiceInfo {
    typeName = PublicationService.typeName;
    methods = PublicationService.methods;
    options = PublicationService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CreatePublication creates a new publication request that will be processed by the PublicationWorker.
     * The publication request can specify either a query, a list of specific CIDs, or all records to be announced to the DHT.
     *
     * @generated from protobuf rpc: CreatePublication
     */
    createPublication(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, CreatePublicationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishRequest, CreatePublicationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListPublications returns a stream of all publication requests in the system.
     * This allows monitoring of pending, processing, and completed publication requests.
     *
     * @generated from protobuf rpc: ListPublications
     */
    listPublications(input: ListPublicationsRequest, options?: RpcOptions): ServerStreamingCall<ListPublicationsRequest, ListPublicationsItem> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListPublicationsRequest, ListPublicationsItem>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetPublication retrieves details of a specific publication request by its identifier.
     * This includes the current status and any associated metadata.
     *
     * @generated from protobuf rpc: GetPublication
     */
    getPublication(input: GetPublicationRequest, options?: RpcOptions): UnaryCall<GetPublicationRequest, GetPublicationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPublicationRequest, GetPublicationResponse>("unary", this._transport, method, opt, input);
    }
}
