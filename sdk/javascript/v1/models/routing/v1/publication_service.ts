// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "routing/v1/publication_service.proto" (package "routing.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import { PublishRequest } from "./routing_service";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * CreatePublicationResponse returns the result of creating a publication request.
 * This includes the publication ID and any relevant metadata.
 *
 * @generated from protobuf message routing.v1.CreatePublicationResponse
 */
export interface CreatePublicationResponse {
    /**
     * Unique identifier of the publication operation.
     *
     * @generated from protobuf field: string publication_id = 1
     */
    publicationId: string;
}
/**
 * ListPublicationsRequest contains optional filters for listing publication requests.
 *
 * @generated from protobuf message routing.v1.ListPublicationsRequest
 */
export interface ListPublicationsRequest {
    /**
     * Optional limit on the number of results to return.
     *
     * @generated from protobuf field: optional uint32 limit = 2
     */
    limit?: number;
    /**
     * Optional offset for pagination of results.
     *
     * @generated from protobuf field: optional uint32 offset = 3
     */
    offset?: number;
}
/**
 * ListPublicationsItem represents a single publication request in the list response.
 * Contains publication details including ID, status, and creation timestamp.
 *
 * @generated from protobuf message routing.v1.ListPublicationsItem
 */
export interface ListPublicationsItem {
    /**
     * Unique identifier of the publication operation.
     *
     * @generated from protobuf field: string publication_id = 1
     */
    publicationId: string;
    /**
     * Current status of the publication operation.
     *
     * @generated from protobuf field: routing.v1.PublicationStatus status = 2
     */
    status: PublicationStatus;
    /**
     * Timestamp when the publication operation was created in the RFC3339 format.
     * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
     *
     * @generated from protobuf field: string created_time = 3
     */
    createdTime: string;
    /**
     * Timestamp of the most recent status update for this publication in the RFC3339 format.
     *
     * @generated from protobuf field: string last_update_time = 4
     */
    lastUpdateTime: string;
}
/**
 * GetPublicationRequest specifies which publication to retrieve by its identifier.
 *
 * @generated from protobuf message routing.v1.GetPublicationRequest
 */
export interface GetPublicationRequest {
    /**
     * Unique identifier of the publication operation to query.
     *
     * @generated from protobuf field: string publication_id = 1
     */
    publicationId: string;
}
/**
 * GetPublicationResponse contains the full details of a specific publication request.
 * Includes status, progress information, and any error details if applicable.
 *
 * @generated from protobuf message routing.v1.GetPublicationResponse
 */
export interface GetPublicationResponse {
    /**
     * Unique identifier of the publication operation.
     *
     * @generated from protobuf field: string publication_id = 1
     */
    publicationId: string;
    /**
     * Current status of the publication operation.
     *
     * @generated from protobuf field: routing.v1.PublicationStatus status = 2
     */
    status: PublicationStatus;
    /**
     * Timestamp when the publication operation was created in the RFC3339 format.
     * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
     *
     * @generated from protobuf field: string created_time = 3
     */
    createdTime: string;
    /**
     * Timestamp of the most recent status update for this publication in the RFC3339 format.
     *
     * @generated from protobuf field: string last_update_time = 4
     */
    lastUpdateTime: string;
}
/**
 * PublicationStatus represents the current state of a publication request.
 * Publications progress from pending to processing to completed or failed states.
 *
 * @generated from protobuf enum routing.v1.PublicationStatus
 */
export enum PublicationStatus {
    /**
     * Default/unset status - should not be used in practice
     *
     * @generated from protobuf enum value: PUBLICATION_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Sync operation has been created but not yet started
     *
     * @generated from protobuf enum value: PUBLICATION_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * Sync operation is actively discovering and transferring objects
     *
     * @generated from protobuf enum value: PUBLICATION_STATUS_IN_PROGRESS = 2;
     */
    IN_PROGRESS = 2,
    /**
     * Sync operation has been successfully completed
     *
     * @generated from protobuf enum value: PUBLICATION_STATUS_COMPLETED = 3;
     */
    COMPLETED = 3,
    /**
     * Sync operation encountered an error and stopped
     *
     * @generated from protobuf enum value: PUBLICATION_STATUS_FAILED = 4;
     */
    FAILED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class CreatePublicationResponse$Type extends MessageType<CreatePublicationResponse> {
    constructor() {
        super("routing.v1.CreatePublicationResponse", [
            { no: 1, name: "publication_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreatePublicationResponse>): CreatePublicationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicationId = "";
        if (value !== undefined)
            reflectionMergePartial<CreatePublicationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePublicationResponse): CreatePublicationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string publication_id */ 1:
                    message.publicationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePublicationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string publication_id = 1; */
        if (message.publicationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message routing.v1.CreatePublicationResponse
 */
export const CreatePublicationResponse = new CreatePublicationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPublicationsRequest$Type extends MessageType<ListPublicationsRequest> {
    constructor() {
        super("routing.v1.ListPublicationsRequest", [
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "offset", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListPublicationsRequest>): ListPublicationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListPublicationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPublicationsRequest): ListPublicationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 limit */ 2:
                    message.limit = reader.uint32();
                    break;
                case /* optional uint32 offset */ 3:
                    message.offset = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPublicationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.limit);
        /* optional uint32 offset = 3; */
        if (message.offset !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message routing.v1.ListPublicationsRequest
 */
export const ListPublicationsRequest = new ListPublicationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPublicationsItem$Type extends MessageType<ListPublicationsItem> {
    constructor() {
        super("routing.v1.ListPublicationsItem", [
            { no: 1, name: "publication_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["routing.v1.PublicationStatus", PublicationStatus, "PUBLICATION_STATUS_"] },
            { no: 3, name: "created_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_update_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListPublicationsItem>): ListPublicationsItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicationId = "";
        message.status = 0;
        message.createdTime = "";
        message.lastUpdateTime = "";
        if (value !== undefined)
            reflectionMergePartial<ListPublicationsItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPublicationsItem): ListPublicationsItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string publication_id */ 1:
                    message.publicationId = reader.string();
                    break;
                case /* routing.v1.PublicationStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string created_time */ 3:
                    message.createdTime = reader.string();
                    break;
                case /* string last_update_time */ 4:
                    message.lastUpdateTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPublicationsItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string publication_id = 1; */
        if (message.publicationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicationId);
        /* routing.v1.PublicationStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string created_time = 3; */
        if (message.createdTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdTime);
        /* string last_update_time = 4; */
        if (message.lastUpdateTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastUpdateTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message routing.v1.ListPublicationsItem
 */
export const ListPublicationsItem = new ListPublicationsItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPublicationRequest$Type extends MessageType<GetPublicationRequest> {
    constructor() {
        super("routing.v1.GetPublicationRequest", [
            { no: 1, name: "publication_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPublicationRequest>): GetPublicationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicationId = "";
        if (value !== undefined)
            reflectionMergePartial<GetPublicationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPublicationRequest): GetPublicationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string publication_id */ 1:
                    message.publicationId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPublicationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string publication_id = 1; */
        if (message.publicationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message routing.v1.GetPublicationRequest
 */
export const GetPublicationRequest = new GetPublicationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPublicationResponse$Type extends MessageType<GetPublicationResponse> {
    constructor() {
        super("routing.v1.GetPublicationResponse", [
            { no: 1, name: "publication_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["routing.v1.PublicationStatus", PublicationStatus, "PUBLICATION_STATUS_"] },
            { no: 3, name: "created_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "last_update_time", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPublicationResponse>): GetPublicationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicationId = "";
        message.status = 0;
        message.createdTime = "";
        message.lastUpdateTime = "";
        if (value !== undefined)
            reflectionMergePartial<GetPublicationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPublicationResponse): GetPublicationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string publication_id */ 1:
                    message.publicationId = reader.string();
                    break;
                case /* routing.v1.PublicationStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* string created_time */ 3:
                    message.createdTime = reader.string();
                    break;
                case /* string last_update_time */ 4:
                    message.lastUpdateTime = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPublicationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string publication_id = 1; */
        if (message.publicationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicationId);
        /* routing.v1.PublicationStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* string created_time = 3; */
        if (message.createdTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdTime);
        /* string last_update_time = 4; */
        if (message.lastUpdateTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.lastUpdateTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message routing.v1.GetPublicationResponse
 */
export const GetPublicationResponse = new GetPublicationResponse$Type();
/**
 * @generated ServiceType for protobuf service routing.v1.PublicationService
 */
export const PublicationService = new ServiceType("routing.v1.PublicationService", [
    { name: "CreatePublication", options: {}, I: PublishRequest, O: CreatePublicationResponse },
    { name: "ListPublications", serverStreaming: true, options: {}, I: ListPublicationsRequest, O: ListPublicationsItem },
    { name: "GetPublication", options: {}, I: GetPublicationRequest, O: GetPublicationResponse }
]);
