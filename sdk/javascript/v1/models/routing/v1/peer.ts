// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "routing/v1/peer.proto" (package "routing.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message routing.v1.Peer
 */
export interface Peer {
    /**
     * ID of a given peer, typically described by a protocol.
     * For example:
     *  - SPIFFE:   "spiffe://example.org/service/foo"
     *  - JWT:      "jwt:sub=alice,iss=https://issuer.example.com"
     *  - Tor:      "onion:abcdefghijklmno.onion"
     *  - DID:      "did:example:123456789abcdefghi"
     *  - IPFS:     "ipfs:QmYwAPJzv5CZsnAzt8auVZRn2E6sD1c4x8pN5o6d5cW4D5"
     *
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * Multiaddrs for a given peer.
     * For example:
     * - "/ip4/127.0.0.1/tcp/4001"
     * - "/ip6/::1/tcp/4001"
     * - "/dns4/example.com/tcp/443/https"
     *
     * @generated from protobuf field: repeated string addrs = 2
     */
    addrs: string[];
    /**
     * Additional metadata about the peer.
     *
     * @generated from protobuf field: map<string, string> annotations = 3
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * Used to signal the sender's connection capabilities to the peer.
     *
     * @generated from protobuf field: routing.v1.PeerConnectionType connection = 4
     */
    connection: PeerConnectionType;
}
/**
 * @generated from protobuf enum routing.v1.PeerConnectionType
 */
export enum PeerConnectionType {
    /**
     * Sender does not have a connection to peer, and no extra information (default)
     *
     * @generated from protobuf enum value: PEER_CONNECTION_TYPE_NOT_CONNECTED = 0;
     */
    NOT_CONNECTED = 0,
    /**
     * Sender has a live connection to peer.
     *
     * @generated from protobuf enum value: PEER_CONNECTION_TYPE_CONNECTED = 1;
     */
    CONNECTED = 1,
    /**
     * Sender recently connected to peer.
     *
     * @generated from protobuf enum value: PEER_CONNECTION_TYPE_CAN_CONNECT = 2;
     */
    CAN_CONNECT = 2,
    /**
     * Sender made strong effort to connect to peer repeatedly but failed.
     *
     * @generated from protobuf enum value: PEER_CONNECTION_TYPE_CANNOT_CONNECT = 3;
     */
    CANNOT_CONNECT = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Peer$Type extends MessageType<Peer> {
    constructor() {
        super("routing.v1.Peer", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "addrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 4, name: "connection", kind: "enum", T: () => ["routing.v1.PeerConnectionType", PeerConnectionType, "PEER_CONNECTION_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<Peer>): Peer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.addrs = [];
        message.annotations = {};
        message.connection = 0;
        if (value !== undefined)
            reflectionMergePartial<Peer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Peer): Peer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* repeated string addrs */ 2:
                    message.addrs.push(reader.string());
                    break;
                case /* map<string, string> annotations */ 3:
                    this.binaryReadMap3(message.annotations, reader, options);
                    break;
                case /* routing.v1.PeerConnectionType connection */ 4:
                    message.connection = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Peer["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Peer["annotations"] | undefined, val: Peer["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for routing.v1.Peer.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Peer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* repeated string addrs = 2; */
        for (let i = 0; i < message.addrs.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.addrs[i]);
        /* map<string, string> annotations = 3; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* routing.v1.PeerConnectionType connection = 4; */
        if (message.connection !== 0)
            writer.tag(4, WireType.Varint).int32(message.connection);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message routing.v1.Peer
 */
export const Peer = new Peer$Type();
