// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "routing/v1/routing_service.proto" (package "routing.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RoutingService } from "./routing_service";
import type { ListResponse } from "./routing_service";
import type { ListRequest } from "./routing_service";
import type { SearchResponse } from "./routing_service";
import type { SearchRequest } from "./routing_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { UnpublishRequest } from "./routing_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../../google/protobuf/empty";
import type { PublishRequest } from "./routing_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Defines an interface for announcement and discovery
 * of records across interconnected network.
 *
 * Middleware should be used to control who can perform these RPCs.
 * Policies for the middleware can be handled via separate service.
 *
 * @generated from protobuf service routing.v1.RoutingService
 */
export interface IRoutingServiceClient {
    /**
     * Announce to the network that this peer is providing a given record.
     * This enables other peers to discover this record and retrieve it
     * from this peer. Listeners can use this event to perform custom operations,
     * for example by cloning the record.
     *
     * Items need to be periodically republished (eg. 24h) to the network
     * to avoid stale data. Republication should be done in the background.
     *
     * @generated from protobuf rpc: Publish
     */
    publish(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, Empty>;
    /**
     * Stop serving this record to the network. If other peers try
     * to retrieve this record, the peer will refuse the request.
     *
     * @generated from protobuf rpc: Unpublish
     */
    unpublish(input: UnpublishRequest, options?: RpcOptions): UnaryCall<UnpublishRequest, Empty>;
    /**
     * Search records based on the request across the network.
     * This will search the network for the record with the given parameters.
     *
     * It is possible that the records are stale or that they do not exist.
     * Some records may be provided by multiple peers.
     *
     * Results from the search can be used as an input
     * to Pull operation to retrieve the records.
     *
     * @generated from protobuf rpc: Search
     */
    search(input: SearchRequest, options?: RpcOptions): ServerStreamingCall<SearchRequest, SearchResponse>;
    /**
     * List all records that this peer is currently providing
     * that match the given parameters.
     * This operation does not interact with the network.
     *
     * @generated from protobuf rpc: List
     */
    list(input: ListRequest, options?: RpcOptions): ServerStreamingCall<ListRequest, ListResponse>;
}
/**
 * Defines an interface for announcement and discovery
 * of records across interconnected network.
 *
 * Middleware should be used to control who can perform these RPCs.
 * Policies for the middleware can be handled via separate service.
 *
 * @generated from protobuf service routing.v1.RoutingService
 */
export class RoutingServiceClient implements IRoutingServiceClient, ServiceInfo {
    typeName = RoutingService.typeName;
    methods = RoutingService.methods;
    options = RoutingService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Announce to the network that this peer is providing a given record.
     * This enables other peers to discover this record and retrieve it
     * from this peer. Listeners can use this event to perform custom operations,
     * for example by cloning the record.
     *
     * Items need to be periodically republished (eg. 24h) to the network
     * to avoid stale data. Republication should be done in the background.
     *
     * @generated from protobuf rpc: Publish
     */
    publish(input: PublishRequest, options?: RpcOptions): UnaryCall<PublishRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PublishRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Stop serving this record to the network. If other peers try
     * to retrieve this record, the peer will refuse the request.
     *
     * @generated from protobuf rpc: Unpublish
     */
    unpublish(input: UnpublishRequest, options?: RpcOptions): UnaryCall<UnpublishRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnpublishRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Search records based on the request across the network.
     * This will search the network for the record with the given parameters.
     *
     * It is possible that the records are stale or that they do not exist.
     * Some records may be provided by multiple peers.
     *
     * Results from the search can be used as an input
     * to Pull operation to retrieve the records.
     *
     * @generated from protobuf rpc: Search
     */
    search(input: SearchRequest, options?: RpcOptions): ServerStreamingCall<SearchRequest, SearchResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchRequest, SearchResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * List all records that this peer is currently providing
     * that match the given parameters.
     * This operation does not interact with the network.
     *
     * @generated from protobuf rpc: List
     */
    list(input: ListRequest, options?: RpcOptions): ServerStreamingCall<ListRequest, ListResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListRequest, ListResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
