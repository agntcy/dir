// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "sign/v1/sign_service.proto" (package "sign.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SignService } from "./sign_service";
import type { VerifyResponse } from "./sign_service";
import type { VerifyRequest } from "./sign_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SignResponse } from "./sign_service";
import type { SignRequest } from "./sign_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service sign.v1.SignService
 */
export interface ISignServiceClient {
    /**
     * Sign record using keyless OIDC based provider or using PEM-encoded private key with an optional passphrase
     *
     * @generated from protobuf rpc: Sign
     */
    sign(input: SignRequest, options?: RpcOptions): UnaryCall<SignRequest, SignResponse>;
    /**
     * Verify signed record using keyless OIDC based provider or using PEM-encoded formatted PEM public key encrypted
     *
     * @generated from protobuf rpc: Verify
     */
    verify(input: VerifyRequest, options?: RpcOptions): UnaryCall<VerifyRequest, VerifyResponse>;
}
/**
 * @generated from protobuf service sign.v1.SignService
 */
export class SignServiceClient implements ISignServiceClient, ServiceInfo {
    typeName = SignService.typeName;
    methods = SignService.methods;
    options = SignService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Sign record using keyless OIDC based provider or using PEM-encoded private key with an optional passphrase
     *
     * @generated from protobuf rpc: Sign
     */
    sign(input: SignRequest, options?: RpcOptions): UnaryCall<SignRequest, SignResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SignRequest, SignResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Verify signed record using keyless OIDC based provider or using PEM-encoded formatted PEM public key encrypted
     *
     * @generated from protobuf rpc: Verify
     */
    verify(input: VerifyRequest, options?: RpcOptions): UnaryCall<VerifyRequest, VerifyResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<VerifyRequest, VerifyResponse>("unary", this._transport, method, opt, input);
    }
}
