// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "sign/v1/sign_service.proto" (package "sign.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RecordRef } from "../../core/v1/record";
/**
 * @generated from protobuf message sign.v1.SignRequest
 */
export interface SignRequest {
    /**
     * Record reference to be signed
     *
     * @generated from protobuf field: core.v1.RecordRef record_ref = 1
     */
    recordRef?: RecordRef;
    /**
     * Signing provider to use
     *
     * @generated from protobuf field: sign.v1.SignRequestProvider provider = 2
     */
    provider?: SignRequestProvider;
}
/**
 * @generated from protobuf message sign.v1.SignRequestProvider
 */
export interface SignRequestProvider {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "oidc";
        /**
         * Sign with OIDC provider
         *
         * @generated from protobuf field: sign.v1.SignWithOIDC oidc = 1
         */
        oidc: SignWithOIDC;
    } | {
        oneofKind: "key";
        /**
         * Sign with PEM-encoded public key
         *
         * @generated from protobuf field: sign.v1.SignWithKey key = 2
         */
        key: SignWithKey;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message sign.v1.SignWithOIDC
 */
export interface SignWithOIDC {
    /**
     * Token for OIDC provider
     *
     * @generated from protobuf field: string id_token = 1
     */
    idToken: string;
    /**
     * Signing options for OIDC
     *
     * @generated from protobuf field: sign.v1.SignWithOIDC.SignOpts options = 2
     */
    options?: SignWithOIDC_SignOpts;
}
/**
 * List of sign options for OIDC
 *
 * @generated from protobuf message sign.v1.SignWithOIDC.SignOpts
 */
export interface SignWithOIDC_SignOpts {
    /**
     * Fulcio authority access URL (default value: https://fulcio.sigstage.dev)
     *
     * @generated from protobuf field: optional string fulcio_url = 1
     */
    fulcioUrl?: string;
    /**
     * Rekor validator access URL (default value: https://rekor.sigstage.dev)
     *
     * @generated from protobuf field: optional string rekor_url = 2
     */
    rekorUrl?: string;
    /**
     * Timestamp authority access URL (default value: https://timestamp.sigstage.dev/api/v1/timestamp)
     *
     * @generated from protobuf field: optional string timestamp_url = 3
     */
    timestampUrl?: string;
    /**
     * OIDC provider access URL (default value: https://oauth2.sigstage.dev/auth)
     *
     * @generated from protobuf field: optional string oidc_provider_url = 4
     */
    oidcProviderUrl?: string;
}
/**
 * @generated from protobuf message sign.v1.SignWithKey
 */
export interface SignWithKey {
    /**
     * Private key used for signing
     *
     * @generated from protobuf field: bytes private_key = 1
     */
    privateKey: Uint8Array;
    /**
     * Password to unlock the private key
     *
     * @generated from protobuf field: optional bytes password = 2
     */
    password?: Uint8Array;
}
/**
 * @generated from protobuf message sign.v1.SignResponse
 */
export interface SignResponse {
    /**
     * Cryptographic signature of the record
     *
     * @generated from protobuf field: sign.v1.Signature signature = 1
     */
    signature?: Signature;
}
/**
 * @generated from protobuf message sign.v1.VerifyRequest
 */
export interface VerifyRequest {
    /**
     * Record reference to be verified
     *
     * @generated from protobuf field: core.v1.RecordRef record_ref = 1
     */
    recordRef?: RecordRef;
}
/**
 * @generated from protobuf message sign.v1.VerifyResponse
 */
export interface VerifyResponse {
    /**
     * The verify process result
     *
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * Optional error message if verification failed
     *
     * @generated from protobuf field: optional string error_message = 2
     */
    errorMessage?: string;
}
/**
 * @generated from protobuf message sign.v1.Signature
 */
export interface Signature {
    /**
     * Metadata associated with the signature.
     *
     * @generated from protobuf field: map<string, string> annotations = 1
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * Signing timestamp of the record in the RFC3339 format.
     * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
     *
     * @generated from protobuf field: string signed_at = 2
     */
    signedAt: string;
    /**
     * The signature algorithm used (e.g., "ECDSA_P256_SHA256").
     *
     * @generated from protobuf field: string algorithm = 3
     */
    algorithm: string;
    /**
     * Base64-encoded signature.
     *
     * @generated from protobuf field: string signature = 4
     */
    signature: string;
    /**
     * Base64-encoded signing certificate.
     *
     * @generated from protobuf field: string certificate = 5
     */
    certificate: string;
    /**
     * Type of the signature content bundle.
     *
     * @generated from protobuf field: string content_type = 6
     */
    contentType: string;
    /**
     * Base64-encoded signature bundle produced by the signer.
     * It is up to the client to interpret the content of the bundle.
     *
     * @generated from protobuf field: string content_bundle = 7
     */
    contentBundle: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SignRequest$Type extends MessageType<SignRequest> {
    constructor() {
        super("sign.v1.SignRequest", [
            { no: 1, name: "record_ref", kind: "message", T: () => RecordRef },
            { no: 2, name: "provider", kind: "message", T: () => SignRequestProvider }
        ]);
    }
    create(value?: PartialMessage<SignRequest>): SignRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SignRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignRequest): SignRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.v1.RecordRef record_ref */ 1:
                    message.recordRef = RecordRef.internalBinaryRead(reader, reader.uint32(), options, message.recordRef);
                    break;
                case /* sign.v1.SignRequestProvider provider */ 2:
                    message.provider = SignRequestProvider.internalBinaryRead(reader, reader.uint32(), options, message.provider);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.v1.RecordRef record_ref = 1; */
        if (message.recordRef)
            RecordRef.internalBinaryWrite(message.recordRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sign.v1.SignRequestProvider provider = 2; */
        if (message.provider)
            SignRequestProvider.internalBinaryWrite(message.provider, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.SignRequest
 */
export const SignRequest = new SignRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignRequestProvider$Type extends MessageType<SignRequestProvider> {
    constructor() {
        super("sign.v1.SignRequestProvider", [
            { no: 1, name: "oidc", kind: "message", oneof: "request", T: () => SignWithOIDC },
            { no: 2, name: "key", kind: "message", oneof: "request", T: () => SignWithKey }
        ]);
    }
    create(value?: PartialMessage<SignRequestProvider>): SignRequestProvider {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SignRequestProvider>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignRequestProvider): SignRequestProvider {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sign.v1.SignWithOIDC oidc */ 1:
                    message.request = {
                        oneofKind: "oidc",
                        oidc: SignWithOIDC.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).oidc)
                    };
                    break;
                case /* sign.v1.SignWithKey key */ 2:
                    message.request = {
                        oneofKind: "key",
                        key: SignWithKey.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).key)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignRequestProvider, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sign.v1.SignWithOIDC oidc = 1; */
        if (message.request.oneofKind === "oidc")
            SignWithOIDC.internalBinaryWrite(message.request.oidc, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sign.v1.SignWithKey key = 2; */
        if (message.request.oneofKind === "key")
            SignWithKey.internalBinaryWrite(message.request.key, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.SignRequestProvider
 */
export const SignRequestProvider = new SignRequestProvider$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignWithOIDC$Type extends MessageType<SignWithOIDC> {
    constructor() {
        super("sign.v1.SignWithOIDC", [
            { no: 1, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "options", kind: "message", T: () => SignWithOIDC_SignOpts }
        ]);
    }
    create(value?: PartialMessage<SignWithOIDC>): SignWithOIDC {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idToken = "";
        if (value !== undefined)
            reflectionMergePartial<SignWithOIDC>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignWithOIDC): SignWithOIDC {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_token */ 1:
                    message.idToken = reader.string();
                    break;
                case /* sign.v1.SignWithOIDC.SignOpts options */ 2:
                    message.options = SignWithOIDC_SignOpts.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignWithOIDC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_token = 1; */
        if (message.idToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idToken);
        /* sign.v1.SignWithOIDC.SignOpts options = 2; */
        if (message.options)
            SignWithOIDC_SignOpts.internalBinaryWrite(message.options, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.SignWithOIDC
 */
export const SignWithOIDC = new SignWithOIDC$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignWithOIDC_SignOpts$Type extends MessageType<SignWithOIDC_SignOpts> {
    constructor() {
        super("sign.v1.SignWithOIDC.SignOpts", [
            { no: 1, name: "fulcio_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "rekor_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "timestamp_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "oidc_provider_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignWithOIDC_SignOpts>): SignWithOIDC_SignOpts {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SignWithOIDC_SignOpts>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignWithOIDC_SignOpts): SignWithOIDC_SignOpts {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string fulcio_url */ 1:
                    message.fulcioUrl = reader.string();
                    break;
                case /* optional string rekor_url */ 2:
                    message.rekorUrl = reader.string();
                    break;
                case /* optional string timestamp_url */ 3:
                    message.timestampUrl = reader.string();
                    break;
                case /* optional string oidc_provider_url */ 4:
                    message.oidcProviderUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignWithOIDC_SignOpts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string fulcio_url = 1; */
        if (message.fulcioUrl !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.fulcioUrl);
        /* optional string rekor_url = 2; */
        if (message.rekorUrl !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.rekorUrl);
        /* optional string timestamp_url = 3; */
        if (message.timestampUrl !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.timestampUrl);
        /* optional string oidc_provider_url = 4; */
        if (message.oidcProviderUrl !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.oidcProviderUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.SignWithOIDC.SignOpts
 */
export const SignWithOIDC_SignOpts = new SignWithOIDC_SignOpts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignWithKey$Type extends MessageType<SignWithKey> {
    constructor() {
        super("sign.v1.SignWithKey", [
            { no: 1, name: "private_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "password", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SignWithKey>): SignWithKey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.privateKey = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<SignWithKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignWithKey): SignWithKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes private_key */ 1:
                    message.privateKey = reader.bytes();
                    break;
                case /* optional bytes password */ 2:
                    message.password = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignWithKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes private_key = 1; */
        if (message.privateKey.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.privateKey);
        /* optional bytes password = 2; */
        if (message.password !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.SignWithKey
 */
export const SignWithKey = new SignWithKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignResponse$Type extends MessageType<SignResponse> {
    constructor() {
        super("sign.v1.SignResponse", [
            { no: 1, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<SignResponse>): SignResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SignResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignResponse): SignResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sign.v1.Signature signature */ 1:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sign.v1.Signature signature = 1; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.SignResponse
 */
export const SignResponse = new SignResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyRequest$Type extends MessageType<VerifyRequest> {
    constructor() {
        super("sign.v1.VerifyRequest", [
            { no: 1, name: "record_ref", kind: "message", T: () => RecordRef }
        ]);
    }
    create(value?: PartialMessage<VerifyRequest>): VerifyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VerifyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyRequest): VerifyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.v1.RecordRef record_ref */ 1:
                    message.recordRef = RecordRef.internalBinaryRead(reader, reader.uint32(), options, message.recordRef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.v1.RecordRef record_ref = 1; */
        if (message.recordRef)
            RecordRef.internalBinaryWrite(message.recordRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.VerifyRequest
 */
export const VerifyRequest = new VerifyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyResponse$Type extends MessageType<VerifyResponse> {
    constructor() {
        super("sign.v1.VerifyResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyResponse>): VerifyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<VerifyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyResponse): VerifyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* optional string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* optional string error_message = 2; */
        if (message.errorMessage !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.VerifyResponse
 */
export const VerifyResponse = new VerifyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("sign.v1.Signature", [
            { no: 1, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "signed_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "algorithm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "certificate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "content_bundle", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Signature>): Signature {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.annotations = {};
        message.signedAt = "";
        message.algorithm = "";
        message.signature = "";
        message.certificate = "";
        message.contentType = "";
        message.contentBundle = "";
        if (value !== undefined)
            reflectionMergePartial<Signature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature): Signature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> annotations */ 1:
                    this.binaryReadMap1(message.annotations, reader, options);
                    break;
                case /* string signed_at */ 2:
                    message.signedAt = reader.string();
                    break;
                case /* string algorithm */ 3:
                    message.algorithm = reader.string();
                    break;
                case /* string signature */ 4:
                    message.signature = reader.string();
                    break;
                case /* string certificate */ 5:
                    message.certificate = reader.string();
                    break;
                case /* string content_type */ 6:
                    message.contentType = reader.string();
                    break;
                case /* string content_bundle */ 7:
                    message.contentBundle = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: Signature["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Signature["annotations"] | undefined, val: Signature["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for sign.v1.Signature.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Signature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> annotations = 1; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* string signed_at = 2; */
        if (message.signedAt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signedAt);
        /* string algorithm = 3; */
        if (message.algorithm !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.algorithm);
        /* string signature = 4; */
        if (message.signature !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signature);
        /* string certificate = 5; */
        if (message.certificate !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.certificate);
        /* string content_type = 6; */
        if (message.contentType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.contentType);
        /* string content_bundle = 7; */
        if (message.contentBundle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.contentBundle);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sign.v1.Signature
 */
export const Signature = new Signature$Type();
/**
 * @generated ServiceType for protobuf service sign.v1.SignService
 */
export const SignService = new ServiceType("sign.v1.SignService", [
    { name: "Sign", options: {}, I: SignRequest, O: SignResponse },
    { name: "Verify", options: {}, I: VerifyRequest, O: VerifyResponse }
]);
