// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "core/v1/record.proto" (package "core.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Record as Record$ } from "../../objects/v3/record";
import { AgentRecord } from "../../objects/v2/agent_record";
import { Agent } from "../../objects/v1/agent";
/**
 * Defines a reference or a globally unique content identifier of a record.
 *
 * @generated from protobuf message core.v1.RecordRef
 */
export interface RecordRef {
    /**
     * Globally-unique content identifier (CID) of the record.
     * Specs: https://github.com/multiformats/cid
     *
     * @generated from protobuf field: string cid = 1
     */
    cid: string;
}
/**
 * Defines metadata about a record.
 *
 * @generated from protobuf message core.v1.RecordMeta
 */
export interface RecordMeta {
    /**
     * CID of the record.
     *
     * @generated from protobuf field: string cid = 1
     */
    cid: string;
    /**
     * Annotations attached to the record.
     *
     * @generated from protobuf field: map<string, string> annotations = 2
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * Schema version of the record.
     *
     * @generated from protobuf field: string schema_version = 3
     */
    schemaVersion: string;
    /**
     * Creation timestamp of the record in the RFC3339 format.
     * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
     *
     * @generated from protobuf field: string created_at = 4
     */
    createdAt: string;
}
/**
 * Record unifies different versions of records into a single message.
 * It allows for backward compatibility and easier handling of different
 * record versions in the same service or application.
 *
 * @generated from protobuf message core.v1.Record
 */
export interface Record {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "v1";
        /**
         * @generated from protobuf field: objects.v1.Agent v1 = 1
         */
        v1: Agent;
    } | {
        oneofKind: "v2";
        /**
         * @generated from protobuf field: objects.v2.AgentRecord v2 = 2
         */
        v2: AgentRecord;
    } | {
        oneofKind: "v3";
        /**
         * @generated from protobuf field: objects.v3.Record v3 = 3
         */
        v3: Record$;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class RecordRef$Type extends MessageType<RecordRef> {
    constructor() {
        super("core.v1.RecordRef", [
            { no: 1, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecordRef>): RecordRef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cid = "";
        if (value !== undefined)
            reflectionMergePartial<RecordRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordRef): RecordRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cid */ 1:
                    message.cid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecordRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cid = 1; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message core.v1.RecordRef
 */
export const RecordRef = new RecordRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecordMeta$Type extends MessageType<RecordMeta> {
    constructor() {
        super("core.v1.RecordMeta", [
            { no: 1, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 3, name: "schema_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RecordMeta>): RecordMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cid = "";
        message.annotations = {};
        message.schemaVersion = "";
        message.createdAt = "";
        if (value !== undefined)
            reflectionMergePartial<RecordMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecordMeta): RecordMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cid */ 1:
                    message.cid = reader.string();
                    break;
                case /* map<string, string> annotations */ 2:
                    this.binaryReadMap2(message.annotations, reader, options);
                    break;
                case /* string schema_version */ 3:
                    message.schemaVersion = reader.string();
                    break;
                case /* string created_at */ 4:
                    message.createdAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: RecordMeta["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof RecordMeta["annotations"] | undefined, val: RecordMeta["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for core.v1.RecordMeta.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: RecordMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cid = 1; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        /* map<string, string> annotations = 2; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* string schema_version = 3; */
        if (message.schemaVersion !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schemaVersion);
        /* string created_at = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message core.v1.RecordMeta
 */
export const RecordMeta = new RecordMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
    constructor() {
        super("core.v1.Record", [
            { no: 1, name: "v1", kind: "message", oneof: "data", T: () => Agent },
            { no: 2, name: "v2", kind: "message", oneof: "data", T: () => AgentRecord },
            { no: 3, name: "v3", kind: "message", oneof: "data", T: () => Record$ }
        ]);
    }
    create(value?: PartialMessage<Record>): Record {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Record>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record): Record {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* objects.v1.Agent v1 */ 1:
                    message.data = {
                        oneofKind: "v1",
                        v1: Agent.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).v1)
                    };
                    break;
                case /* objects.v2.AgentRecord v2 */ 2:
                    message.data = {
                        oneofKind: "v2",
                        v2: AgentRecord.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).v2)
                    };
                    break;
                case /* objects.v3.Record v3 */ 3:
                    message.data = {
                        oneofKind: "v3",
                        v3: Record$.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).v3)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Record, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* objects.v1.Agent v1 = 1; */
        if (message.data.oneofKind === "v1")
            Agent.internalBinaryWrite(message.data.v1, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* objects.v2.AgentRecord v2 = 2; */
        if (message.data.oneofKind === "v2")
            AgentRecord.internalBinaryWrite(message.data.v2, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* objects.v3.Record v3 = 3; */
        if (message.data.oneofKind === "v3")
            Record$.internalBinaryWrite(message.data.v3, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message core.v1.Record
 */
export const Record = new Record$Type();
