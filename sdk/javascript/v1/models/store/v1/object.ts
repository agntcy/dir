// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "store/v1/object.proto" (package "store.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Reference to a content-addressable object.
 *
 * @generated from protobuf message store.v1.ObjectRef
 */
export interface ObjectRef {
    /**
     * Globally-unique content identifier (CID) of the object.
     * Specs: https://github.com/multiformats/cid
     *
     * @generated from protobuf field: string cid = 1
     */
    cid: string;
}
/**
 * Object is a generic data structure that can hold
 * arbitrary data. It is used to store and associate
 * objects in a content-addressable store.
 *
 * @generated from protobuf message store.v1.Object
 */
export interface Object {
    /**
     * Globally-unique content identifier of the object.
     * Encodes fully-qualified type of the object as part of "codec".
     * Specs: https://github.com/multiformats/cid
     *
     * @generated from protobuf field: string cid = 1
     */
    cid: string;
    /**
     * Type of the object.
     * Can be extracted from CID.
     *
     * @generated from protobuf field: store.v1.ObjectType type = 2
     */
    type: ObjectType;
    /**
     * Metadata associated with the object.
     *
     * @generated from protobuf field: map<string, string> annotations = 3
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * Creation timestamp of the object in the RFC3339 format.
     * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
     *
     * @generated from protobuf field: string created_at = 4
     */
    createdAt: string;
    /**
     * Size of the object in bytes.
     *
     * @generated from protobuf field: uint64 size = 5
     */
    size: bigint;
    /**
     * Opaque data held by this object.
     * Clients can use {type} to handle processing.
     *
     * @generated from protobuf field: optional bytes data = 6
     */
    data?: Uint8Array;
}
/**
 * Defines a list of supported object data types.
 * Some values may be reserved for future use.
 * These types are used as a "codec" in the CID.
 *
 * @generated from protobuf enum store.v1.ObjectType
 */
export enum ObjectType {
    /**
     * invalid type, should not be used
     *
     * @generated from protobuf enum value: OBJECT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Common Object Types
     *
     * @generated from protobuf enum value: OBJECT_TYPE_RAW = 1;
     */
    RAW = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ObjectRef$Type extends MessageType<ObjectRef> {
    constructor() {
        super("store.v1.ObjectRef", [
            { no: 1, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ObjectRef>): ObjectRef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cid = "";
        if (value !== undefined)
            reflectionMergePartial<ObjectRef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjectRef): ObjectRef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cid */ 1:
                    message.cid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjectRef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cid = 1; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message store.v1.ObjectRef
 */
export const ObjectRef = new ObjectRef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Object$Type extends MessageType<Object> {
    constructor() {
        super("store.v1.Object", [
            { no: 1, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["store.v1.ObjectType", ObjectType, "OBJECT_TYPE_"] },
            { no: 3, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 4, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Object>): Object {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cid = "";
        message.type = 0;
        message.annotations = {};
        message.createdAt = "";
        message.size = 0n;
        if (value !== undefined)
            reflectionMergePartial<Object>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Object): Object {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cid */ 1:
                    message.cid = reader.string();
                    break;
                case /* store.v1.ObjectType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* map<string, string> annotations */ 3:
                    this.binaryReadMap3(message.annotations, reader, options);
                    break;
                case /* string created_at */ 4:
                    message.createdAt = reader.string();
                    break;
                case /* uint64 size */ 5:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* optional bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Object["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Object["annotations"] | undefined, val: Object["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for store.v1.Object.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Object, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cid = 1; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        /* store.v1.ObjectType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* map<string, string> annotations = 3; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* string created_at = 4; */
        if (message.createdAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.createdAt);
        /* uint64 size = 5; */
        if (message.size !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.size);
        /* optional bytes data = 6; */
        if (message.data !== undefined)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message store.v1.Object
 */
export const Object = new Object$Type();
