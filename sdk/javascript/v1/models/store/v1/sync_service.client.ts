// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "store/v1/sync_service.proto" (package "store.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SyncService } from "./sync_service";
import type { RequestRegistryCredentialsResponse } from "./sync_service";
import type { RequestRegistryCredentialsRequest } from "./sync_service";
import type { DeleteSyncResponse } from "./sync_service";
import type { DeleteSyncRequest } from "./sync_service";
import type { GetSyncResponse } from "./sync_service";
import type { GetSyncRequest } from "./sync_service";
import type { ListSyncsItem } from "./sync_service";
import type { ListSyncsRequest } from "./sync_service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateSyncResponse } from "./sync_service";
import type { CreateSyncRequest } from "./sync_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * SyncService provides functionality for synchronizing objects between Directory nodes.
 *
 * This service enables one-way synchronization from a remote Directory node to the local node,
 * allowing distributed Directory instances to share and replicate objects. The service supports
 * both on-demand synchronization and tracking of sync operations through their lifecycle.
 *
 * @generated from protobuf service store.v1.SyncService
 */
export interface ISyncServiceClient {
    /**
     * CreateSync initiates a new synchronization operation from a remote Directory node.
     *
     * The operation is non-blocking and returns immediately with a sync ID that can be used
     * to track progress and manage the sync operation.
     *
     * @generated from protobuf rpc: CreateSync
     */
    createSync(input: CreateSyncRequest, options?: RpcOptions): UnaryCall<CreateSyncRequest, CreateSyncResponse>;
    /**
     * ListSyncs returns a stream of all sync operations known to the system.
     *
     * This includes active, completed, and failed synchronizations.
     *
     * @generated from protobuf rpc: ListSyncs
     */
    listSyncs(input: ListSyncsRequest, options?: RpcOptions): ServerStreamingCall<ListSyncsRequest, ListSyncsItem>;
    /**
     * GetSync retrieves detailed status information for a specific synchronization.
     *
     * @generated from protobuf rpc: GetSync
     */
    getSync(input: GetSyncRequest, options?: RpcOptions): UnaryCall<GetSyncRequest, GetSyncResponse>;
    /**
     * DeleteSync removes a synchronization operation from the system.
     *
     * @generated from protobuf rpc: DeleteSync
     */
    deleteSync(input: DeleteSyncRequest, options?: RpcOptions): UnaryCall<DeleteSyncRequest, DeleteSyncResponse>;
    /**
     * RequestRegistryCredentials requests registry credentials between two Directory nodes.
     *
     * This RPC allows a requesting node to authenticate with this node and obtain
     * temporary registry credentials for secure Zot-based synchronization.
     *
     * @generated from protobuf rpc: RequestRegistryCredentials
     */
    requestRegistryCredentials(input: RequestRegistryCredentialsRequest, options?: RpcOptions): UnaryCall<RequestRegistryCredentialsRequest, RequestRegistryCredentialsResponse>;
}
/**
 * SyncService provides functionality for synchronizing objects between Directory nodes.
 *
 * This service enables one-way synchronization from a remote Directory node to the local node,
 * allowing distributed Directory instances to share and replicate objects. The service supports
 * both on-demand synchronization and tracking of sync operations through their lifecycle.
 *
 * @generated from protobuf service store.v1.SyncService
 */
export class SyncServiceClient implements ISyncServiceClient, ServiceInfo {
    typeName = SyncService.typeName;
    methods = SyncService.methods;
    options = SyncService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CreateSync initiates a new synchronization operation from a remote Directory node.
     *
     * The operation is non-blocking and returns immediately with a sync ID that can be used
     * to track progress and manage the sync operation.
     *
     * @generated from protobuf rpc: CreateSync
     */
    createSync(input: CreateSyncRequest, options?: RpcOptions): UnaryCall<CreateSyncRequest, CreateSyncResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateSyncRequest, CreateSyncResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListSyncs returns a stream of all sync operations known to the system.
     *
     * This includes active, completed, and failed synchronizations.
     *
     * @generated from protobuf rpc: ListSyncs
     */
    listSyncs(input: ListSyncsRequest, options?: RpcOptions): ServerStreamingCall<ListSyncsRequest, ListSyncsItem> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListSyncsRequest, ListSyncsItem>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * GetSync retrieves detailed status information for a specific synchronization.
     *
     * @generated from protobuf rpc: GetSync
     */
    getSync(input: GetSyncRequest, options?: RpcOptions): UnaryCall<GetSyncRequest, GetSyncResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSyncRequest, GetSyncResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DeleteSync removes a synchronization operation from the system.
     *
     * @generated from protobuf rpc: DeleteSync
     */
    deleteSync(input: DeleteSyncRequest, options?: RpcOptions): UnaryCall<DeleteSyncRequest, DeleteSyncResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteSyncRequest, DeleteSyncResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * RequestRegistryCredentials requests registry credentials between two Directory nodes.
     *
     * This RPC allows a requesting node to authenticate with this node and obtain
     * temporary registry credentials for secure Zot-based synchronization.
     *
     * @generated from protobuf rpc: RequestRegistryCredentials
     */
    requestRegistryCredentials(input: RequestRegistryCredentialsRequest, options?: RpcOptions): UnaryCall<RequestRegistryCredentialsRequest, RequestRegistryCredentialsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestRegistryCredentialsRequest, RequestRegistryCredentialsResponse>("unary", this._transport, method, opt, input);
    }
}
