// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "store/v1/store_service.proto" (package "store.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import { Empty } from "../../google/protobuf/empty";
import { RecordMeta } from "../../core/v1/record";
import { Record } from "../../core/v1/record";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Signature } from "../../sign/v1/sign_service";
import { RecordRef } from "../../core/v1/record";
/**
 * PushReferrerRequest represents a record with optional OCI artifacts for push operations.
 *
 * @generated from protobuf message store.v1.PushReferrerRequest
 */
export interface PushReferrerRequest {
    /**
     * Record reference
     *
     * @generated from protobuf field: core.v1.RecordRef record_ref = 1
     */
    recordRef?: RecordRef;
    /**
     * Push referrer options
     *
     * @generated from protobuf oneof: options
     */
    options: {
        oneofKind: "signature";
        /**
         * Signature to be stored as a referrer for the record
         *
         * @generated from protobuf field: sign.v1.Signature signature = 2
         */
        signature: Signature;
    } | {
        oneofKind: "publicKey";
        /**
         * Public key to be stored as a referrer for the record and uploaded as a file to zot for verification
         *
         * @generated from protobuf field: string public_key = 3
         */
        publicKey: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * PushReferrerResponse
 *
 * @generated from protobuf message store.v1.PushReferrerResponse
 */
export interface PushReferrerResponse {
    /**
     * The push process result
     *
     * @generated from protobuf field: bool success = 1
     */
    success: boolean;
    /**
     * Optional error message if push failed
     *
     * @generated from protobuf field: optional string error_message = 2
     */
    errorMessage?: string;
}
/**
 * PullReferrerRequest represents a record with optional OCI artifacts for pull operations.
 *
 * @generated from protobuf message store.v1.PullReferrerRequest
 */
export interface PullReferrerRequest {
    /**
     * Record reference
     *
     * @generated from protobuf field: core.v1.RecordRef record_ref = 1
     */
    recordRef?: RecordRef;
    /**
     * @generated from protobuf oneof: options
     */
    options: {
        oneofKind: "pullSignature";
        /**
         * Pull signature referrer
         *
         * @generated from protobuf field: bool pull_signature = 2
         */
        pullSignature: boolean;
    } | {
        oneofKind: "pullPublicKey";
        /**
         * Pull public key referrer
         *
         * @generated from protobuf field: bool pull_public_key = 3
         */
        pullPublicKey: boolean;
    } | {
        oneofKind: undefined;
    };
}
/**
 * PullReferrerResponse is returned after successfully fetching a record referrer.
 *
 * @generated from protobuf message store.v1.PullReferrerResponse
 */
export interface PullReferrerResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "signature";
        /**
         * Signature to be fetched as a referrer
         *
         * @generated from protobuf field: sign.v1.Signature signature = 1
         */
        signature: Signature;
    } | {
        oneofKind: "publicKey";
        /**
         * Public key to be fetched as a referrer
         *
         * @generated from protobuf field: string public_key = 2
         */
        publicKey: string;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class PushReferrerRequest$Type extends MessageType<PushReferrerRequest> {
    constructor() {
        super("store.v1.PushReferrerRequest", [
            { no: 1, name: "record_ref", kind: "message", T: () => RecordRef },
            { no: 2, name: "signature", kind: "message", oneof: "options", T: () => Signature },
            { no: 3, name: "public_key", kind: "scalar", oneof: "options", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushReferrerRequest>): PushReferrerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.options = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PushReferrerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushReferrerRequest): PushReferrerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.v1.RecordRef record_ref */ 1:
                    message.recordRef = RecordRef.internalBinaryRead(reader, reader.uint32(), options, message.recordRef);
                    break;
                case /* sign.v1.Signature signature */ 2:
                    message.options = {
                        oneofKind: "signature",
                        signature: Signature.internalBinaryRead(reader, reader.uint32(), options, (message.options as any).signature)
                    };
                    break;
                case /* string public_key */ 3:
                    message.options = {
                        oneofKind: "publicKey",
                        publicKey: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushReferrerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.v1.RecordRef record_ref = 1; */
        if (message.recordRef)
            RecordRef.internalBinaryWrite(message.recordRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sign.v1.Signature signature = 2; */
        if (message.options.oneofKind === "signature")
            Signature.internalBinaryWrite(message.options.signature, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string public_key = 3; */
        if (message.options.oneofKind === "publicKey")
            writer.tag(3, WireType.LengthDelimited).string(message.options.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message store.v1.PushReferrerRequest
 */
export const PushReferrerRequest = new PushReferrerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PushReferrerResponse$Type extends MessageType<PushReferrerResponse> {
    constructor() {
        super("store.v1.PushReferrerResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "error_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PushReferrerResponse>): PushReferrerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<PushReferrerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PushReferrerResponse): PushReferrerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* optional string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PushReferrerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* optional string error_message = 2; */
        if (message.errorMessage !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message store.v1.PushReferrerResponse
 */
export const PushReferrerResponse = new PushReferrerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullReferrerRequest$Type extends MessageType<PullReferrerRequest> {
    constructor() {
        super("store.v1.PullReferrerRequest", [
            { no: 1, name: "record_ref", kind: "message", T: () => RecordRef },
            { no: 2, name: "pull_signature", kind: "scalar", oneof: "options", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "pull_public_key", kind: "scalar", oneof: "options", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PullReferrerRequest>): PullReferrerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.options = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PullReferrerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullReferrerRequest): PullReferrerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* core.v1.RecordRef record_ref */ 1:
                    message.recordRef = RecordRef.internalBinaryRead(reader, reader.uint32(), options, message.recordRef);
                    break;
                case /* bool pull_signature */ 2:
                    message.options = {
                        oneofKind: "pullSignature",
                        pullSignature: reader.bool()
                    };
                    break;
                case /* bool pull_public_key */ 3:
                    message.options = {
                        oneofKind: "pullPublicKey",
                        pullPublicKey: reader.bool()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullReferrerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* core.v1.RecordRef record_ref = 1; */
        if (message.recordRef)
            RecordRef.internalBinaryWrite(message.recordRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool pull_signature = 2; */
        if (message.options.oneofKind === "pullSignature")
            writer.tag(2, WireType.Varint).bool(message.options.pullSignature);
        /* bool pull_public_key = 3; */
        if (message.options.oneofKind === "pullPublicKey")
            writer.tag(3, WireType.Varint).bool(message.options.pullPublicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message store.v1.PullReferrerRequest
 */
export const PullReferrerRequest = new PullReferrerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PullReferrerResponse$Type extends MessageType<PullReferrerResponse> {
    constructor() {
        super("store.v1.PullReferrerResponse", [
            { no: 1, name: "signature", kind: "message", oneof: "response", T: () => Signature },
            { no: 2, name: "public_key", kind: "scalar", oneof: "response", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PullReferrerResponse>): PullReferrerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<PullReferrerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PullReferrerResponse): PullReferrerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sign.v1.Signature signature */ 1:
                    message.response = {
                        oneofKind: "signature",
                        signature: Signature.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).signature)
                    };
                    break;
                case /* string public_key */ 2:
                    message.response = {
                        oneofKind: "publicKey",
                        publicKey: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PullReferrerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sign.v1.Signature signature = 1; */
        if (message.response.oneofKind === "signature")
            Signature.internalBinaryWrite(message.response.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string public_key = 2; */
        if (message.response.oneofKind === "publicKey")
            writer.tag(2, WireType.LengthDelimited).string(message.response.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message store.v1.PullReferrerResponse
 */
export const PullReferrerResponse = new PullReferrerResponse$Type();
/**
 * @generated ServiceType for protobuf service store.v1.StoreService
 */
export const StoreService = new ServiceType("store.v1.StoreService", [
    { name: "Push", serverStreaming: true, clientStreaming: true, options: {}, I: Record, O: RecordRef },
    { name: "Pull", serverStreaming: true, clientStreaming: true, options: {}, I: RecordRef, O: Record },
    { name: "Lookup", serverStreaming: true, clientStreaming: true, options: {}, I: RecordRef, O: RecordMeta },
    { name: "Delete", clientStreaming: true, options: {}, I: RecordRef, O: Empty },
    { name: "PushReferrer", serverStreaming: true, clientStreaming: true, options: {}, I: PushReferrerRequest, O: PushReferrerResponse },
    { name: "PullReferrer", serverStreaming: true, clientStreaming: true, options: {}, I: PullReferrerRequest, O: PullReferrerResponse }
]);
