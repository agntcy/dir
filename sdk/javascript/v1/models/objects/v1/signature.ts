// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "objects/v1/signature.proto" (package "objects.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message objects.v1.Signature
 */
export interface Signature {
    /**
     * The signature algorithm used (e.g., "ECDSA_P256_SHA256")
     *
     * @generated from protobuf field: string algorithm = 1
     */
    algorithm: string;
    /**
     * Base64-encoded signature
     *
     * @generated from protobuf field: string signature = 2
     */
    signature: string;
    /**
     * Base64-encoded signing certificate
     *
     * @generated from protobuf field: string certificate = 3
     */
    certificate: string;
    /**
     * Type of the signature content bundle.
     *
     * @generated from protobuf field: string content_type = 4
     */
    contentType: string;
    /**
     * Base64-encoded signature bundle produced by the signer.
     * It is up to the client to interpret the content of the bundle.
     *
     * @generated from protobuf field: string content_bundle = 5
     */
    contentBundle: string;
    /**
     * Timestamp when signing occurred
     *
     * @generated from protobuf field: string signed_at = 6
     */
    signedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("objects.v1.Signature", [
            { no: 1, name: "algorithm", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "certificate", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content_bundle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "signed_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Signature>): Signature {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.algorithm = "";
        message.signature = "";
        message.certificate = "";
        message.contentType = "";
        message.contentBundle = "";
        message.signedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Signature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature): Signature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string algorithm */ 1:
                    message.algorithm = reader.string();
                    break;
                case /* string signature */ 2:
                    message.signature = reader.string();
                    break;
                case /* string certificate */ 3:
                    message.certificate = reader.string();
                    break;
                case /* string content_type */ 4:
                    message.contentType = reader.string();
                    break;
                case /* string content_bundle */ 5:
                    message.contentBundle = reader.string();
                    break;
                case /* string signed_at */ 6:
                    message.signedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string algorithm = 1; */
        if (message.algorithm !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.algorithm);
        /* string signature = 2; */
        if (message.signature !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signature);
        /* string certificate = 3; */
        if (message.certificate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.certificate);
        /* string content_type = 4; */
        if (message.contentType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contentType);
        /* string content_bundle = 5; */
        if (message.contentBundle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.contentBundle);
        /* string signed_at = 6; */
        if (message.signedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.signedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objects.v1.Signature
 */
export const Signature = new Signature$Type();
