// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "objects/v1/skill.proto" (package "objects.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * A specific skills that an agent is capable of performing.
 *
 * @generated from protobuf message objects.v1.Skill
 */
export interface Skill {
    /**
     * Additional metadata for this skill.
     *
     * @generated from protobuf field: map<string, string> annotations = 1
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * UID of the category.
     *
     * @generated from protobuf field: uint64 category_uid = 2
     */
    categoryUid: bigint;
    /**
     * UID of the class.
     *
     * @generated from protobuf field: uint64 class_uid = 3
     */
    classUid: bigint;
    /**
     * Optional human-readable name of the category.
     *
     * @generated from protobuf field: optional string category_name = 4
     */
    categoryName?: string;
    /**
     * Optional human-readable name of the class.
     *
     * @generated from protobuf field: optional string class_name = 5
     */
    className?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Skill$Type extends MessageType<Skill> {
    constructor() {
        super("objects.v1.Skill", [
            { no: 1, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "category_uid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "class_uid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "category_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "class_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Skill>): Skill {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.annotations = {};
        message.categoryUid = 0n;
        message.classUid = 0n;
        if (value !== undefined)
            reflectionMergePartial<Skill>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Skill): Skill {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> annotations */ 1:
                    this.binaryReadMap1(message.annotations, reader, options);
                    break;
                case /* uint64 category_uid */ 2:
                    message.categoryUid = reader.uint64().toBigInt();
                    break;
                case /* uint64 class_uid */ 3:
                    message.classUid = reader.uint64().toBigInt();
                    break;
                case /* optional string category_name */ 4:
                    message.categoryName = reader.string();
                    break;
                case /* optional string class_name */ 5:
                    message.className = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: Skill["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Skill["annotations"] | undefined, val: Skill["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for objects.v1.Skill.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Skill, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> annotations = 1; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* uint64 category_uid = 2; */
        if (message.categoryUid !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.categoryUid);
        /* uint64 class_uid = 3; */
        if (message.classUid !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.classUid);
        /* optional string category_name = 4; */
        if (message.categoryName !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.categoryName);
        /* optional string class_name = 5; */
        if (message.className !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.className);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objects.v1.Skill
 */
export const Skill = new Skill$Type();
