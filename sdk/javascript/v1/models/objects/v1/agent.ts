// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "objects/v1/agent.proto" (package "objects.v1", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Signature } from "./signature";
import { Extension } from "./extension";
import { Locator } from "./locator";
import { Skill } from "./skill";
/**
 * Data model defines a schema for versioned AI agent content representation.
 * The schema provides a way to describe features, constraints, artifact
 * locators, and other relevant details of an agent.
 *
 * Key := {name} - newest release
 * Key := {name}:{version} - newest versioned release
 * Key := {name}@{digest} - exact release
 * Key := {name}:{version}@{digest} - exact versioned release
 *
 * This is an immutable object.
 *
 * Max size: 4 MB (or to fully fit in a single request)
 * https://opencontainers.org/posts/blog/2024-03-13-image-and-distribution-1-1/#manifest-maximum-size
 *
 * @generated from protobuf message objects.v1.Agent
 */
export interface Agent {
    /**
     * Schema version of the agent.
     *
     * @generated from protobuf field: string schema_version = 1
     */
    schemaVersion: string;
    /**
     * Name of the agent.
     *
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * Version of the agent.
     *
     * @generated from protobuf field: string version = 3
     */
    version: string;
    /**
     * Description of the agent.
     *
     * @generated from protobuf field: string description = 4
     */
    description: string;
    /**
     * List of agentâ€™s authors in the form of `author-name <author-email>`.
     *
     * @generated from protobuf field: repeated string authors = 5
     */
    authors: string[];
    /**
     * Creation timestamp of the agent in the RFC3339 format.
     * Specs: https://www.rfc-editor.org/rfc/rfc3339.html
     *
     * @generated from protobuf field: string created_at = 6
     */
    createdAt: string;
    /**
     * Additional metadata associated with this agent.
     *
     * @generated from protobuf field: map<string, string> annotations = 7
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * List of skills that this agent can perform.
     *
     * @generated from protobuf field: repeated objects.v1.Skill skills = 8
     */
    skills: Skill[];
    /**
     * List of source locators where this agent can be found or used from.
     *
     * @generated from protobuf field: repeated objects.v1.Locator locators = 9
     */
    locators: Locator[];
    /**
     * List of extensions that describe this agent and its capabilities
     * and constraints more in depth.
     *
     * @generated from protobuf field: repeated objects.v1.Extension extensions = 10
     */
    extensions: Extension[];
    /**
     * Signature attached to this agent.
     *
     * @generated from protobuf field: optional objects.v1.Signature signature = 11
     */
    signature?: Signature;
}
// @generated message type with reflection information, may provide speed optimized methods
class Agent$Type extends MessageType<Agent> {
    constructor() {
        super("objects.v1.Agent", [
            { no: 1, name: "schema_version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "authors", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 8, name: "skills", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Skill },
            { no: 9, name: "locators", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Locator },
            { no: 10, name: "extensions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Extension },
            { no: 11, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<Agent>): Agent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.schemaVersion = "";
        message.name = "";
        message.version = "";
        message.description = "";
        message.authors = [];
        message.createdAt = "";
        message.annotations = {};
        message.skills = [];
        message.locators = [];
        message.extensions = [];
        if (value !== undefined)
            reflectionMergePartial<Agent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Agent): Agent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string schema_version */ 1:
                    message.schemaVersion = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string version */ 3:
                    message.version = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* repeated string authors */ 5:
                    message.authors.push(reader.string());
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* map<string, string> annotations */ 7:
                    this.binaryReadMap7(message.annotations, reader, options);
                    break;
                case /* repeated objects.v1.Skill skills */ 8:
                    message.skills.push(Skill.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated objects.v1.Locator locators */ 9:
                    message.locators.push(Locator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated objects.v1.Extension extensions */ 10:
                    message.extensions.push(Extension.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional objects.v1.Signature signature */ 11:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: Agent["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Agent["annotations"] | undefined, val: Agent["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for objects.v1.Agent.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Agent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string schema_version = 1; */
        if (message.schemaVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.schemaVersion);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string version = 3; */
        if (message.version !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.version);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* repeated string authors = 5; */
        for (let i = 0; i < message.authors.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.authors[i]);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* map<string, string> annotations = 7; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* repeated objects.v1.Skill skills = 8; */
        for (let i = 0; i < message.skills.length; i++)
            Skill.internalBinaryWrite(message.skills[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated objects.v1.Locator locators = 9; */
        for (let i = 0; i < message.locators.length; i++)
            Locator.internalBinaryWrite(message.locators[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated objects.v1.Extension extensions = 10; */
        for (let i = 0; i < message.extensions.length; i++)
            Extension.internalBinaryWrite(message.extensions[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional objects.v1.Signature signature = 11; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objects.v1.Agent
 */
export const Agent = new Agent$Type();
