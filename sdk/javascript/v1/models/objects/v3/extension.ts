// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "objects/v3/extension.proto" (package "objects.v3", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../../google/protobuf/struct";
/**
 * Extensions provide a generic way to attach additional information
 * to the record. For example, application-specific
 * details can be provided using an extension.
 *
 * @generated from protobuf message objects.v3.Extension
 */
export interface Extension {
    /**
     * Name of the extension.
     * Can be used as a fully qualified name.
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * Version of the extension.
     *
     * @generated from protobuf field: string version = 2
     */
    version: string;
    /**
     * Metadata associated with the extension.
     *
     * @generated from protobuf field: map<string, string> annotations = 3
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * Data attached to the extension.
     * Usually a JSON-embedded object.
     *
     * @generated from protobuf field: google.protobuf.Struct data = 4
     */
    data?: Struct;
}
// @generated message type with reflection information, may provide speed optimized methods
class Extension$Type extends MessageType<Extension> {
    constructor() {
        super("objects.v3.Extension", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 4, name: "data", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<Extension>): Extension {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.version = "";
        message.annotations = {};
        if (value !== undefined)
            reflectionMergePartial<Extension>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Extension): Extension {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string version */ 2:
                    message.version = reader.string();
                    break;
                case /* map<string, string> annotations */ 3:
                    this.binaryReadMap3(message.annotations, reader, options);
                    break;
                case /* google.protobuf.Struct data */ 4:
                    message.data = Struct.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Extension["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Extension["annotations"] | undefined, val: Extension["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for objects.v3.Extension.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Extension, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string version = 2; */
        if (message.version !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.version);
        /* map<string, string> annotations = 3; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* google.protobuf.Struct data = 4; */
        if (message.data)
            Struct.internalBinaryWrite(message.data, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objects.v3.Extension
 */
export const Extension = new Extension$Type();
