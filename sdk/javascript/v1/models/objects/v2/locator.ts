// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "objects/v2/locator.proto" (package "objects.v2", syntax proto3)
// tslint:disable
//
// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Locator points to the source where agent can be found at.
 * For example, a locator can be a link to a helm chart.
 *
 * @generated from protobuf message objects.v2.Locator
 */
export interface Locator {
    /**
     * Type of the locator.
     * Supports custom types.
     * Native types are defined in the LocatorType.
     *
     * @generated from protobuf field: string type = 1
     */
    type: string;
    /**
     * Location where the source can be found at.
     * Specs: https://datatracker.ietf.org/doc/html/rfc1738
     *
     * @generated from protobuf field: string url = 2
     */
    url: string;
    /**
     * Metadata associated with the locator.
     *
     * @generated from protobuf field: map<string, string> annotations = 3
     */
    annotations: {
        [key: string]: string;
    };
    /**
     * Size of the source in bytes pointed by the {url} property.
     *
     * @generated from protobuf field: optional uint64 size = 4
     */
    size?: bigint;
    /**
     * Digest of the source pointed by the {url} property.
     * Specs: https://github.com/opencontainers/image-spec/blob/main/descriptor.md#digests
     *
     * @generated from protobuf field: optional string digest = 5
     */
    digest?: string;
}
/**
 * LocatorType defines placeholders for supported locators.
 * Used in string format across APIs.
 *
 * @generated from protobuf enum objects.v2.LocatorType
 */
export enum LocatorType {
    /**
     * ""
     *
     * @generated from protobuf enum value: LOCATOR_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * "helm_chart"
     *
     * @generated from protobuf enum value: LOCATOR_TYPE_HELM_CHART = 1;
     */
    HELM_CHART = 1,
    /**
     * "docker_image"
     *
     * @generated from protobuf enum value: LOCATOR_TYPE_DOCKER_IMAGE = 2;
     */
    DOCKER_IMAGE = 2,
    /**
     * "python_package"
     *
     * @generated from protobuf enum value: LOCATOR_TYPE_PYTHON_PACKAGE = 3;
     */
    PYTHON_PACKAGE = 3,
    /**
     * "source_code"
     *
     * @generated from protobuf enum value: LOCATOR_TYPE_SOURCE_CODE = 4;
     */
    SOURCE_CODE = 4,
    /**
     * "binary"
     *
     * @generated from protobuf enum value: LOCATOR_TYPE_BINARY = 5;
     */
    BINARY = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class Locator$Type extends MessageType<Locator> {
    constructor() {
        super("objects.v2.Locator", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "annotations", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 4, name: "size", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "digest", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Locator>): Locator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.url = "";
        message.annotations = {};
        if (value !== undefined)
            reflectionMergePartial<Locator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Locator): Locator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* map<string, string> annotations */ 3:
                    this.binaryReadMap3(message.annotations, reader, options);
                    break;
                case /* optional uint64 size */ 4:
                    message.size = reader.uint64().toBigInt();
                    break;
                case /* optional string digest */ 5:
                    message.digest = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Locator["annotations"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Locator["annotations"] | undefined, val: Locator["annotations"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for objects.v2.Locator.annotations");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: Locator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* map<string, string> annotations = 3; */
        for (let k of globalThis.Object.keys(message.annotations))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.annotations[k]).join();
        /* optional uint64 size = 4; */
        if (message.size !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.size);
        /* optional string digest = 5; */
        if (message.digest !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.digest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message objects.v2.Locator
 */
export const Locator = new Locator$Type();
