// Copyright AGNTCY Contributors (https://github.com/agntcy)
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package store.v1alpha2;

import "core/object.proto";

// Defines an interface for content-addressable storage
// service for arbitrary objects such as blobs, files, etc.
// It may also store metadata for pushed objects.
//
// Store service can be implemented by various storage backends,
// such as local file system, OCI registry, etc.
//
// Middleware should be used to control who can perform these RPCs.
// Policies for the middleware can be handled via separate service.
service StoreService {
  // Push performs streamed write operation for the provided object.
  // Objects must be sent in chunks if larger than 4MB.
  // All objects are stored in raw format.
  //
  // Some object types such as OASF records may be validated.
  // CID is ignored and is generated by the service.
  rpc Push(stream PushRequestChunk) returns (PushResponse);

  // Pull performs streamed read operation for the requested object.
  // Object is sent back in chunks if larger than 4MB.
  rpc Pull(PullRequest) returns (stream PullResponseChunk);

  // Lookup resolves basic metadata for the object.
  // It does not return the object data.
  rpc Lookup(LookupRequest) returns (LookupResponse);
  
  // Remove performs delete operation for the requested object.
  rpc Delete(DeleteRequest) returns (DeleteResponse);
}

message PushRequestChunk {
  // Object type being pushed.
  core.ObjectType object_type = 1;

  // Annotations for the object being pushed.
  map<string, string> annotations = 2;

  // Size of the object data chunk in bytes.
  uint64 size = 3;

  // The actual object data chunk.
  bytes data = 4;
}

message PushResponse {
  // The reference to the object that was pushed.
  core.ObjectRef object_ref = 2;
}

message PullRequest {
  // Reference to the object being pulled.
  core.ObjectRef object_ref = 1;
}

message PullResponseChunk {
  // The actual object data chunk.
  bytes data = 1;

  // Size of the object data chunk in bytes.
  uint64 size = 2;
}

message LookupRequest {
  // Reference to the object being looked up.
  core.ObjectRef object_ref = 1;
}

message LookupResponse {
  // Object details without the data.
  core.Object object = 1;
}

message DeleteRequest {
  // Reference to the object being deleted.
  core.ObjectRef object_ref = 1;
}

message DeleteResponse {
}
