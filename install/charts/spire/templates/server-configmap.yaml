apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "spire.server.fullname" . }}
  namespace: {{ include "spire.namespace" . }}
  labels:
    {{- include "spire.server.labels" . | nindent 4 }}
  {{- with (include "spire.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
data:
  server.conf: |
    server {
      bind_address = "{{ .Values.server.config.bindAddress }}"
      bind_port = "{{ .Values.server.config.bindPort }}"
      socket_path = "{{ .Values.server.config.socketPath }}"
      trust_domain = "{{ include "spire.trustDomain" . }}"
      data_dir = "{{ .Values.server.config.dataDir }}"
      log_level = "{{ .Values.server.config.logLevel }}"
      ca_key_type = "{{ .Values.server.config.caKeyType }}"

      ca_subject = {
        {{- with .Values.server.config.caSubject.country }}
        country = {{ toJson . }},
        {{- end }}
        {{- with .Values.server.config.caSubject.organization }}
        organization = {{ toJson . }},
        {{- end }}
        common_name = "{{ .Values.server.config.caSubject.commonName }}",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "{{ .Values.server.config.dataStore.sql.databaseType }}"
          connection_string = "{{ .Values.server.config.dataStore.sql.connectionString }}"
        }
      }

      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            "{{ include "spire.clusterName" . }}" = {
              service_account_allow_list = {{ toJson .Values.server.config.nodeAttestor.k8sPsat.serviceAccountAllowList }}
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "{{ .Values.server.config.keyManager.disk.keysPath }}"
        }
      }

      {{- if .Values.server.config.notifier.k8sBundle.enabled }}
      Notifier "k8sbundle" {
        plugin_data {
        }
      }
      {{- end }}
    }

    {{- if .Values.server.healthChecks.enabled }}
    health_checks {
      listener_enabled = true
      bind_address = "{{ .Values.server.healthChecks.bindAddress }}"
      bind_port = "{{ .Values.server.healthChecks.bindPort }}"
      live_path = "{{ .Values.server.healthChecks.livePath }}"
      ready_path = "{{ .Values.server.healthChecks.readyPath }}"
    }
    {{- end }}
