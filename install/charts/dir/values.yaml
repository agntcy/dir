# Copyright AGNTCY Contributors (https://github.com/agntcy)
# SPDX-License-Identifier: Apache-2.0

apiserver:
  image:
    repository: ghcr.io/agntcy/dir-apiserver
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets:
      - name: regcred

  service:
    type: NodePort  # Default for local/dev - change to ClusterIP for cloud with Ingress

  # Routing service configuration for P2P networking
  routingService:
    # Service type for routing/P2P traffic
    # Options: ClusterIP, NodePort, LoadBalancer
    # Recommended for cloud: LoadBalancer (for stable external IP)
    # Default for local/dev: NodePort (inherits from service.type if not set)
    # Uncomment and set to LoadBalancer for production cloud deployments:
    # type: LoadBalancer
    
    # Cloud provider for automatic annotation configuration
    # Options: "aws", "gcp", "azure", or leave empty for no auto-configuration
    # When set, provider-specific LoadBalancer annotations are automatically applied
    # Examples:
    #   cloudProvider: "aws"    # Auto-configures AWS NLB with internet-facing scheme
    #   cloudProvider: "gcp"    # Auto-configures GCP External Load Balancer
    #   cloudProvider: "azure"  # Auto-configures Azure public Load Balancer
    # cloudProvider: ""
    
    # AWS-specific configuration (only used when cloudProvider: "aws")
    # aws:
    #   internal: false  # Set to true for internal NLB
    #   nlbTargetType: "instance"  # Or "ip" for IP-based targets
    
    # GCP-specific configuration (only used when cloudProvider: "gcp")
    # gcp:
    #   internal: false  # Set to true for internal load balancer
    #   backendConfig: ""  # Optional BackendConfig resource name
    
    # Azure-specific configuration (only used when cloudProvider: "azure")
    # azure:
    #   internal: false  # Set to true for internal load balancer
    #   resourceGroup: ""  # Optional resource group name
    
    # Optional: Static IP (must be reserved in cloud provider first)
    # loadBalancerIP: ""
    
    # Optional: Preserve client source IPs (recommended for P2P)
    # externalTrafficPolicy: Local
    
    # Optional: Fixed NodePort (only used when type is NodePort)
    # nodePort: 30555
    
    # Optional: Additional custom annotations (merged with provider annotations)
    # Custom annotations override provider-generated ones
    # annotations: {}

  # Server configuration
  config:
    # listen_address: "0.0.0.0:8888"
    # healthcheck_address: "0.0.0.0:8889"

    # Authentication settings (handles identity verification)
    # Supports both X.509 (X.509-SVID) and JWT (JWT-SVID) authentication
    authn:
      # Enable authentication
      enabled: false
      # Authentication mode: "x509" or "jwt"
      # - x509: Uses X.509-SVID from mutual TLS peer certificates
      # - jwt: Uses JWT-SVID from Authorization header
      mode: "x509"
      # SPIFFE Workload API socket path (injected by SPIRE agent)
      socket_path: "unix:///run/spire/agent-sockets/api.sock"
      # Expected audiences for JWT validation (only used in JWT mode)
      audiences:
        - "spiffe://example.org/dir-server"

    # Authorization settings (handles access control policies)
    # Requires authentication to be enabled first
    authz:
      # Enable authorization policies
      enabled: false
      # Trust domain for this Directory server
      # Used to distinguish internal (same trust domain) vs external requests
      trust_domain: "example.org"

    # Store settings for the storage backend.
    store:
      # Storage provider to use.
      provider: "oci"

      # OCI-backed store
      oci:
        # Path to a local directory that will be to hold data instead of remote.
        # If this is set to non-empty value, only local store will be used.
        # local_dir: ""

        # Cache directory to use for metadata.
        # cache_dir: ""

        # Registry address to connect to
        registry_address: "dir-zot.dir-server.svc.cluster.local:5000"
        # All data will be stored under this repo.
        # Objects are pushed as tags, manifests, and blobs.
        # repository_name: ""

        # Auth credentials to use.
        auth_config:
          insecure: "true"
          access_token: access-token
          refresh_token: refresh-token

    # Routing settings for the peer-to-peer network.
    routing:
      # Address to use for routing
      listen_address: "/ip4/0.0.0.0/tcp/5555"

      # Path to private key file for peer ID.
      # key_path: /tmp/agntcy-dir/node.privkey

      # Nodes to use for bootstrapping of the DHT.
      # We read initial routing tables here and get introduced
      # to the network.
      # bootstrap_peers:
      #   - /ip4/1.1.1.1/tcp/1
      #   - /ip4/1.1.1.1/tcp/2

      # GossipSub configuration for efficient label announcements
      # When enabled, labels are propagated via GossipSub mesh to ALL subscribed peers
      # When disabled, falls back to DHT+Pull mechanism (higher bandwidth, limited reach)
      # Default: true (recommended for production)
      gossipsub:
        enabled: true

    # Sync configuration
    sync:
      # How frequently the scheduler checks for pending syncs
      scheduler_interval: "30s"
      
      # Maximum number of sync workers running concurrently
      worker_count: 1
      
      # Timeout for individual sync operations
      worker_timeout: "10m"
      
      # Registry monitor configuration
      registry_monitor:
        check_interval: "30s"
      
      # Authentication configuration for sync operations
      auth_config: {}

    # Publication configuration
    publication:
      # How frequently the scheduler checks for pending publications
      scheduler_interval: "1h"
      
      # Maximum number of publication workers running concurrently
      worker_count: 1
      
      # Timeout for individual publication operations
      worker_timeout: "30m"

    # Events configuration
    events:
      # Channel buffer size per subscriber
      # Larger buffers allow subscribers to fall behind temporarily without dropping events
      # Default: 100
      subscriber_buffer_size: 100
      
      # Enable logging when events are dropped due to slow consumers
      # Default: true
      log_slow_consumers: true
      
      # Enable debug logging of all published events (verbose in production)
      # Default: false
      log_published_events: false

    # Rate limiting configuration
    # Protects the server from abuse and resource exhaustion using token bucket algorithm
    ratelimit:
      # Enable rate limiting middleware
      # Default: false (disabled for development/testing)
      enabled: false
      
      # Global rate limit (applies to all requests regardless of client)
      # Set both to 0 to disable global limiting
      # global_rps: 0       # Requests per second (float, e.g., 1000.0)
      # global_burst: 0     # Burst capacity (int, e.g., 2000)
      
      # Per-client rate limit (tracked by SPIFFE ID from mTLS)
      # Default values shown below are reasonable for production
      # Set both to 0 to disable per-client limiting
      per_client_rps: 100    # Requests per second per client (float)
      per_client_burst: 200  # Burst capacity per client (int)
      
      # Per-method rate limit overrides (optional)
      # Allows fine-grained control over specific gRPC methods
      # Note: These can only be configured via Helm values, not environment variables
      # method_limits:
      #   "/agntcy.dir.store.v1.StoreService/CreateRecord":
      #     rps: 50      # Lower limit for expensive operations
      #     burst: 100
      #   "/agntcy.dir.store.v1.StoreService/PullRecord":
      #     rps: 200     # Higher limit for read operations
      #     burst: 400

  # SPIRE configuration
  spire:
    enabled: false
    trustDomain: example.org
    federation: []
      # # Config: https://github.com/spiffe/spire-controller-manager/blob/main/docs/clusterfederatedtrustdomain-crd.md
      # - trustDomain: dir-cluster
      #   bundleEndpointURL: https://0.0.0.0:8081
      #   bundleEndpointProfile:
      #     type: https_web

  # Zot registry configuration (subchart)
  zot:
   # Disable default config mounting
    mountConfig: false

    # Enable default secret mounting
    mountSecret: true

    # ZOT configuration file
    configFiles:
      config.json: |-
        {
          "distSpecVersion": "1.1.1",
          "storage": {
            "rootDirectory": "/var/lib/registry"
          },
          "http": {
            "address": "0.0.0.0",
            "port": "5000",
            "auth": {
              "htpasswd": {
                "path": "/secret/htpasswd"
              }
            },
            "accessControl": {
              "adminPolicy": {
                "users": ["{{ if .Values.secrets }}{{ if .Values.secrets.ociAuth }}{{ .Values.secrets.ociAuth.username | default "admin" }}{{ else }}admin{{ end }}{{ else }}admin{{ end }}"],
                "actions": ["read", "create", "update", "delete"]
              },
              "repositories": {
                "**": {
                  "anonymousPolicy": [],
                  "defaultPolicy": ["read"]
                }
              }
            }
          },
          "log": {
            "level": "debug"
          },
          "extensions": {
            "search": {
              "enable": true
            },
            "trust": {
              "enable": true,
              "cosign": true,
              "notation": false
            }
          }
        }
    
    # htpasswd credentials for ZOT authentication
    secretFiles:
      htpasswd: ""
    
    # Extra volumes to mount the shared PVC for writable config
    # This allows the apiserver sync worker to modify ZOT's config at runtime
    extraVolumes:
      - name: zot-config-storage
        persistentVolumeClaim:
          claimName: dir-zot-config
    
    # Mount the shared PVC into ZOT container
    extraVolumeMounts:
      - name: zot-config-storage
        mountPath: /etc/zot
    
    # Configure zot to use the config file from the shared mounted volume
    extraArgs:
      - "serve"
      - "/etc/zot/config.json"

  # Secrets configuration
  # Sensitive credentials are stored in Kubernetes secrets and injected as environment variables
  secrets:
    # Private key for peer-to-peer routing identity
    # If not provided, the secret will not include this key
    privKey: ""
    
    # Sync authentication credentials
    # Used for authenticating sync operations between nodes
    # Username defaults to "sync" if empty, password is randomly generated if empty
    syncAuth:
      username: ""
      password: ""
    
    # OCI registry authentication
    # Used for authenticating to the OCI-backed storage backend
    # Username defaults to "admin" if empty, password is randomly generated if empty
    ociAuth:
      username: ""
      password: ""
